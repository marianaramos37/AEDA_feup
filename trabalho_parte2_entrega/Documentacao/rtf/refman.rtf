{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment UghEatsFoodDelivery  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
1.0 \par
}}UghEatsFoodDelivery}
{\comment Gerado por doxygen.}
{\creatim \yr2019\mo11\dy16\hr22\min22\sec31}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt UghEatsFoodDelivery}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Vers\'E3o 1.0\par{\field\fldedit {\*\fldinst CREATEDATE \\*MERGEFORMAT}{\fldrslt S\'E1bado, 16 de Novembro de 2019 }}\par
\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \'CDndice\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CDndice da hierarquia\par \pard\plain 
{\tc \v \'CDndice da hierarquia}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Hierarquia de classes\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Esta lista de heran\'E7as est\'E1 organizada, dentro do poss\'EDvel, por ordem alfab\'E9tica:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
Base\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Cliente\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ClienteNaListaNegra\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Data\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Empresa\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Encomenda\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Funcionario\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGV \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
Administrador\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Entregador\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
FuncionarioInexistente\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Morada\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Prato\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Restaurante\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
RestauranteInexistente\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Veiculo\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CDndice dos componentes\par \pard\plain 
{\tc \v \'CDndice dos componentes}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Lista de componentes\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Lista de classes, estruturas, uni\'F5es e interfaces com uma breve descri\'E7\'E3o:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b Administrador} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b Administrador} representa um funcion\'E1rio {\b Administrador} atrav\'E9s das suas caracteristicas enquanto Funcion\'E1rio, mais a sua fun\'E7\'E3o })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Base} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b Base} representa uma {\b Base} da {\b Empresa} atrav\'E9s da sua {\b Morada}, conselho, coordenadas GPS, gerente, conjunto de Clientes, conjunto de Restaurantes e o conjunto de funcion\'E1rios dessa {\b Base} })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Cliente} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class {\b Cliente} representa um cliente atraves da sua {\b Morada}, nome, nif e {\b Base} pertencente })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ClienteNaListaNegra} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b ClienteNaListaNegra} representa uma exce\'E7\'E3o que \'E9 lan\'E7ada quando um cliente pertence \'E0 Lista Negra da empresa (listanegra.txt) })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Data} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class {\b Data} representa uma data atraves do dia, mes e ano })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Empresa} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b Empresa} representa a {\b Empresa} atrav\'E9s do conjunto de Bases (classe {\b Base}) que tem e um conjunto de encomendas feitas \'E0 empresa desde sempre })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Encomenda} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b Encomenda} representa uma encomenda atrav\'E9s do nome do Restauranre, {\b Data} e hora da encomenda, nome do {\b Entregador} e {\b Cliente}, lista de pratos do menu encomendados, se a encomenda foi realizada com sucesso e se foi realizada dentro ou num concelho vizinho, e o pre\'E7o total da encomenda })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Entregador} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b Entregador} representa um funcion\'E1rio {\b Entregador} atrav\'E9s das suas caracter\'EDsticas enquanto Funcion\'E1rio, mais o seu Ve\'EDculo, um vetor de encomendas (classe {\b Encomenda}) feitas, e a sua disponibilidade })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Funcionario} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b Funcionario} representa um funcion\'E1rio atrav\'E9s do seu nome e nif, da sua {\b Data} de nascimento, do seu Salario e do seu tipo(Entregador/Administrador) })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b FuncionarioInexistente} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b FuncionarioInexistente} representa uma exce\'E7\'E3o que \'E9 lan\'E7ada se tenta aceder a um funcionario que n\'E3o pertence \'E0 lista de funcionarios da base })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Morada} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class {\b Morada} representa uma morada atraves da sua rua, localidade e numero })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Prato} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class {\b Prato} representa um prato atraves do seu nome, tipo de culin\'E1ria e o respetivo pre\'E7o })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Restaurante} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class {\b Restaurante} representa um restaurante atraves do seu nome, da sua {\b Morada}, do seu menu(vetor de pratos) e conjunto de tipos de culin\'E1ria })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b RestauranteInexistente} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b RestauranteInexistente} representa uma exce\'E7\'E3o que \'E9 lan\'E7ada quando tenta aceder a um {\b Restaurante} que n\'E3o pertence \'E0 lista de restaurantes da base })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Veiculo} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class {\b Veiculo} representa um ve\'EDculo atraves da sua marca, do seu tipo e a sua data de aquisi\'E7\'E3o })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CDndice dos ficheiros\par \pard\plain 
{\tc \v \'CDndice dos ficheiros}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Lista de ficheiros\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Lista de todos os ficheiros com uma breve descri\'E7\'E3o:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b UgnEatsFoodDeliveryFinal3/{\b auxiliares.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b UgnEatsFoodDeliveryFinal3/{\b auxiliares.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b UgnEatsFoodDeliveryFinal3/{\b cliente.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b UgnEatsFoodDeliveryFinal3/{\b cliente.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b UgnEatsFoodDeliveryFinal3/{\b empresa.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b UgnEatsFoodDeliveryFinal3/{\b empresa.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b UgnEatsFoodDeliveryFinal3/{\b main.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b UgnEatsFoodDeliveryFinal3/{\b restaurante.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b UgnEatsFoodDeliveryFinal3/{\b restaurante.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Documenta\'E7\'E3o da classe{\tc \v Documenta\'E7\'E3o da classe}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia \'E0 classe Administrador\par \pard\plain 
{\tc\tcl2 \v Administrador}
{\xe \v Administrador}
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b Administrador} representa um funcion\'E1rio {\b Administrador} atrav\'E9s das suas caracteristicas enquanto Funcion\'E1rio, mais a sua fun\'E7\'E3o. }}\par
{
{\f2 #include <empresa.h>}}\par
Diagrama de heran\'E7as da classe Administrador{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_administrador.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Administrador} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Administrador}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~Administrador} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destrutor da classe {\b Administrador}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const string {\b getFuncao} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setFuncao} (const string &{\b funcao})\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos Privados\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b funcao}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A fun\'E7\'E3o do {\b Administrador}. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b Administrador} representa um funcion\'E1rio {\b Administrador} atrav\'E9s das suas caracteristicas enquanto Funcion\'E1rio, mais a sua fun\'E7\'E3o. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos Construtores & Destrutor\par
\pard\plain 
{\xe \v Administrador\:Administrador}
{\xe \v Administrador\:Administrador}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Administrador::Administrador ()}}
\par
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Administrador}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   133 \{\}\par
}
}
{\xe \v ~Administrador\:Administrador}
{\xe \v Administrador\:~Administrador}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Administrador::~Administrador (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destrutor da classe {\b Administrador}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   134                               \{\par
  135 \par
  136 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos m\'E9todos\par
\pard\plain 
{\xe \v getFuncao\:Administrador}
{\xe \v Administrador\:getFuncao}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string Administrador::getFuncao () const{\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplementado de {\b Funcionario} ({\i p. {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   137                                             \{\par
  138     {\cf19 return} funcao;\par
  139 \}\par
}
}
{\xe \v setFuncao\:Administrador}
{\xe \v Administrador\:setFuncao}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Administrador::setFuncao (const string &  {\i funcao}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplementado de {\b Funcionario} ({\i p. {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABN \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   140                                              \{\par
  141     funcao = f;\par
  142 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos dados membro\par
\pard\plain 
{\xe \v funcao\:Administrador}
{\xe \v Administrador\:funcao}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Administrador::funcao{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A fun\'E7\'E3o do {\b Administrador}. }}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para esta classe foi gerada a partir dos seguintes ficheiros:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UgnEatsFoodDeliveryFinal3/{\b empresa.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UgnEatsFoodDeliveryFinal3/{\b empresa.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia \'E0 classe Base\par \pard\plain 
{\tc\tcl2 \v Base}
{\xe \v Base}
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b Base} representa uma {\b Base} da {\b Empresa} atrav\'E9s da sua {\b Morada}, conselho, coordenadas GPS, gerente, conjunto de Clientes, conjunto de Restaurantes e o conjunto de funcion\'E1rios dessa {\b Base}. }}\par
{
{\f2 #include <empresa.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Base} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Base}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Base} (string base)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constroi uma inst\'E2ncia de {\b Base} recebendo uma string estruturada com o seu conteudo. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~Base} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destrutor da classe {\b Base}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b Morada} & {\b getMorada} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setMorada} (const {\b Morada} &{\b morada})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const string & {\b getConselho} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setConselho} (const string &{\b conselho})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const string & {\b getCoordenadaGps} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setCoordenadaGps} (const string &coordenadaGps)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const string & {\b getGerente} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setGerente} (const string &{\b gerente})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
vector< {\b Cliente} > {\b getClientes} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setClientes} (vector< {\b Cliente} > &{\b clientes})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
vector< {\b Restaurante} > {\b getRestaurantes} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setRestaurantes} (vector< {\b Restaurante} > &{\b restaurantes})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
vector< {\b Funcionario} * > {\b getFuncionarios} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setFuncionarios} (const vector< {\b Funcionario} * > &{\b funcionarios})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b getFuncionariosFileName} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b getClientesFileName} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
vector< {\b Cliente} > {\b getListaNegra} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b getListaNegra} (vector< {\b Cliente} > l)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b clientes_readfile} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
L\'EA o ficheiro clientes.txt, que cont\'E9m a informacao ordenada de um conjunto de clientes (Classe {\b Cliente}). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b funcionarios_readfile} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
L\'EA o ficheiro funcionarios<Base>.txt, que cont\'E9m a informac\'E3o ordenada de um conjunto de funcion\'E1rios (Classe Funcion\'E1rio). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b restaurantes_readfile} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
L\'EA o ficheiro restaurante<Base>.txt, que cont\'E9m a informacao ordenada de um conjunto de restaurantes (Classe {\b Restaurante}). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b listaNegra_readfile} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
L\'EA o ficheiro listanegra.txt, que cont\'E9m a informacao ordenada de um conjunto de clientes (Classe {\b Cliente}). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b addCliente} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Adinciona um {\b Cliente} \'E0 {\b Base}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b addRestaurante} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Adinciona um {\b Restaurante} \'E0 {\b Base}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b addAdmin} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Adinciona um funcion\'E1rio {\b Administrador} \'E0 {\b Base}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b addEntreg} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Adinciona um funcionario {\b Entregador} \'E0 {\b Base}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b removeCliente} ({\b Cliente} c)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove um {\b Cliente} da {\b Base}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b removeRestaurante} ({\b Restaurante} r)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove um {\b Restaurante} da {\b Base}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b removeFuncionario} ({\b Funcionario} f)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove um Funcion\'E1rio da {\b Base}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b removeAdmin} ({\b Funcionario} f)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove um funcion\'E1rio do tipo {\b Administrador} da {\b Base}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b removeEntreg} ({\b Funcionario} f)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove um funcion\'E1rio do tipo {\b Entregador} da {\b Base}. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos Privados\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Morada} {\b morada}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A morada da {\b Base}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b conselho}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O conselho da {\b Base}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b coordenadaGPS}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
As coordenadas GPS da {\b Base}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b gerente}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O gerente da {\b Base}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b clientes_filename}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O nome do ficheiro que contem todos os clientes da {\b Base}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b restaurantes_filename}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O nome do ficheiro que contem todos os restaurantes da {\b Base}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b funcionarios_filename}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O nome do ficheiro que contem todos os funcion\'E1rios da {\b Base}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
vector< {\b Cliente} > {\b clientes}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O conjunto dos clientes da {\b Base}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
vector< {\b Cliente} > {\b listaNegra}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O conjunto dos clientes pertencentes \'E0 Lista Negra da {\b Empresa}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
vector< {\b Restaurante} > {\b restaurantes}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O conjunto dos restaurantes da {\b Base}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
vector< {\b Funcionario} * > {\b funcionarios}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O conjunto dos funcion\'E1rios da {\b Base}. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b Base} representa uma {\b Base} da {\b Empresa} atrav\'E9s da sua {\b Morada}, conselho, coordenadas GPS, gerente, conjunto de Clientes, conjunto de Restaurantes e o conjunto de funcion\'E1rios dessa {\b Base}. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos Construtores & Destrutor\par
\pard\plain 
{\xe \v Base\:Base}
{\xe \v Base\:Base}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Base::Base ()}}
\par
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Base}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   171 \{\}\par
}
}
{\xe \v Base\:Base}
{\xe \v Base\:Base}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Base::Base (string  {\i base})}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constroi uma inst\'E2ncia de {\b Base} recebendo uma string estruturada com o seu conteudo. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   173                                \{\par
  174     ifstream infile;\par
  175     infile.open(base_filename);\par
  176 \par
  177     {\cf18 string} r;\par
  178     getline(infile, r);\par
  179     this->morada.setRua(r);\par
  180     {\cf18 string} l;\par
  181     getline(infile, l);\par
  182     this->morada.setLocalidade(l);\par
  183     {\cf18 string} n;\par
  184     getline(infile, n);\par
  185     this->morada.setNumero(n);\par
  186     getline(infile, this->conselho);\par
  187     getline(infile, this->coordenadaGPS);\par
  188     getline(infile, this->gerente);\par
  189     getline(infile,clientes_filename);\par
  190     getline(infile, restaurantes_filename);\par
  191     getline(infile, funcionarios_filename );\par
  192 \par
  193     infile.close();\par
  194 \}\par
}
}
{\xe \v ~Base\:Base}
{\xe \v Base\:~Base}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Base::~Base (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destrutor da classe {\b Base}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   196             \{\par
  197 \par
  198 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos m\'E9todos\par
\pard\plain 
{\xe \v addAdmin\:Base}
{\xe \v Base\:addAdmin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Base::addAdmin ()}}
\par
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Adinciona um funcion\'E1rio {\b Administrador} \'E0 {\b Base}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   770                    \{\par
  771     Administrador a;\par
  772     Data d;\par
  773     ofstream file;\par
  774     {\cf18 string} nome,nif,dia,mes,ano,salario,funcao, data;\par
  775     {\cf18 int} b;\par
  776     cin.ignore();\par
  777     cout<<{\cf22 "Nome:"}<<endl;\par
  778     getline(cin,nome);\par
  779     a.setNome(nome);\par
  780     cout<<{\cf22 "Nif:"}<<endl;\par
  781     cin>>nif;\par
  782     {\cf20 //cin.ignore();}\par
  783     {\cf19 while}(nif.size()>9 || nif.size()<9)\{\par
  784         cout<<{\cf22 "Nif invalido. Volte a inserir:"}<<endl;\par
  785         cin>>nif;\par
  786     \}\par
  787     {\cf18 bool} existe={\cf17 false};\par
  788     {\cf19 for}({\cf18 int} i=0;i<funcionarios.size();i++)\{\par
  789         {\cf19 if}(funcionarios[i]->getNif()==nif)\{\par
  790             existe={\cf17 true};\par
  791         \}\par
  792     \}\par
  793     {\cf19 while}(existe=={\cf17 true})\{\par
  794         cout<<{\cf22 "Ja temos um funcionario registado com este nif"} <<endl;\par
  795         cout<< {\cf22 "Tente Novamente!"}<<endl;\par
  796         cout<<{\cf22 "Nif:"}<<endl;\par
  797         cin>>nif;\par
  798         {\cf19 for}({\cf18 int} i=0;i<funcionarios.size();i++)\{\par
  799             {\cf19 if}(funcionarios[i]->getNif()==nif)\{\par
  800                 existe={\cf17 true};\par
  801                 {\cf19 break};\par
  802             \}{\cf19 else} existe={\cf17 false};\par
  803 \par
  804         \}\par
  805     \}\par
  806     a.setNif(nif);\par
  807     {\cf20 //cin.ignore();}\par
  808     cout<<{\cf22 "Data de nascimento:"}<<endl;\par
  809     cout<<{\cf22 "Dia:"}<<endl;\par
  810     cin>>dia;\par
  811     cout<<{\cf22 "Mes:"}<<endl;\par
  812     cin>>mes;\par
  813     cout<<{\cf22 "Ano:"}<<endl;\par
  814     cin>>ano;\par
  815     data=dia+{\cf22 "/"}+mes+{\cf22 "/"}+ano;\par
  816     d=Data(data);\par
  817     a.setData(d);\par
  818     cout<<{\cf22 "Salario:"}<<endl;\par
  819     cin>>salario;\par
  820     a.setSalario(stoi(salario));\par
  821     cout<<{\cf22 "Cargo:"}<<endl;\par
  822     cin>>funcao;\par
  823     a.setFuncao(funcao);\par
  824     funcionarios.push_back(&a);\par
  825     cout << {\cf22 "O administrador "}<<a.getNome()<<{\cf22 " foi adicionado com sucesso! "} << endl;\par
  826     file.open(funcionarios_filename, ios::app);\par
  827     file << {\cf22 ":::::"} << endl;\par
  828     file<<{\cf22 "Administrador"}<<endl;\par
  829     file << a.getNome() << endl;\par
  830     file << a.getNif()<<endl;\par
  831     file << to_string(a.getData().getDia())+{\cf22 "/"}+to_string(a.getData().getMes())+{\cf22 "/"}+to_string(a.getData().getAno()) << endl;\par
  832     file <<to_string(a.getSalario())<< endl;\par
  833     file<<a.getFuncao()<<endl;\par
  834 \par
  835 \par
  836 \}\par
}
}
{\xe \v addCliente\:Base}
{\xe \v Base\:addCliente}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Base::addCliente ()}}
\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Adinciona um {\b Cliente} \'E0 {\b Base}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   416                       \{\par
  417     Cliente c;\par
  418     Morada m;\par
  419     ofstream file;\par
  420     {\cf18 string} nome,nif,rua,con,num,base, morada;\par
  421     {\cf18 int} a;\par
  422     {\cf18 bool} aceite= {\cf17 true};\par
  423     cin.ignore();\par
  424     cout<<{\cf22 "Nome:"}<<endl;\par
  425     getline(cin,nome);\par
  426     c.setName(nome);\par
  427     cout<<{\cf22 "Nif:"}<<endl;\par
  428     cin>>nif;\par
  429     {\cf20 //cin.ignore();}\par
  430     {\cf19 while}(nif.size()>9 || nif.size()<9)\{\par
  431         cout<<{\cf22 "Nif invalido. Volte a inserir:"}<<endl;\par
  432         cin>>nif;\par
  433     \}\par
  434     {\cf18 bool} existe={\cf17 false};\par
  435     {\cf19 for}({\cf18 int} i=0;i<clientes.size();i++)\{\par
  436         {\cf19 if}(clientes[i].getNif()==nif)\{\par
  437             existe={\cf17 true};\par
  438         \}\par
  439     \}\par
  440     listaNegra_readfile();\par
  441     {\cf19 for}({\cf18 int} i=0; i<listaNegra.size(); i++)\{\par
  442         {\cf19 if}(listaNegra[i].getNif()==nif)\{\par
  443             {\cf19 throw} ClienteNaListaNegra(clientes[i]);\par
  444         \}\par
  445     \}\par
  446     {\cf19 while} (existe == {\cf17 true}) \{\par
  447         cout << {\cf22 "Ja temos um cliente registado com este nif"} << endl;\par
  448         cout << {\cf22 "Tente Novamente!"} << endl;\par
  449         cout << {\cf22 "Nif:"} << endl;\par
  450         cin >> nif;\par
  451         {\cf19 for} ({\cf18 int} i = 0; i < clientes.size(); i++) \{\par
  452             {\cf19 if} (clientes[i].getNif() == nif) \{\par
  453                 existe = {\cf17 true};\par
  454                 {\cf19 break};\par
  455             \} {\cf19 else} existe = {\cf17 false};\par
  456         \}\par
  457     \}\par
  458     c.setNif(nif);\par
  459     cin.ignore();\par
  460     cout << {\cf22 "Rua:"} << endl;\par
  461     getline(cin, rua);\par
  462     {\cf20 //cin.ignore();}\par
  463     cout << {\cf22 "Conselho:"} << endl;\par
  464 \par
  465     {\cf19 if} (conselho == {\cf22 "Porto"}) \{\par
  466         cout << {\cf22 "\{1\} - Porto"} << endl;\par
  467         cout << {\cf22 "\{2\} - Matosinhos "} << endl;\par
  468         cout << {\cf22 "\{3\} - Vila Nova de Gaia"} << endl;\par
  469         cout << {\cf22 "\{4\} - Maia"} << endl;\par
  470         cout << {\cf22 "\{5\} - Gondomar"} << endl;\par
  471         cout << {\cf22 "\{0\} - Outros"} << endl;\par
  472         cin >> a;\par
  473         {\cf19 switch} (a) \{\par
  474             {\cf19 case} 0:\par
  475                 con = {\cf22 "0"};\par
  476                 {\cf19 break};\par
  477             {\cf19 case} 1:\par
  478                 con = {\cf22 "Porto"};\par
  479                 {\cf19 break};\par
  480             {\cf19 case} 2:\par
  481                 con = {\cf22 "Matosinhos"};\par
  482                 {\cf19 break};\par
  483             {\cf19 case} 3:\par
  484                 con = {\cf22 "Vila Nova de Gaia"};\par
  485                 {\cf19 break};\par
  486             {\cf19 case} 4:\par
  487                 con = {\cf22 "Maia"};\par
  488                 {\cf19 break};\par
  489             {\cf19 case} 5:\par
  490                 con = {\cf22 "Gondomar"};\par
  491                 {\cf19 break};\par
  492             {\cf19 default}:\par
  493                 con = {\cf22 "1"};\par
  494         \}\par
  495     \}\par
  496     {\cf19 if} (conselho == {\cf22 "Lisboa"}) \{\par
  497         cout << {\cf22 "\{1\} - Lisboa"} << endl;\par
  498         cout << {\cf22 "\{2\} - Oeiras "} << endl;\par
  499         cout << {\cf22 "\{3\} - Amadora"} << endl;\par
  500         cout << {\cf22 "\{4\} - Odivelas"} << endl;\par
  501         cout << {\cf22 "\{5\} - Loures"} << endl;\par
  502         cout << {\cf22 "\{0\} - Outro"} << endl;\par
  503         cin >> a;\par
  504 \par
  505         {\cf19 switch} (a) \{\par
  506             {\cf19 case} 0:\par
  507                 con = {\cf22 "0"};\par
  508                 {\cf19 break};\par
  509             {\cf19 case} 1:\par
  510                 con = {\cf22 "Lisboa"};\par
  511                 {\cf19 break};\par
  512             {\cf19 case} 2:\par
  513                 con = {\cf22 "Oeiras"};\par
  514                 {\cf19 break};\par
  515             {\cf19 case} 3:\par
  516                 con = {\cf22 "Amadora"};\par
  517                 {\cf19 break};\par
  518             {\cf19 case} 4:\par
  519                 con = {\cf22 "Odivelas"};\par
  520                 {\cf19 break};\par
  521             {\cf19 case} 5:\par
  522                 con = {\cf22 "Loures"};\par
  523                 {\cf19 break};\par
  524             {\cf19 default}:\par
  525                 con = {\cf22 "1"};\par
  526         \}\par
  527     \}\par
  528     {\cf19 if} (conselho == {\cf22 "Faro"}) \{\par
  529         cout << {\cf22 "\{1\} - Faro"} << endl;\par
  530         cout << {\cf22 "\{2\} - Loule"} << endl;\par
  531         cout << {\cf22 "\{3\} - Olhao"} << endl;\par
  532         cout << {\cf22 "\{4\} - Sao Bras de Alportel"} << endl;\par
  533         cout << {\cf22 "\{0\} - Outro"} << endl;\par
  534         cin >> a;\par
  535 \par
  536         {\cf19 switch} (a) \{\par
  537             {\cf19 case} 0:\par
  538                 con = {\cf22 "0"};\par
  539                 {\cf19 break};\par
  540             {\cf19 case} 1:\par
  541                 con = {\cf22 "Faro"};\par
  542                 {\cf19 break};\par
  543             {\cf19 case} 2:\par
  544                 con = {\cf22 "Loule"};\par
  545                 {\cf19 break};\par
  546             {\cf19 case} 3:\par
  547                 con = {\cf22 "Olhao"};\par
  548                 {\cf19 break};\par
  549             {\cf19 case} 4:\par
  550                 con = {\cf22 "Sao Bras de Alportel"};\par
  551                 {\cf19 break};\par
  552             {\cf19 default}:\par
  553                 con = {\cf22 "1"};\par
  554 \par
  555         \}\par
  556     \}\par
  557     {\cf19 if} (con != {\cf22 "0"} && con != {\cf22 "1"}) \{\par
  558         cout << {\cf22 "Numero:"} << endl;\par
  559         cin >> num;\par
  560         morada = rua + {\cf22 ", "} + con + {\cf22 ", "} + num;\par
  561         m = Morada(morada);\par
  562         c.setMorada(m);\par
  563         clientes.push_back(c);\par
  564         cout << {\cf22 "O cliente "} << c.getName() << {\cf22 " foi registado com sucesso! "} << endl;\par
  565         cout << {\cf22 "Obrigada por escolher Ugh Eats Delivery!"} << endl;\par
  566         file.open(clientes_filename);\par
  567         {\cf19 for} ({\cf18 int} i = 0; i < clientes.size() - 1; i++) \{\par
  568             file << clientes[i].getName() << endl;\par
  569             file << clientes[i].getNif() << endl;\par
  570             file << clientes[i].getMorada().getRua() + {\cf22 ", "} + clientes[i].getMorada().getLocalidade() + {\cf22 ", "} +\par
  571                     clientes[i].getMorada().getNumero() << endl;\par
  572             file << conselho << endl;\par
  573             file << {\cf22 ":::::"} << endl;\par
  574         \}\par
  575         file << clientes[clientes.size() - 1].getName() << endl;\par
  576         file << clientes[clientes.size() - 1].getNif() << endl;\par
  577         file << clientes[clientes.size() - 1].getMorada().getRua() + {\cf22 ", "} +\par
  578                 clientes[clientes.size() - 1].getMorada().getLocalidade() + {\cf22 ", "} +\par
  579                 clientes[clientes.size() - 1].getMorada().getNumero() << endl;\par
  580         file << conselho << endl;\par
  581     \} {\cf19 else} {\cf19 if} (con == {\cf22 "1"}) \{\par
  582         cout << {\cf22 "Opcao Invalida"};\par
  583     \} {\cf19 else} \{\par
  584         cout << {\cf22 "Lamentamos, mas a Ugh Eats ainda nao entraga noutros concelhos"} << endl;\par
  585     \}\par
  586 \}\par
}
}
{\xe \v addEntreg\:Base}
{\xe \v Base\:addEntreg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Base::addEntreg ()}}
\par
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Adinciona um funcionario {\b Entregador} \'E0 {\b Base}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   837                      \{\par
  838     Entregador a;\par
  839     Data d;\par
  840     Veiculo v;\par
  841     ofstream file;\par
  842     {\cf18 string} nome,nif,dia,mes,ano,salario,marca, tipo, diav, data,mesv, anov,datav, veiculo, disp;\par
  843     {\cf18 int} b;\par
  844     cin.ignore();\par
  845     cout<<{\cf22 "Nome:"}<<endl;\par
  846     getline(cin,nome);\par
  847     a.setNome(nome);\par
  848     cout<<{\cf22 "Nif:"}<<endl;\par
  849     cin>>nif;\par
  850     {\cf20 //cin.ignore();}\par
  851     {\cf19 while}(nif.size()>9 || nif.size()<9)\{\par
  852         cout<<{\cf22 "Nif invalido. Volte a inserir:"}<<endl;\par
  853         cin>>nif;\par
  854     \}\par
  855     {\cf18 bool} existe={\cf17 false};\par
  856     {\cf19 for}({\cf18 int} i=0;i<funcionarios.size();i++)\{\par
  857         {\cf19 if}(funcionarios[i]->getNif()==nif)\{\par
  858             existe={\cf17 true};\par
  859         \}\par
  860     \}\par
  861     {\cf19 while}(existe=={\cf17 true})\{\par
  862         cout<<{\cf22 "Ja temos um funcionario registado com este nif"} <<endl;\par
  863         cout<< {\cf22 "Tente Novamente!"}<<endl;\par
  864         cout<<{\cf22 "Nif:"}<<endl;\par
  865         cin>>nif;\par
  866         {\cf19 for}({\cf18 int} i=0;i<funcionarios.size();i++)\{\par
  867             {\cf19 if}(funcionarios[i]->getNif()==nif)\{\par
  868                 existe={\cf17 true};\par
  869                 {\cf19 break};\par
  870             \}{\cf19 else} existe={\cf17 false};\par
  871 \par
  872         \}\par
  873     \}\par
  874     a.setNif(nif);\par
  875     {\cf20 //cin.ignore();}\par
  876     cout<<{\cf22 "Data de nascimento:"}<<endl;\par
  877     cout<<{\cf22 "Dia:"}<<endl;\par
  878     cin>>dia;\par
  879     cout<<{\cf22 "Mes:"}<<endl;\par
  880     cin>>mes;\par
  881     cout<<{\cf22 "Ano:"}<<endl;\par
  882     cin>>ano;\par
  883     data=dia+{\cf22 "/"}+mes+{\cf22 "/"}+ano;\par
  884     d=Data(data);\par
  885     a.setData(d);\par
  886     cout<<{\cf22 "Salario:"}<<endl;\par
  887     cin>>salario;\par
  888     a.setSalario(stoi(salario));\par
  889     cout<<{\cf22 "Marca do veiculo alocado:"}<<endl;\par
  890     cin.ignore();\par
  891     getline(cin,marca);\par
  892     v.setMarca(marca);\par
  893     cout<<{\cf22 "Modelo do veiculo:"}<<endl;\par
  894     getline(cin,tipo);\par
  895     v.setTipo(tipo);\par
  896     cout<<{\cf22 "Dia de aquisicao :"}<<endl;\par
  897     cin>>dia;\par
  898     cout<<{\cf22 "Mes de aquisicao :"}<<endl;\par
  899     cin>>mes;\par
  900     cout<<{\cf22 "Ano de aquisicao :"}<<endl;\par
  901     cin>>ano;\par
  902     datav=dia+{\cf22 "/"}+mes+{\cf22 "/"}+ano;\par
  903     v.setDataDeAquisicao(datav);\par
  904     a.setVeiculoAlocado(v);\par
  905     a.setDisponivel(1);\par
  906     funcionarios.push_back(&a);\par
  907     cout << {\cf22 "O entregador "}<<a.getNome()<<{\cf22 " foi adicionado com sucesso! "} << endl;\par
  908     file.open(funcionarios_filename, ios::app);\par
  909     file << {\cf22 ":::::"} << endl;\par
  910     file<<{\cf22 "Entregador"}<<endl;\par
  911     file << a.getNome() << endl;\par
  912     file << a.getNif()<<endl;\par
  913     file << to_string(a.getData().getDia())+{\cf22 "/"}+to_string(a.getData().getMes())+{\cf22 "/"}+to_string(a.getData().getAno()) << endl;\par
  914     file <<to_string(a.getSalario())<< endl;\par
  915     file<<a.getVeiculoAlocado().getMarca()+{\cf22 " ,"}+a.getVeiculoAlocado().getTipo()+{\cf22 " ,"}+a.getVeiculoAlocado().getDataDeAquisicao()<<endl;\par
  916     file<<to_string(a.isDisponivel())<<endl;\par
  917 \}\par
}
}
{\xe \v addRestaurante\:Base}
{\xe \v Base\:addRestaurante}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Base::addRestaurante ()}}
\par
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Adinciona um {\b Restaurante} \'E0 {\b Base}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   619                          \{\par
  620     Restaurante r;\par
  621     Morada m;\par
  622     ofstream file;\par
  623     {\cf18 string} nome,rua,con,num,base, morada, culi;\par
  624     {\cf18 int} a,b;\par
  625     vector<string> culinaria;\par
  626     cin.ignore();\par
  627     cout<<{\cf22 "Nome:"}<<endl;\par
  628     getline(cin,nome);\par
  629     r.setNome(nome);\par
  630     cout<< {\cf22 "Rua:"}<<endl;\par
  631     getline(cin,rua);\par
  632     {\cf20 //cin.ignore();}\par
  633     cout<<{\cf22 "Concelho:"}<<endl;\par
  634     {\cf19 if}(conselho=={\cf22 "Porto"}) \{\par
  635         cout << {\cf22 "\{1\} - Porto"} << endl;\par
  636         cout << {\cf22 "\{2\} - Matosinhos "} << endl;\par
  637         cout << {\cf22 "\{3\} - Vila Nova de Gaia"} << endl;\par
  638         cout << {\cf22 "\{4\} - Maia"} << endl;\par
  639         cout << {\cf22 "\{5\} - Gondomar"} << endl;\par
  640         cin>>a;\par
  641 \par
  642         {\cf19 switch}(a)\{\par
  643             {\cf19 case} 1: con={\cf22 "Porto"}; {\cf19 break};\par
  644             {\cf19 case} 2: con={\cf22 "Matosinhos"}; {\cf19 break};\par
  645             {\cf19 case} 3: con={\cf22 "Vila Nova de Gaia"}; {\cf19 break};\par
  646             {\cf19 case} 4: con={\cf22 "Maia"}; {\cf19 break};\par
  647             {\cf19 case} 5:con={\cf22 "Gondomar"};{\cf19 break};\par
  648             {\cf19 default}:  con={\cf22 "1"};\par
  649         \}\par
  650     \}\par
  651     {\cf19 if}(conselho=={\cf22 "Lisboa"}) \{\par
  652         cout << {\cf22 "\{1\} - Lisboa"} << endl;\par
  653         cout << {\cf22 "\{2\} - Oeiras "} << endl;\par
  654         cout << {\cf22 "\{3\} - Amadora"} << endl;\par
  655         cout << {\cf22 "\{4\} - Odivelas"} << endl;\par
  656         cout << {\cf22 "\{5\} - Loures"} << endl;\par
  657         cin>>a;\par
  658 \par
  659         {\cf19 switch}(a) \{\par
  660             {\cf19 case} 1: con = {\cf22 "Lisboa"};{\cf19 break};\par
  661             {\cf19 case} 2: con = {\cf22 "Oeiras"};{\cf19 break};\par
  662             {\cf19 case} 3: con = {\cf22 "Amadora"};{\cf19 break};\par
  663             {\cf19 case} 4: con = {\cf22 "Odivelas"};{\cf19 break};\par
  664             {\cf19 case} 5: con = {\cf22 "Loures"};{\cf19 break};\par
  665             {\cf19 default}:  con={\cf22 "1"};\par
  666         \}\par
  667     \}\par
  668     {\cf19 if}(conselho=={\cf22 "Faro"}) \{\par
  669         cout << {\cf22 "\{1\} - Faro"} << endl;\par
  670         cout << {\cf22 "\{2\} - Loule"} << endl;\par
  671         cout << {\cf22 "\{3\} - Olhao"} << endl;\par
  672         cout << {\cf22 "\{4\} - Sao Bras de Alportel"} << endl;\par
  673         cin>>a;\par
  674 \par
  675         {\cf19 switch}(a)\{\par
  676             {\cf19 case} 1: con={\cf22 "Faro"}; {\cf19 break};\par
  677             {\cf19 case} 2: con={\cf22 "Loule"}; {\cf19 break};\par
  678             {\cf19 case} 3: con={\cf22 "Olhao"}; {\cf19 break};\par
  679             {\cf19 case} 4: con={\cf22 "Sao Bras de Alportel"}; {\cf19 break};\par
  680             {\cf19 default}:  con={\cf22 "1"};\par
  681 \par
  682         \}\par
  683     \}\par
  684     {\cf19 if}(con!={\cf22 "0"} && con!={\cf22 "1"}) \{\par
  685         cout << {\cf22 "Numero:"} << endl;\par
  686         cin >> num;\par
  687         morada = rua + {\cf22 ", "} + con + {\cf22 ", "} + num;\par
  688         m = Morada(morada);\par
  689         r.setMorada(m);\par
  690         cout << {\cf22 "Culinaria:"} << endl;\par
  691         cout << {\cf22 "\{1\} - Portuguesa"}<< endl;\par
  692         cout << {\cf22 "\{2\} - Italiana"} << endl;\par
  693         cout << {\cf22 "\{3\} - Chinesa"} << endl;\par
  694         cout << {\cf22 "\{4\} - Japonesa"} << endl;\par
  695         cout<< {\cf22 "\{0\} - Outro"}<<endl;\par
  696         cin >> b;\par
  697         {\cf19 switch}(b) \{\par
  698             {\cf19 case} 0:\par
  699                 culi={\cf22 "0"};\par
  700                 {\cf19 break};\par
  701             {\cf19 case} 1:\par
  702                 culi = {\cf22 "Portuguesa"};\par
  703                 {\cf19 break};\par
  704             {\cf19 case} 2:\par
  705                 culi = {\cf22 "Italiana"};\par
  706                 {\cf19 break};\par
  707             {\cf19 case} 3:\par
  708                 culi = {\cf22 "Chinesa"};\par
  709                 {\cf19 break};\par
  710             {\cf19 case} 4:\par
  711                 culi = {\cf22 "Japonesa"};\par
  712                 {\cf19 break};\par
  713             {\cf19 default}:\par
  714                 culi = {\cf22 "1"};\par
  715         \}\par
  716         {\cf19 if}(culi!={\cf22 "1"} && culi!={\cf22 "0"}) \{\par
  717             culinaria.push_back(culi);\par
  718             r.setTiposDeCulinaria(culinaria);\par
  719             restaurantes.push_back(r);\par
  720             cout << {\cf22 "O restaurante "}<<r.getNome()<<{\cf22 " foi adicionado com sucesso \\ne ja se encontra disponivel para receber emcomendas! "}<<endl;\par
  721             file.open(restaurantes_filename);\par
  722             {\cf19 for} ({\cf18 int} i = 0; i < restaurantes.size() - 1; i++) \{\par
  723                 file << restaurantes[i].getNome() << endl;\par
  724                 file << restaurantes[i].getMorada().getRua() + {\cf22 ", "} + restaurantes[i].getMorada().getLocalidade() +\par
  725                         {\cf22 ", "} +\par
  726                         restaurantes[i].getMorada().getNumero() << endl;\par
  727                 file << restaurantes[i].getTiposDeCulinaria()[0] << endl;\par
  728                 file << conselho << endl;\par
  729                 file << {\cf22 ":::::"} << endl;\par
  730             \}\par
  731             file << restaurantes[restaurantes.size() - 1].getNome() << endl;\par
  732             file << restaurantes[restaurantes.size() - 1].getMorada().getRua() + {\cf22 ", "} +\par
  733                     restaurantes[restaurantes.size() - 1].getMorada().getLocalidade() + {\cf22 ", "} +\par
  734                     restaurantes[restaurantes.size() - 1].getMorada().getNumero() << endl;\par
  735             file << restaurantes[restaurantes.size() - 1].getTiposDeCulinaria()[0] << endl;\par
  736             file << conselho << endl;\par
  737         \}\par
  738         {\cf19 else} {\cf19 if}(culi=={\cf22 "1"})\{\par
  739             cout<<{\cf22 "Opcao Invalida"};\par
  740         \}\par
  741         {\cf19 else} {\cf19 if}(culi=={\cf22 "0"})\{\par
  742             cout<<{\cf22 "Lamentamos, mas a Ugh Eats nao permite restaurantes com outros tipos de culinaria "}<<endl;\par
  743         \}\par
  744     \}\par
  745 \par
  746 \par
  747 \par
  748 \}\par
}
}
{\xe \v clientes_readfile\:Base}
{\xe \v Base\:clientes_readfile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Base::clientes_readfile ()}}
\par
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
L\'EA o ficheiro clientes.txt, que cont\'E9m a informacao ordenada de um conjunto de clientes (Classe {\b Cliente}). }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   272                             \{\par
  273     Cliente c;\par
  274     vector<string> cliente_info;\par
  275     ifstream infile;\par
  276     {\cf18 string} line;\par
  277     infile.open(clientes_filename);\par
  278     {\cf19 while}(getline(infile,line))\{\par
  279         {\cf19 if}(line=={\cf22 ":::::"})\{\par
  280             c.setName(cliente_info[0]);\par
  281             c.setNif(cliente_info[1]);\par
  282             c.setMorada(Morada(cliente_info[2]));\par
  283             c.setBase(Base(cliente_info[3]+{\cf22 ".txt"}));\par
  284             clientes.push_back(c);\par
  285             cliente_info.clear();\par
  286         \}{\cf19 else}\{\par
  287             cliente_info.push_back(line);\par
  288         \}\par
  289     \}\par
  290     c.setName(cliente_info[0]);\par
  291     c.setNif(cliente_info[1]);\par
  292     c.setMorada(Morada(cliente_info[2]));\par
  293     c.setBase(Base(cliente_info[3]+{\cf22 ".txt"}));\par
  294     clientes.push_back(c);\par
  295     cliente_info.clear();\par
  296     {\cf19 return};\par
  297 \}\par
}
}
{\xe \v funcionarios_readfile\:Base}
{\xe \v Base\:funcionarios_readfile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Base::funcionarios_readfile ()}}
\par
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
L\'EA o ficheiro funcionarios<Base>.txt, que cont\'E9m a informac\'E3o ordenada de um conjunto de funcion\'E1rios (Classe Funcion\'E1rio). }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   327                                 \{\par
  328     Data d;\par
  329     Veiculo v;\par
  330     vector<string> funcionario_info;\par
  331     ifstream infile;\par
  332     {\cf18 string} line,veiculo;\par
  333     {\cf18 string} temp={\cf22 ""};\par
  334     infile.open(funcionarios_filename);\par
  335     {\cf19 while}(getline(infile,line)) \{\par
  336         {\cf19 if} (line == {\cf22 ":::::"}) \{\par
  337             {\cf19 if}(funcionario_info[0]=={\cf22 "Entregador"}) \{\par
  338                 Entregador *e = {\cf17 new} Entregador();\par
  339                 e->setTipoDeFuncionario(funcionario_info[0]);\par
  340                 e->setNome(funcionario_info[1]);\par
  341                 e->setNif(funcionario_info[2]);\par
  342                 e->setData(Data(funcionario_info[3]));\par
  343                 e->setSalario(stoi(funcionario_info[4]));\par
  344                 e->setVeiculoAlocado(Veiculo(funcionario_info[5]));\par
  345                 e->setDisponivel(stoi(funcionario_info[6]));\par
  346                 funcionarios.push_back(e);\par
  347                 funcionario_info.clear();\par
  348             \}\par
  349             {\cf19 else} {\cf19 if}(funcionario_info[0]=={\cf22 "Administrador"}) \{\par
  350                 Administrador *a= {\cf17 new} Administrador;\par
  351                 a->setTipoDeFuncionario(funcionario_info[0]);\par
  352                 a->setNome(funcionario_info[1]);\par
  353                 a->setNif(funcionario_info[2]);\par
  354                 a->setData(Data(funcionario_info[3]));\par
  355                 a->setSalario(stoi(funcionario_info[4]));\par
  356                 a->setFuncao(funcionario_info[5]);\par
  357                 funcionarios.push_back(a);\par
  358                 funcionario_info.clear();\par
  359             \}\par
  360         \} {\cf19 else} \{\par
  361             funcionario_info.push_back(line);\par
  362         \}\par
  363     \}\par
  364     {\cf19 if}(funcionario_info[0]=={\cf22 "Entregador"}) \{\par
  365         Entregador *e = {\cf17 new} Entregador();\par
  366         e->setTipoDeFuncionario(funcionario_info[0]);\par
  367         e->setNome(funcionario_info[1]);\par
  368         e->setNif(funcionario_info[2]);\par
  369         e->setData(Data(funcionario_info[3]));\par
  370         e->setSalario(stoi(funcionario_info[4]));\par
  371         e->setVeiculoAlocado(Veiculo(funcionario_info[5]));\par
  372         e->setDisponivel(stoi(funcionario_info[6]));\par
  373         funcionarios.push_back(e);\par
  374         funcionario_info.clear();\par
  375     \}\par
  376     {\cf19 else} {\cf19 if}(funcionario_info[0]=={\cf22 "Administrador"}) \{\par
  377         Administrador *a= {\cf17 new} Administrador;\par
  378         a->setTipoDeFuncionario(funcionario_info[0]);\par
  379         a->setNome(funcionario_info[1]);\par
  380         a->setNif(funcionario_info[2]);\par
  381         a->setData(Data(funcionario_info[3]));\par
  382         a->setSalario(stoi(funcionario_info[4]));\par
  383         a->setFuncao(funcionario_info[5]);\par
  384         funcionarios.push_back(a);\par
  385         funcionario_info.clear();\par
  386     \}\par
  387     {\cf19 return};\par
  388 \}\par
}
}
{\xe \v getClientes\:Base}
{\xe \v Base\:getClientes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
vector< {\b Cliente} > Base::getClientes ()}}
\par
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   216                                   \{\par
  217     {\cf19 return} clientes;\par
  218 \}\par
}
}
{\xe \v getClientesFileName\:Base}
{\xe \v Base\:getClientesFileName}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Base::getClientesFileName ()}}
\par
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   262                                 \{\par
  263     {\cf19 return} clientes_filename;\par
  264 \}\par
}
}
{\xe \v getConselho\:Base}
{\xe \v Base\:getConselho}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string & Base::getConselho () const}}
\par
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   204                                       \{\par
  205     {\cf19 return} conselho;\par
  206 \}\par
}
}
{\xe \v getCoordenadaGps\:Base}
{\xe \v Base\:getCoordenadaGps}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string & Base::getCoordenadaGps () const}}
\par
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   208                                            \{\par
  209     {\cf19 return} coordenadaGPS;\par
  210 \}\par
}
}
{\xe \v getFuncionarios\:Base}
{\xe \v Base\:getFuncionarios}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
vector< {\b Funcionario} * > Base::getFuncionarios ()}}
\par
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   226                                             \{\par
  227     {\cf19 return} funcionarios;\par
  228 \}\par
}
}
{\xe \v getFuncionariosFileName\:Base}
{\xe \v Base\:getFuncionariosFileName}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Base::getFuncionariosFileName ()}}
\par
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   259                                     \{\par
  260     {\cf19 return} funcionarios_filename;\par
  261 \}\par
}
}
{\xe \v getGerente\:Base}
{\xe \v Base\:getGerente}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string & Base::getGerente () const}}
\par
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   212                                      \{\par
  213     {\cf19 return} gerente;\par
  214 \}\par
}
}
{\xe \v getListaNegra\:Base}
{\xe \v Base\:getListaNegra}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
vector< {\b Cliente} > Base::getListaNegra ()}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   265                                     \{\par
  266     {\cf19 return} listaNegra;\par
  267 \}\par
}
}
{\xe \v getListaNegra\:Base}
{\xe \v Base\:getListaNegra}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Base::getListaNegra (vector< {\b Cliente} >  {\i l})}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   268                                           \{\par
  269     listaNegra=l;\par
  270 \}\par
}
}
{\xe \v getMorada\:Base}
{\xe \v Base\:getMorada}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b Morada} & Base::getMorada () const}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   200                                     \{\par
  201     {\cf19 return} morada;\par
  202 \}\par
}
}
{\xe \v getRestaurantes\:Base}
{\xe \v Base\:getRestaurantes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
vector< {\b Restaurante} > Base::getRestaurantes ()}}
\par
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   221                                          \{\par
  222 \par
  223     {\cf19 return} restaurantes;\par
  224 \}\par
}
}
{\xe \v listaNegra_readfile\:Base}
{\xe \v Base\:listaNegra_readfile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Base::listaNegra_readfile ()}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
L\'EA o ficheiro listanegra.txt, que cont\'E9m a informacao ordenada de um conjunto de clientes (Classe {\b Cliente}). }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   389                               \{\par
  390     Cliente c;\par
  391     vector<string> cliente_info;\par
  392     ifstream infile;\par
  393     {\cf18 string} line;\par
  394     infile.open({\cf22 "listanegra.txt"});\par
  395     {\cf19 while}(getline(infile,line))\{\par
  396         {\cf19 if}(line=={\cf22 ":::::"})\{\par
  397             c.setName(cliente_info[0]);\par
  398             c.setNif(cliente_info[1]);\par
  399             c.setMorada(Morada(cliente_info[2]));\par
  400             c.setBase(Base(cliente_info[3]+{\cf22 ".txt"}));\par
  401             listaNegra.push_back(c);\par
  402             cliente_info.clear();\par
  403         \}{\cf19 else}\{\par
  404             cliente_info.push_back(line);\par
  405         \}\par
  406     \}\par
  407     c.setName(cliente_info[0]);\par
  408     c.setNif(cliente_info[1]);\par
  409     c.setMorada(Morada(cliente_info[2]));\par
  410     c.setBase(Base(cliente_info[3]+{\cf22 ".txt"}));\par
  411     listaNegra.push_back(c);\par
  412     cliente_info.clear();\par
  413     {\cf19 return};\par
  414 \}\par
}
}
{\xe \v removeAdmin\:Base}
{\xe \v Base\:removeAdmin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Base::removeAdmin ({\b Funcionario}  {\i f})}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove um funcion\'E1rio do tipo {\b Administrador} da {\b Base}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   918                                     \{\par
  919     {\cf18 bool} a={\cf17 false};\par
  920     ofstream file;\par
  921     {\cf19 for}({\cf18 int} i=0; i<funcionarios.size();i++)\{\par
  922         {\cf19 if}(funcionarios[i]->getNif()==f.getNif())\{\par
  923             {\cf19 if}(funcionarios[i]->getTipoDeFuncionario()=={\cf22 "Administrador"})\{\par
  924                 cout<<funcionarios[i]->getNome()<<endl;\par
  925                 funcionarios.erase(funcionarios.begin()+i);\par
  926                 a={\cf17 true};\par
  927             \}{\cf19 else}\{\par
  928                 a={\cf17 false};\par
  929             \}\par
  930         \}\par
  931     \}\par
  932     {\cf19 if}(a=={\cf17 true}) \{\par
  933         file.open(funcionarios_filename);\par
  934         {\cf19 for} ({\cf18 int} i = 0; i < funcionarios.size() - 1; i++) \{\par
  935             {\cf20 //cout<<funcionarios.size()<<endl;}\par
  936             {\cf20 //cout<<funcionarios[i]->getNome()<<endl;}\par
  937             {\cf20 //cout<<funcionarios[i]->getTipoDeFuncionario()<<endl;}\par
  938             {\cf20 // cout<<(funcionarios[i]->getTipoDeFuncionario() == "Entregador")<<endl;}\par
  939             {\cf20 // cout<<funcionarios[i]->getTipoDeFuncionario()<<"aaaaaaaa"<<endl;}\par
  940             {\cf20 // cout<<i<<endl;}\par
  941             {\cf19 if} (funcionarios[i]->getTipoDeFuncionario() == {\cf22 "Administrador"}) \{\par
  942                 file << funcionarios[i]->getTipoDeFuncionario() << endl;\par
  943                 file << funcionarios[i]->getNome() << endl;\par
  944                 file << funcionarios[i]->getNif() << endl;\par
  945                 file << to_string(funcionarios[i]->getData().getDia()) + {\cf22 "/"} +\par
  946                         to_string(funcionarios[i]->getData().getMes()) + {\cf22 "/"} +\par
  947                         to_string(funcionarios[i]->getData().getAno()) << endl;\par
  948                 file << to_string(funcionarios[i]->getSalario()) << endl;\par
  949                 file << funcionarios[i]->getFuncao() << endl;\par
  950                 file << {\cf22 ":::::"} << endl;\par
  951             \} {\cf19 else} {\cf19 if}(funcionarios[i]->getTipoDeFuncionario() =={\cf22 "Entregador"})\{\par
  952                 file << funcionarios[i]->getTipoDeFuncionario() << endl;\par
  953                 file << funcionarios[i]->getNome() << endl;\par
  954                 file << funcionarios[i]->getNif() << endl;\par
  955                 file << to_string(funcionarios[i]->getData().getDia()) + {\cf22 "/"} +\par
  956                         to_string(funcionarios[i]->getData().getMes()) + {\cf22 "/"} +\par
  957                         to_string(funcionarios[i]->getData().getAno()) << endl;\par
  958                 file << to_string(funcionarios[i]->getSalario()) << endl;\par
  959                 file << funcionarios[i]->getVeiculoAlocado().getMarca() + {\cf22 ", "} +\par
  960                         funcionarios[i]->getVeiculoAlocado().getTipo() + {\cf22 ", "} +\par
  961                         funcionarios[i]->getVeiculoAlocado().getDataDeAquisicao() << endl;\par
  962                 {\cf19 if} (funcionarios[i]->isDisponivel()) \{\par
  963                     file << {\cf22 "1"} << endl;\par
  964                 \} {\cf19 else} \{\par
  965                     file << {\cf22 "0"} << endl;\par
  966                 \}\par
  967 \par
  968                 file << {\cf22 ":::::"} << endl;\par
  969             \}\par
  970         \}\par
  971         {\cf19 if} (funcionarios[funcionarios.size() - 1]->getTipoDeFuncionario() == {\cf22 "Administrador"}) \{\par
  972             file << funcionarios[funcionarios.size() - 1]->getTipoDeFuncionario() << endl;\par
  973             file << funcionarios[funcionarios.size() - 1]->getNome() << endl;\par
  974             file << funcionarios[funcionarios.size() - 1]->getNif() << endl;\par
  975             file << to_string(funcionarios[funcionarios.size() - 1]->getData().getDia()) + {\cf22 "/"} +\par
  976                     to_string(funcionarios[funcionarios.size() - 1]->getData().getMes()) + {\cf22 "/"} +\par
  977                     to_string(funcionarios[funcionarios.size() - 1]->getData().getAno()) << endl;\par
  978             file << to_string(funcionarios[funcionarios.size() - 1]->getSalario()) << endl;\par
  979             file << funcionarios[funcionarios.size() - 1]->getFuncao() << endl;\par
  980         \} {\cf19 else} {\cf19 if}(funcionarios[funcionarios.size() - 1]->getTipoDeFuncionario() =={\cf22 "Entregador"}) \{\par
  981             file << funcionarios[funcionarios.size() - 1]->getTipoDeFuncionario()<< endl;\par
  982             file << funcionarios[funcionarios.size() - 1]->getNome() << endl;\par
  983             file << funcionarios[funcionarios.size() - 1]->getNif() << endl;\par
  984             file << to_string(funcionarios[funcionarios.size() - 1]->getData().getDia()) + {\cf22 "/"} +\par
  985                     to_string(funcionarios[funcionarios.size() - 1]->getData().getMes()) + {\cf22 "/"} +\par
  986                     to_string(funcionarios[funcionarios.size() - 1]->getData().getAno()) << endl;\par
  987             file << to_string(funcionarios[funcionarios.size() - 1]->getSalario()) << endl;\par
  988             file << funcionarios[funcionarios.size() - 1]->getVeiculoAlocado().getMarca() + {\cf22 ", "} +\par
  989                     funcionarios[funcionarios.size() - 1]->getVeiculoAlocado().getTipo() + {\cf22 ", "} +\par
  990                     funcionarios[funcionarios.size() - 1]->getVeiculoAlocado().getDataDeAquisicao() << endl;\par
  991             {\cf19 if} (funcionarios[funcionarios.size() - 1]->isDisponivel()) \{\par
  992                 file << {\cf22 "1"} << endl;\par
  993             \} {\cf19 else} \{\par
  994                 file << {\cf22 "0"} << endl;\par
  995             \}\par
  996 \par
  997         \}\par
  998         file.close();\par
  999         cout<<{\cf22 "O funcionario "}<<f.getNome()<<{\cf22 " foi removido com sucesso!"}<<endl;\par
 1000     \}{\cf19 else}\{\par
 1001         cout<<{\cf22 "O nif que selecionou nao pertence a nunhum administrador!"}<<endl;\par
 1002     \}\par
 1003 \}\par
}
}
{\xe \v removeCliente\:Base}
{\xe \v Base\:removeCliente}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Base::removeCliente ({\b Cliente}  {\i c})}}
\par
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove um {\b Cliente} da {\b Base}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   587                                  \{\par
  588     Base b=c.getBase();\par
  589     ofstream file;\par
  590     clientes_readfile();\par
  591     {\cf19 for}({\cf18 int} i=0; i<clientes.size();i++)\{\par
  592         {\cf19 if}(clientes[i].getNif()==c.getNif())\{\par
  593             clientes.erase(clientes.begin()+i);\par
  594         \}\par
  595     \}\par
  596     file.open(b.clientes_filename);\par
  597     {\cf19 for} ({\cf18 int} i = 0; i < clientes.size()-1; i++) \{\par
  598 \par
  599         file << clientes[i].getName() << endl;\par
  600 \par
  601         file << clientes[i].getNif() << endl;\par
  602 \par
  603         file << clientes[i].getMorada().getRua() + {\cf22 ", "} + clientes[i].getMorada().getLocalidade() + {\cf22 ", "} +clientes[i].getMorada().getNumero() << endl;\par
  604 \par
  605         file << conselho << endl;\par
  606 \par
  607         file << {\cf22 ":::::"} << endl;\par
  608     \}\par
  609     file << clientes[clientes.size()-1].getName() << endl;\par
  610 \par
  611     file << clientes[clientes.size()-1].getNif() << endl;\par
  612 \par
  613     file << clientes[clientes.size()-1].getMorada().getRua() + {\cf22 ", "} + clientes[clientes.size()-1].getMorada().getLocalidade() + {\cf22 ", "} +clientes[clientes.size()-1].getMorada().getNumero() << endl;\par
  614 \par
  615     file << conselho << endl;\par
  616 \par
  617     file.close();\par
  618 \}\par
}
}
{\xe \v removeEntreg\:Base}
{\xe \v Base\:removeEntreg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Base::removeEntreg ({\b Funcionario}  {\i f})}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove um funcion\'E1rio do tipo {\b Entregador} da {\b Base}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1004                                      \{\par
 1005     {\cf18 bool} a={\cf17 false};\par
 1006     ofstream file;\par
 1007     {\cf19 for}({\cf18 int} i=0; i<funcionarios.size();i++)\{\par
 1008         {\cf19 if}(funcionarios[i]->getNif()==f.getNif())\{\par
 1009             {\cf19 if}(funcionarios[i]->getTipoDeFuncionario()=={\cf22 "Entregador"})\{\par
 1010                 cout<<funcionarios[i]->getNome()<<endl;\par
 1011                 funcionarios.erase(funcionarios.begin()+i);\par
 1012 \par
 1013                 a={\cf17 true};\par
 1014             \}{\cf19 else}\{\par
 1015                 a={\cf17 false};\par
 1016             \}\par
 1017         \}\par
 1018     \}\par
 1019     {\cf19 if}(a=={\cf17 true}) \{\par
 1020         file.open(funcionarios_filename);\par
 1021         {\cf19 for} ({\cf18 int} i = 0; i < funcionarios.size() - 1; i++) \{\par
 1022             cout<<funcionarios.size()<<endl;\par
 1023             {\cf20 //cout<<funcionarios[i]->getNome()<<endl;}\par
 1024             {\cf20 //cout<<funcionarios[i]->getTipoDeFuncionario()<<endl;}\par
 1025            {\cf20 // cout<<(funcionarios[i]->getTipoDeFuncionario() == "Entregador")<<endl;}\par
 1026             {\cf20 // cout<<funcionarios[i]->getTipoDeFuncionario()<<"aaaaaaaa"<<endl;}\par
 1027             {\cf20 // cout<<i<<endl;}\par
 1028             {\cf19 if} (funcionarios[i]->getTipoDeFuncionario() == {\cf22 "Administrador"}) \{\par
 1029                 file << funcionarios[i]->getTipoDeFuncionario() << endl;\par
 1030                 file << funcionarios[i]->getNome() << endl;\par
 1031                 file << funcionarios[i]->getNif() << endl;\par
 1032                 file << to_string(funcionarios[i]->getData().getDia()) + {\cf22 "/"} +\par
 1033                         to_string(funcionarios[i]->getData().getMes()) + {\cf22 "/"} +\par
 1034                         to_string(funcionarios[i]->getData().getAno()) << endl;\par
 1035                 file << to_string(funcionarios[i]->getSalario()) << endl;\par
 1036                 file << funcionarios[i]->getFuncao() << endl;\par
 1037                 file << {\cf22 ":::::"} << endl;\par
 1038             \} {\cf19 else} {\cf19 if}(funcionarios[i]->getTipoDeFuncionario() =={\cf22 "Entregador"})\{\par
 1039                 file << funcionarios[i]->getTipoDeFuncionario() << endl;\par
 1040                 file << funcionarios[i]->getNome() << endl;\par
 1041                 file << funcionarios[i]->getNif() << endl;\par
 1042                 file << to_string(funcionarios[i]->getData().getDia()) + {\cf22 "/"} +\par
 1043                         to_string(funcionarios[i]->getData().getMes()) + {\cf22 "/"} +\par
 1044                         to_string(funcionarios[i]->getData().getAno()) << endl;\par
 1045                 file << to_string(funcionarios[i]->getSalario()) << endl;\par
 1046                 file << funcionarios[i]->getVeiculoAlocado().getMarca() + {\cf22 ", "} +\par
 1047                         funcionarios[i]->getVeiculoAlocado().getTipo() + {\cf22 ", "} +\par
 1048                         funcionarios[i]->getVeiculoAlocado().getDataDeAquisicao() << endl;\par
 1049                 {\cf19 if} (funcionarios[i]->isDisponivel()) \{\par
 1050                     file << {\cf22 "1"} << endl;\par
 1051                 \} {\cf19 else} \{\par
 1052                     file << {\cf22 "0"} << endl;\par
 1053                 \}\par
 1054 \par
 1055                 file << {\cf22 ":::::"} << endl;\par
 1056             \}\par
 1057         \}\par
 1058         {\cf19 if} (funcionarios[funcionarios.size() - 1]->getTipoDeFuncionario() == {\cf22 "Administrador"}) \{\par
 1059             file << funcionarios[funcionarios.size() - 1]->getTipoDeFuncionario() << endl;\par
 1060             file << funcionarios[funcionarios.size() - 1]->getNome() << endl;\par
 1061             file << funcionarios[funcionarios.size() - 1]->getNif() << endl;\par
 1062             file << to_string(funcionarios[funcionarios.size() - 1]->getData().getDia()) + {\cf22 "/"} +\par
 1063                     to_string(funcionarios[funcionarios.size() - 1]->getData().getMes()) + {\cf22 "/"} +\par
 1064                     to_string(funcionarios[funcionarios.size() - 1]->getData().getAno()) << endl;\par
 1065             file << to_string(funcionarios[funcionarios.size() - 1]->getSalario()) << endl;\par
 1066             file << funcionarios[funcionarios.size() - 1]->getFuncao() << endl;\par
 1067         \} {\cf19 else} {\cf19 if}(funcionarios[funcionarios.size() - 1]->getTipoDeFuncionario() =={\cf22 "Entregador"}) \{\par
 1068             file << funcionarios[funcionarios.size() - 1]->getTipoDeFuncionario()<< endl;\par
 1069             file << funcionarios[funcionarios.size() - 1]->getNome() << endl;\par
 1070             file << funcionarios[funcionarios.size() - 1]->getNif() << endl;\par
 1071             file << to_string(funcionarios[funcionarios.size() - 1]->getData().getDia()) + {\cf22 "/"} +\par
 1072                     to_string(funcionarios[funcionarios.size() - 1]->getData().getMes()) + {\cf22 "/"} +\par
 1073                     to_string(funcionarios[funcionarios.size() - 1]->getData().getAno()) << endl;\par
 1074             file << to_string(funcionarios[funcionarios.size() - 1]->getSalario()) << endl;\par
 1075             file << funcionarios[funcionarios.size() - 1]->getVeiculoAlocado().getMarca() + {\cf22 ", "} +\par
 1076                     funcionarios[funcionarios.size() - 1]->getVeiculoAlocado().getTipo() + {\cf22 ", "} +\par
 1077                     funcionarios[funcionarios.size() - 1]->getVeiculoAlocado().getDataDeAquisicao() << endl;\par
 1078             {\cf19 if} (funcionarios[funcionarios.size() - 1]->isDisponivel()) \{\par
 1079                 file << {\cf22 "1"} << endl;\par
 1080             \} {\cf19 else} \{\par
 1081                 file << {\cf22 "0"} << endl;\par
 1082             \}\par
 1083 \par
 1084         \}\par
 1085         file.close();\par
 1086         cout<<{\cf22 "O funcionario "}<<f.getNome()<<{\cf22 " foi removido com sucesso!"}<<endl;\par
 1087     \}{\cf19 else}\{\par
 1088         cout<<{\cf22 "O nif que selecionou nao pertence a nunhum entergador!"}<<endl;\par
 1089     \}\par
 1090 \}\par
}
}
{\xe \v removeFuncionario\:Base}
{\xe \v Base\:removeFuncionario}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Base::removeFuncionario ({\b Funcionario}  {\i f})}}
\par
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove um Funcion\'E1rio da {\b Base}. }}\par
}
{\xe \v removeRestaurante\:Base}
{\xe \v Base\:removeRestaurante}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Base::removeRestaurante ({\b Restaurante}  {\i r})}}
\par
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove um {\b Restaurante} da {\b Base}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   749                                           \{\par
  750     ofstream file;\par
  751     {\cf19 for}({\cf18 int} i=0;i<restaurantes.size();i++)\{\par
  752         {\cf19 if}(restaurantes[i].getNome()==r.getNome())\{\par
  753             restaurantes.erase(restaurantes.begin()+i);\par
  754         \}\par
  755     \}\par
  756     file.open(restaurantes_filename);\par
  757     {\cf19 for} ({\cf18 int} i = 0; i < restaurantes.size()-1; i++) \{\par
  758         file << restaurantes[i].getNome() << endl;\par
  759         file << restaurantes[i].getMorada().getRua() + {\cf22 ", "} + restaurantes[i].getMorada().getLocalidade() + {\cf22 ", "} +restaurantes[i].getMorada().getNumero() << endl;\par
  760         file << restaurantes[i].getTiposDeCulinaria()[0] << endl;\par
  761         file<<{\cf22 "pratos.txt"}<<endl;\par
  762         file << {\cf22 ":::::"} << endl;\par
  763     \}\par
  764     file << restaurantes[restaurantes.size()-1].getNome() << endl;\par
  765     file << restaurantes[restaurantes.size()-1].getMorada().getRua() + {\cf22 ", "} +restaurantes[restaurantes.size()-1].getMorada().getLocalidade() + {\cf22 ", "} +restaurantes[restaurantes.size()-1].getMorada().getNumero() << endl;\par
  766     file << restaurantes[restaurantes.size()-1].getTiposDeCulinaria()[0] << endl;\par
  767     file<<{\cf22 "pratos.txt"}<<endl;\par
  768     file.close();\par
  769 \}\par
}
}
{\xe \v restaurantes_readfile\:Base}
{\xe \v Base\:restaurantes_readfile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Base::restaurantes_readfile ()}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
L\'EA o ficheiro restaurante<Base>.txt, que cont\'E9m a informacao ordenada de um conjunto de restaurantes (Classe {\b Restaurante}). }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   298                                 \{\par
  299     Restaurante r;\par
  300     vector<string> restaurante_info;\par
  301     {\cf18 string} culinaria, pratos;\par
  302     vector<string> c,p;\par
  303     {\cf18 string} temp={\cf22 ""};\par
  304     ifstream infile;\par
  305     {\cf18 string} line;\par
  306     infile.open(restaurantes_filename);\par
  307     {\cf19 while}(getline(infile,line))\{\par
  308         {\cf19 if}(line=={\cf22 ":::::"})\{\par
  309             r.setNome(restaurante_info[0]);\par
  310             r.setMorada(Morada(restaurante_info[1]));\par
  311             r.setTiposDeCulinaria(tiposculinaria(restaurante_info[2]));\par
  312             r.pratos_readfile();\par
  313             restaurantes.push_back(r);\par
  314             restaurante_info.clear();\par
  315         \}{\cf19 else}\{\par
  316             restaurante_info.push_back(line);\par
  317         \}\par
  318     \}\par
  319     r.setNome(restaurante_info[0]);\par
  320     r.setMorada(Morada(restaurante_info[1]));\par
  321     r.setTiposDeCulinaria(tiposculinaria(restaurante_info[2]));\par
  322     r.pratos_readfile();\par
  323     restaurantes.push_back(r);\par
  324     restaurante_info.clear();\par
  325     {\cf19 return};\par
  326 \}\par
}
}
{\xe \v setClientes\:Base}
{\xe \v Base\:setClientes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Base::setClientes (vector< {\b Cliente} > &  {\i clientes})}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   246                                           \{\par
  247   {\cf19 for}({\cf18 int} i=0; i<cs.size(); i++)\{\par
  248       clientes.push_back(cs[i]);\par
  249   \}\par
  250 \}\par
}
}
{\xe \v setConselho\:Base}
{\xe \v Base\:setConselho}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Base::setConselho (const string &  {\i conselho})}}
\par
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   234                                              \{\par
  235     Base::conselho = conselho;\par
  236 \}\par
}
}
{\xe \v setCoordenadaGps\:Base}
{\xe \v Base\:setCoordenadaGps}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Base::setCoordenadaGps (const string &  {\i coordenadaGps})}}
\par
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   238                                                        \{\par
  239     coordenadaGPS = coordenadaGps;\par
  240 \}\par
}
}
{\xe \v setFuncionarios\:Base}
{\xe \v Base\:setFuncionarios}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Base::setFuncionarios (const vector< {\b Funcionario} * > &  {\i funcionarios})}}
\par
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   256                                                                    \{\par
  257     Base::funcionarios = funcionarios;\par
  258 \}\par
}
}
{\xe \v setGerente\:Base}
{\xe \v Base\:setGerente}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Base::setGerente (const string &  {\i gerente})}}
\par
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   242                                            \{\par
  243     Base::gerente = gerente;\par
  244 \}\par
}
}
{\xe \v setMorada\:Base}
{\xe \v Base\:setMorada}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Base::setMorada (const {\b Morada} &  {\i morada})}}
\par
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   230                                          \{\par
  231     Base::morada = morada;\par
  232 \}\par
}
}
{\xe \v setRestaurantes\:Base}
{\xe \v Base\:setRestaurantes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Base::setRestaurantes (vector< {\b Restaurante} > &  {\i restaurantes})}}
\par
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   252                                                             \{\par
  253     Base::restaurantes = restaurantes;\par
  254 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos dados membro\par
\pard\plain 
{\xe \v clientes\:Base}
{\xe \v Base\:clientes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
vector<{\b Cliente}> Base::clientes{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O conjunto dos clientes da {\b Base}. }}\par
}
{\xe \v clientes_filename\:Base}
{\xe \v Base\:clientes_filename}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Base::clientes_filename{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O nome do ficheiro que contem todos os clientes da {\b Base}. }}\par
}
{\xe \v conselho\:Base}
{\xe \v Base\:conselho}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Base::conselho{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O conselho da {\b Base}. }}\par
}
{\xe \v coordenadaGPS\:Base}
{\xe \v Base\:coordenadaGPS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Base::coordenadaGPS{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
As coordenadas GPS da {\b Base}. }}\par
}
{\xe \v funcionarios\:Base}
{\xe \v Base\:funcionarios}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
vector<{\b Funcionario}*> Base::funcionarios{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O conjunto dos funcion\'E1rios da {\b Base}. }}\par
}
{\xe \v funcionarios_filename\:Base}
{\xe \v Base\:funcionarios_filename}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Base::funcionarios_filename{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O nome do ficheiro que contem todos os funcion\'E1rios da {\b Base}. }}\par
}
{\xe \v gerente\:Base}
{\xe \v Base\:gerente}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Base::gerente{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O gerente da {\b Base}. }}\par
}
{\xe \v listaNegra\:Base}
{\xe \v Base\:listaNegra}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
vector<{\b Cliente}> Base::listaNegra{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADF}
{\bkmkend AAAAAAAADF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O conjunto dos clientes pertencentes \'E0 Lista Negra da {\b Empresa}. }}\par
}
{\xe \v morada\:Base}
{\xe \v Base\:morada}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Morada} Base::morada{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADG}
{\bkmkend AAAAAAAADG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A morada da {\b Base}. }}\par
}
{\xe \v restaurantes\:Base}
{\xe \v Base\:restaurantes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
vector<{\b Restaurante}> Base::restaurantes{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O conjunto dos restaurantes da {\b Base}. }}\par
}
{\xe \v restaurantes_filename\:Base}
{\xe \v Base\:restaurantes_filename}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Base::restaurantes_filename{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADI}
{\bkmkend AAAAAAAADI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O nome do ficheiro que contem todos os restaurantes da {\b Base}. }}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para esta classe foi gerada a partir dos seguintes ficheiros:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UgnEatsFoodDeliveryFinal3/{\b empresa.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UgnEatsFoodDeliveryFinal3/{\b empresa.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia \'E0 classe Cliente\par \pard\plain 
{\tc\tcl2 \v Cliente}
{\xe \v Cliente}
{\bkmkstart AAAAAAAADJ}
{\bkmkend AAAAAAAADJ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class {\b Cliente} representa um cliente atraves da sua {\b Morada}, nome, nif e {\b Base} pertencente. }}\par
{
{\f2 #include <cliente.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Cliente} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Cliente}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~Cliente} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destrutor da classe {\b Cliente}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b Morada} & {\b getMorada} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setMorada} (const {\b Morada} &{\b morada})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const string & {\b getName} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setName} (const string &{\b name})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b getNif} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setNif} (string {\b nif})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Base} & {\b getBase} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setBase} (const {\b Base} &{\b base})\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos Privados\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Morada} {\b morada}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A morada do {\b Cliente}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b name}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O nome do {\b Cliente}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b nif}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O nif do {\b Cliente}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Base} {\b base}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A base a que o {\b Cliente} pertence. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class {\b Cliente} representa um cliente atraves da sua {\b Morada}, nome, nif e {\b Base} pertencente. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos Construtores & Destrutor\par
\pard\plain 
{\xe \v Cliente\:Cliente}
{\xe \v Cliente\:Cliente}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Cliente::Cliente ()}}
\par
{\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Cliente}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     5 \{\}\par
}
}
{\xe \v ~Cliente\:Cliente}
{\xe \v Cliente\:~Cliente}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Cliente::~Cliente (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAADL}
{\bkmkend AAAAAAAADL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destrutor da classe {\b Cliente}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     7                   \{\par
    8 \par
    9 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos m\'E9todos\par
\pard\plain 
{\xe \v getBase\:Cliente}
{\xe \v Cliente\:getBase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Base} & Cliente::getBase ()}}
\par
{\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    35                        \{\par
   36     {\cf19 return} base;\par
   37 \}\par
}
}
{\xe \v getMorada\:Cliente}
{\xe \v Cliente\:getMorada}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b Morada} & Cliente::getMorada () const}}
\par
{\bkmkstart AAAAAAAADN}
{\bkmkend AAAAAAAADN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    11                                        \{\par
   12     {\cf19 return} morada;\par
   13 \}\par
}
}
{\xe \v getName\:Cliente}
{\xe \v Cliente\:getName}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string & Cliente::getName () const}}
\par
{\bkmkstart AAAAAAAADO}
{\bkmkend AAAAAAAADO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    19                                      \{\par
   20     {\cf19 return} name;\par
   21 \}\par
}
}
{\xe \v getNif\:Cliente}
{\xe \v Cliente\:getNif}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Cliente::getNif () const}}
\par
{\bkmkstart AAAAAAAADP}
{\bkmkend AAAAAAAADP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    27                              \{\par
   28     {\cf19 return} nif;\par
   29 \}\par
}
}
{\xe \v setBase\:Cliente}
{\xe \v Cliente\:setBase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Cliente::setBase (const {\b Base} &  {\i base})}}
\par
{\bkmkstart AAAAAAAADQ}
{\bkmkend AAAAAAAADQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    39                                       \{\par
   40     Cliente::base = base;\par
   41 \}\par
}
}
{\xe \v setMorada\:Cliente}
{\xe \v Cliente\:setMorada}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Cliente::setMorada (const {\b Morada} &  {\i morada})}}
\par
{\bkmkstart AAAAAAAADR}
{\bkmkend AAAAAAAADR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    15                                             \{\par
   16     Cliente::morada = morada;\par
   17 \}\par
}
}
{\xe \v setName\:Cliente}
{\xe \v Cliente\:setName}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Cliente::setName (const string &  {\i name})}}
\par
{\bkmkstart AAAAAAAADS}
{\bkmkend AAAAAAAADS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    23                                         \{\par
   24     Cliente::name = name;\par
   25 \}\par
}
}
{\xe \v setNif\:Cliente}
{\xe \v Cliente\:setNif}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Cliente::setNif (string  {\i nif})}}
\par
{\bkmkstart AAAAAAAADT}
{\bkmkend AAAAAAAADT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    31                                \{\par
   32     Cliente::nif = nif;\par
   33 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos dados membro\par
\pard\plain 
{\xe \v base\:Cliente}
{\xe \v Cliente\:base}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Base} Cliente::base{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADU}
{\bkmkend AAAAAAAADU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A base a que o {\b Cliente} pertence. }}\par
}
{\xe \v morada\:Cliente}
{\xe \v Cliente\:morada}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Morada} Cliente::morada{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADV}
{\bkmkend AAAAAAAADV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A morada do {\b Cliente}. }}\par
}
{\xe \v name\:Cliente}
{\xe \v Cliente\:name}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Cliente::name{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADW}
{\bkmkend AAAAAAAADW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O nome do {\b Cliente}. }}\par
}
{\xe \v nif\:Cliente}
{\xe \v Cliente\:nif}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Cliente::nif{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADX}
{\bkmkend AAAAAAAADX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O nif do {\b Cliente}. }}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para esta classe foi gerada a partir dos seguintes ficheiros:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UgnEatsFoodDeliveryFinal3/{\b cliente.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UgnEatsFoodDeliveryFinal3/{\b cliente.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia \'E0 classe ClienteNaListaNegra\par \pard\plain 
{\tc\tcl2 \v ClienteNaListaNegra}
{\xe \v ClienteNaListaNegra}
{\bkmkstart AAAAAAAADY}
{\bkmkend AAAAAAAADY}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b ClienteNaListaNegra} representa uma exce\'E7\'E3o que \'E9 lan\'E7ada quando um cliente pertence \'E0 Lista Negra da empresa (listanegra.txt). }}\par
{
{\f2 #include <empresa.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ClienteNaListaNegra} ({\b Cliente} &c)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da Classe Lista Negra. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Cliente} * {\b cliente}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O {\b Cliente} pertencente \'E0 Lista Negra. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Amigos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
ostream & {\b operator<<} (ostream &out, const {\b ClienteNaListaNegra} &c)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Operador << para mensagem de erro que apanha o objeto lan\'E7ado pela exce\'E7\'E3o. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b ClienteNaListaNegra} representa uma exce\'E7\'E3o que \'E9 lan\'E7ada quando um cliente pertence \'E0 Lista Negra da empresa (listanegra.txt). \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos Construtores & Destrutor\par
\pard\plain 
{\xe \v ClienteNaListaNegra\:ClienteNaListaNegra}
{\xe \v ClienteNaListaNegra\:ClienteNaListaNegra}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
ClienteNaListaNegra::ClienteNaListaNegra ({\b Cliente} &  {\i c}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAADZ}
{\bkmkend AAAAAAAADZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da Classe Lista Negra. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    30 \{ cliente=&c;\}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das classes amigas e fun\'E7\'F5es relacionadas\par
\pard\plain 
{\xe \v operator<<\:ClienteNaListaNegra}
{\xe \v ClienteNaListaNegra\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
ostream& operator<< (ostream &  {\i out}, const {\b ClienteNaListaNegra} &  {\i c}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAEA}
{\bkmkend AAAAAAAAEA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Operador << para mensagem de erro que apanha o objeto lan\'E7ado pela exce\'E7\'E3o. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    32                                                                            \{\par
   33         out << {\cf22 "Devido a pagamentos em atraso nao se pode registar."}<<endl;\par
   34         {\cf19 return} out;\par
   35     \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos dados membro\par
\pard\plain 
{\xe \v cliente\:ClienteNaListaNegra}
{\xe \v ClienteNaListaNegra\:cliente}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Cliente}* ClienteNaListaNegra::cliente}}
\par
{\bkmkstart AAAAAAAAEB}
{\bkmkend AAAAAAAAEB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O {\b Cliente} pertencente \'E0 Lista Negra. }}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para esta classe foi gerada a partir do seguinte ficheiro:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UgnEatsFoodDeliveryFinal3/{\b empresa.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia \'E0 classe Data\par \pard\plain 
{\tc\tcl2 \v Data}
{\xe \v Data}
{\bkmkstart AAAAAAAAEC}
{\bkmkend AAAAAAAAEC}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class {\b Data} representa uma data atraves do dia, mes e ano. }}\par
{
{\f2 #include <auxiliares.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Data} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da Classe {\b Data}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Data} (string d)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constroi uma inst\'E2ncia de {\b Data} recebendo uma string estruturada com o seu conteudo. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~Data} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destrutor da Classe {\b Data}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getDia} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setDia} (int {\b dia})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getMes} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setMes} (int {\b mes})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getAno} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setAno} (int {\b ano})\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos Privados\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b dia}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O dia da {\b Data}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b mes}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O m\'EAs da {\b Data}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b ano}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O ano da {\b Data}. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class {\b Data} representa uma data atraves do dia, mes e ano. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos Construtores & Destrutor\par
\pard\plain 
{\xe \v Data\:Data}
{\xe \v Data\:Data}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Data::Data ()}}
\par
{\bkmkstart AAAAAAAAED}
{\bkmkend AAAAAAAAED}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da Classe {\b Data}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   133 \{\}\par
}
}
{\xe \v Data\:Data}
{\xe \v Data\:Data}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Data::Data (string  {\i d})}}
\par
{\bkmkstart AAAAAAAAEE}
{\bkmkend AAAAAAAAEE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constroi uma inst\'E2ncia de {\b Data} recebendo uma string estruturada com o seu conteudo. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i d} \cell }{A string estruturada com o conteudo da morada. \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   134                    \{\par
  135     {\cf18 string} temp = {\cf22 ""};\par
  136     vector<int> data_info;\par
  137     {\cf19 for} ({\cf18 size_t} i = 0; i < d.length(); i++)\par
  138     \{\par
  139         {\cf19 if} (d[i] == {\cf23 '/'})\par
  140         \{\par
  141             data_info.push_back(stoi(temp));\par
  142             temp = {\cf22 ""};\par
  143         \}\par
  144         {\cf19 else}\par
  145             temp += d[i];\par
  146     \}\par
  147 \par
  148     data_info.push_back(stoi(temp));\par
  149     this->dia = data_info[0];\par
  150     this->mes = data_info[1];\par
  151     this->ano = data_info[2];\par
  152 \}\par
}
}
{\xe \v ~Data\:Data}
{\xe \v Data\:~Data}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Data::~Data (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAEF}
{\bkmkend AAAAAAAAEF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destrutor da Classe {\b Data}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   154             \{\par
  155 \par
  156 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos m\'E9todos\par
\pard\plain 
{\xe \v getAno\:Data}
{\xe \v Data\:getAno}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Data::getAno () const}}
\par
{\bkmkstart AAAAAAAAEG}
{\bkmkend AAAAAAAAEG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   174                        \{\par
  175     {\cf19 return} ano;\par
  176 \}\par
}
}
{\xe \v getDia\:Data}
{\xe \v Data\:getDia}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Data::getDia () const}}
\par
{\bkmkstart AAAAAAAAEH}
{\bkmkend AAAAAAAAEH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   158                        \{\par
  159     {\cf19 return} dia;\par
  160 \}\par
}
}
{\xe \v getMes\:Data}
{\xe \v Data\:getMes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Data::getMes () const}}
\par
{\bkmkstart AAAAAAAAEI}
{\bkmkend AAAAAAAAEI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   166                        \{\par
  167     {\cf19 return} mes;\par
  168 \}\par
}
}
{\xe \v setAno\:Data}
{\xe \v Data\:setAno}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Data::setAno (int  {\i ano})}}
\par
{\bkmkstart AAAAAAAAEJ}
{\bkmkend AAAAAAAAEJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   178                          \{\par
  179     Data::ano = ano;\par
  180 \}\par
}
}
{\xe \v setDia\:Data}
{\xe \v Data\:setDia}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Data::setDia (int  {\i dia})}}
\par
{\bkmkstart AAAAAAAAEK}
{\bkmkend AAAAAAAAEK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   162                          \{\par
  163     Data::dia = dia;\par
  164 \}\par
}
}
{\xe \v setMes\:Data}
{\xe \v Data\:setMes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Data::setMes (int  {\i mes})}}
\par
{\bkmkstart AAAAAAAAEL}
{\bkmkend AAAAAAAAEL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   170                          \{\par
  171     Data::mes = mes;\par
  172 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos dados membro\par
\pard\plain 
{\xe \v ano\:Data}
{\xe \v Data\:ano}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Data::ano{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAEM}
{\bkmkend AAAAAAAAEM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O ano da {\b Data}. }}\par
}
{\xe \v dia\:Data}
{\xe \v Data\:dia}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Data::dia{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O dia da {\b Data}. }}\par
}
{\xe \v mes\:Data}
{\xe \v Data\:mes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Data::mes{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAEO}
{\bkmkend AAAAAAAAEO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O m\'EAs da {\b Data}. }}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para esta classe foi gerada a partir dos seguintes ficheiros:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UgnEatsFoodDeliveryFinal3/{\b auxiliares.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UgnEatsFoodDeliveryFinal3/{\b auxiliares.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia \'E0 classe Empresa\par \pard\plain 
{\tc\tcl2 \v Empresa}
{\xe \v Empresa}
{\bkmkstart AAAAAAAAEP}
{\bkmkend AAAAAAAAEP}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b Empresa} representa a {\b Empresa} atrav\'E9s do conjunto de Bases (classe {\b Base}) que tem e um conjunto de encomendas feitas \'E0 empresa desde sempre. }}\par
{
{\f2 #include <empresa.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Empresa} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Empresa}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~Empresa} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Donstrutor da classe {\b Empresa}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const vector< {\b Base} > & {\b getBases} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setBases} (const vector< {\b Base} > &{\b bases})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
vector< {\b Encomenda} > {\b getEncomendas} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setEncomendas} (vector< {\b Encomenda} >)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b encomendas_readfile} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
L\'EA o ficheiro encomendas.txt, que cont\'E9m a informa\'E7\'E3o ordenada de um conjunto de encomendas (Classe {\b Encomenda}). }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos Privados\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
vector< {\b Base} > {\b bases}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O conjunto de bases (Classe {\b Base}) da {\b Empresa}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
vector< {\b Encomenda} > {\b encomendas}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O conjuntor de encomendas (Classe {\b Encomenda}) da {\b Empresa}. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b Empresa} representa a {\b Empresa} atrav\'E9s do conjunto de Bases (classe {\b Base}) que tem e um conjunto de encomendas feitas \'E0 empresa desde sempre. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos Construtores & Destrutor\par
\pard\plain 
{\xe \v Empresa\:Empresa}
{\xe \v Empresa\:Empresa}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Empresa::Empresa ()}}
\par
{\bkmkstart AAAAAAAAEQ}
{\bkmkend AAAAAAAAEQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Empresa}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1095 \{\}\par
}
}
{\xe \v ~Empresa\:Empresa}
{\xe \v Empresa\:~Empresa}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Empresa::~Empresa (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Donstrutor da classe {\b Empresa}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1097                   \{\par
 1098 \par
 1099 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos m\'E9todos\par
\pard\plain 
{\xe \v encomendas_readfile\:Empresa}
{\xe \v Empresa\:encomendas_readfile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Empresa::encomendas_readfile ()}}
\par
{\bkmkstart AAAAAAAAES}
{\bkmkend AAAAAAAAES}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
L\'EA o ficheiro encomendas.txt, que cont\'E9m a informa\'E7\'E3o ordenada de um conjunto de encomendas (Classe {\b Encomenda}). }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1114                                  \{\par
 1115     Encomenda e;\par
 1116     vector<string> encomenda_info;\par
 1117     ifstream infile;\par
 1118     {\cf18 string} line;\par
 1119     infile.open({\cf22 "entregas.txt"});\par
 1120     {\cf19 while}(getline(infile,line))\{\par
 1121         {\cf19 if}(line=={\cf22 ":::::"})\{\par
 1122             e.setRestauranteNome(encomenda_info[0]);\par
 1123             e.setData(Data(encomenda_info[1]));\par
 1124             e.setEntregadorNome(encomenda_info[2]);\par
 1125             e.setHora(encomenda_info[3]);\par
 1126             e.setPratosNome(encomenda_info[4]);\par
 1127             e.setEntrega(stoi(encomenda_info[5]));\par
 1128             e.setSucesso(stoi(encomenda_info[6]));\par
 1129             e.setClienteNome(encomenda_info[7]);\par
 1130             e.setPreco(stod(encomenda_info[8]));\par
 1131             encomendas.push_back(e);\par
 1132             encomenda_info.clear();\par
 1133         \}{\cf19 else}\{\par
 1134             encomenda_info.push_back(line);\par
 1135         \}\par
 1136     \}\par
 1137     e.setRestauranteNome(encomenda_info[0]);\par
 1138     e.setData(Data(encomenda_info[1]));\par
 1139     e.setEntregadorNome(encomenda_info[2]);\par
 1140     e.setHora(encomenda_info[3]);\par
 1141     e.setPratosNome(encomenda_info[4]);\par
 1142     e.setEntrega(stoi(encomenda_info[5]));\par
 1143     e.setSucesso(stoi(encomenda_info[6]));\par
 1144     e.setClienteNome(encomenda_info[7]);\par
 1145     e.setPreco(stod(encomenda_info[8]));\par
 1146     encomendas.push_back(e);\par
 1147     encomenda_info.clear();\par
 1148     {\cf19 return};\par
 1149 \}\par
}
}
{\xe \v getBases\:Empresa}
{\xe \v Empresa\:getBases}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const vector< {\b Base} > & Empresa::getBases () const}}
\par
{\bkmkstart AAAAAAAAET}
{\bkmkend AAAAAAAAET}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1101                                             \{\par
 1102     {\cf19 return} bases;\par
 1103 \}\par
}
}
{\xe \v getEncomendas\:Empresa}
{\xe \v Empresa\:getEncomendas}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
vector< {\b Encomenda} > Empresa::getEncomendas ()}}
\par
{\bkmkstart AAAAAAAAEU}
{\bkmkend AAAAAAAAEU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1108                                          \{\par
 1109     {\cf19 return} encomendas;\par
 1110 \}\par
}
}
{\xe \v setBases\:Empresa}
{\xe \v Empresa\:setBases}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Empresa::setBases (const vector< {\b Base} > &  {\i bases})}}
\par
{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1105                                                 \{\par
 1106     Empresa::bases = bases;\par
 1107 \}\par
}
}
{\xe \v setEncomendas\:Empresa}
{\xe \v Empresa\:setEncomendas}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Empresa::setEncomendas (vector< {\b Encomenda} >  {\i e})}}
\par
{\bkmkstart AAAAAAAAEW}
{\bkmkend AAAAAAAAEW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1111                                               \{\par
 1112     encomendas=e;\par
 1113 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos dados membro\par
\pard\plain 
{\xe \v bases\:Empresa}
{\xe \v Empresa\:bases}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
vector<{\b Base}> Empresa::bases{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAEX}
{\bkmkend AAAAAAAAEX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O conjunto de bases (Classe {\b Base}) da {\b Empresa}. }}\par
}
{\xe \v encomendas\:Empresa}
{\xe \v Empresa\:encomendas}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
vector<{\b Encomenda}> Empresa::encomendas{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAEY}
{\bkmkend AAAAAAAAEY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O conjuntor de encomendas (Classe {\b Encomenda}) da {\b Empresa}. }}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para esta classe foi gerada a partir dos seguintes ficheiros:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UgnEatsFoodDeliveryFinal3/{\b empresa.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UgnEatsFoodDeliveryFinal3/{\b empresa.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia \'E0 classe Encomenda\par \pard\plain 
{\tc\tcl2 \v Encomenda}
{\xe \v Encomenda}
{\bkmkstart AAAAAAAAEZ}
{\bkmkend AAAAAAAAEZ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b Encomenda} representa uma encomenda atrav\'E9s do nome do Restauranre, {\b Data} e hora da encomenda, nome do {\b Entregador} e {\b Cliente}, lista de pratos do menu encomendados, se a encomenda foi realizada com sucesso e se foi realizada dentro ou num concelho vizinho, e o pre\'E7o total da encomenda. }}\par
{
{\f2 #include <empresa.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Encomenda} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Encomenda}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~Encomenda} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destrutor da classe {\b Encomenda}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const string & {\b getRestauranteNome} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setRestauranteNome} (const string &restaurante)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b Data} & {\b getData} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setData} (const {\b Data} &{\b data})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string & {\b getEntregadorNome} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setEntregadorNome} (const string entregador)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const string & {\b getHora} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setHora} (const string &{\b hora})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string & {\b getPratosNome} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setPratosNome} (string &pratos)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b isEntrega} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setEntrega} (bool {\b entrega})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b isSucesso} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setSucesso} (bool {\b sucesso})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b getClienteNome} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setClienteNome} (string c)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b getPreco} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setPreco} (double p)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos Privados\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b restauranteNome}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O nome do {\b Restaurante} da encomenda. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Data} {\b data}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A data da encomenda. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b entregadorNome}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O nome do entregador da encomenda. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b hora}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A hora da encomenda. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b pratosNome}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Os pratos encomendados. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b entrega}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Booleano que representa se a encomenda foi realizada dentro ou fora. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b sucesso}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Booleano que representa se a encomenda foi realizada com sucesso. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b clienteNome}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O nome do {\b Cliente} que realizou a encomenda. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b preco}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O pre\'E7o da encomenda. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b Encomenda} representa uma encomenda atrav\'E9s do nome do Restauranre, {\b Data} e hora da encomenda, nome do {\b Entregador} e {\b Cliente}, lista de pratos do menu encomendados, se a encomenda foi realizada com sucesso e se foi realizada dentro ou num concelho vizinho, e o pre\'E7o total da encomenda. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos Construtores & Destrutor\par
\pard\plain 
{\xe \v Encomenda\:Encomenda}
{\xe \v Encomenda\:Encomenda}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Encomenda::Encomenda ()}}
\par
{\bkmkstart AAAAAAAAFA}
{\bkmkend AAAAAAAAFA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Encomenda}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     9 \{\}\par
}
}
{\xe \v ~Encomenda\:Encomenda}
{\xe \v Encomenda\:~Encomenda}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Encomenda::~Encomenda (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAFB}
{\bkmkend AAAAAAAAFB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destrutor da classe {\b Encomenda}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    11                       \{\par
   12 \par
   13 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos m\'E9todos\par
\pard\plain 
{\xe \v getClienteNome\:Encomenda}
{\xe \v Encomenda\:getClienteNome}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Encomenda::getClienteNome ()}}
\par
{\bkmkstart AAAAAAAAFC}
{\bkmkend AAAAAAAAFC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    71                                  \{\par
   72     {\cf19 return} clienteNome;\par
   73 \}\par
}
}
{\xe \v getData\:Encomenda}
{\xe \v Encomenda\:getData}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b Data} & Encomenda::getData () const}}
\par
{\bkmkstart AAAAAAAAFD}
{\bkmkend AAAAAAAAFD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    23                                      \{\par
   24     {\cf19 return} data;\par
   25 \}\par
}
}
{\xe \v getEntregadorNome\:Encomenda}
{\xe \v Encomenda\:getEntregadorNome}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string & Encomenda::getEntregadorNome ()}}
\par
{\bkmkstart AAAAAAAAFE}
{\bkmkend AAAAAAAAFE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    31                                     \{\par
   32     {\cf19 return} entregadorNome;\par
   33 \}\par
}
}
{\xe \v getHora\:Encomenda}
{\xe \v Encomenda\:getHora}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string & Encomenda::getHora () const}}
\par
{\bkmkstart AAAAAAAAFF}
{\bkmkend AAAAAAAAFF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    40                                        \{\par
   41     {\cf19 return} hora;\par
   42 \}\par
}
}
{\xe \v getPratosNome\:Encomenda}
{\xe \v Encomenda\:getPratosNome}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string & Encomenda::getPratosNome ()}}
\par
{\bkmkstart AAAAAAAAFG}
{\bkmkend AAAAAAAAFG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    48                                  \{\par
   49     {\cf19 return} pratosNome;\par
   50 \}\par
}
}
{\xe \v getPreco\:Encomenda}
{\xe \v Encomenda\:getPreco}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double Encomenda::getPreco ()}}
\par
{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    77                           \{\par
   78     {\cf19 return} preco;\par
   79 \}\par
}
}
{\xe \v getRestauranteNome\:Encomenda}
{\xe \v Encomenda\:getRestauranteNome}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string & Encomenda::getRestauranteNome () const}}
\par
{\bkmkstart AAAAAAAAFI}
{\bkmkend AAAAAAAAFI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    15                                                   \{\par
   16     {\cf19 return} restauranteNome;\par
   17 \}\par
}
}
{\xe \v isEntrega\:Encomenda}
{\xe \v Encomenda\:isEntrega}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Encomenda::isEntrega () const}}
\par
{\bkmkstart AAAAAAAAFJ}
{\bkmkend AAAAAAAAFJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    56                                 \{\par
   57     {\cf19 return} entrega;\par
   58 \}\par
}
}
{\xe \v isSucesso\:Encomenda}
{\xe \v Encomenda\:isSucesso}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Encomenda::isSucesso () const}}
\par
{\bkmkstart AAAAAAAAFK}
{\bkmkend AAAAAAAAFK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    64                                 \{\par
   65     {\cf19 return} sucesso;\par
   66 \}\par
}
}
{\xe \v setClienteNome\:Encomenda}
{\xe \v Encomenda\:setClienteNome}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Encomenda::setClienteNome (string  {\i c})}}
\par
{\bkmkstart AAAAAAAAFL}
{\bkmkend AAAAAAAAFL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    74                                       \{\par
   75     clienteNome=c;\par
   76 \}\par
}
}
{\xe \v setData\:Encomenda}
{\xe \v Encomenda\:setData}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Encomenda::setData (const {\b Data} &  {\i data})}}
\par
{\bkmkstart AAAAAAAAFM}
{\bkmkend AAAAAAAAFM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    27                                         \{\par
   28     Encomenda::data = data;\par
   29 \}\par
}
}
{\xe \v setEntrega\:Encomenda}
{\xe \v Encomenda\:setEntrega}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Encomenda::setEntrega (bool  {\i entrega})}}
\par
{\bkmkstart AAAAAAAAFN}
{\bkmkend AAAAAAAAFN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    60                                        \{\par
   61     Encomenda::entrega = entrega;\par
   62 \}\par
}
}
{\xe \v setEntregadorNome\:Encomenda}
{\xe \v Encomenda\:setEntregadorNome}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Encomenda::setEntregadorNome (const string  {\i entregador})}}
\par
{\bkmkstart AAAAAAAAFO}
{\bkmkend AAAAAAAAFO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    35                                                  \{\par
   36     Encomenda::entregadorNome = e;\par
   37 \}\par
}
}
{\xe \v setHora\:Encomenda}
{\xe \v Encomenda\:setHora}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Encomenda::setHora (const string &  {\i hora})}}
\par
{\bkmkstart AAAAAAAAFP}
{\bkmkend AAAAAAAAFP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    44                                           \{\par
   45     Encomenda::hora = hora;\par
   46 \}\par
}
}
{\xe \v setPratosNome\:Encomenda}
{\xe \v Encomenda\:setPratosNome}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Encomenda::setPratosNome (string &  {\i pratos})}}
\par
{\bkmkstart AAAAAAAAFQ}
{\bkmkend AAAAAAAAFQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    52                                             \{\par
   53     Encomenda::pratosNome = pratos;\par
   54 \}\par
}
}
{\xe \v setPreco\:Encomenda}
{\xe \v Encomenda\:setPreco}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Encomenda::setPreco (double  {\i p})}}
\par
{\bkmkstart AAAAAAAAFR}
{\bkmkend AAAAAAAAFR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    80                                 \{\par
   81     preco=p;\par
   82 \}\par
}
}
{\xe \v setRestauranteNome\:Encomenda}
{\xe \v Encomenda\:setRestauranteNome}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Encomenda::setRestauranteNome (const string &  {\i restaurante})}}
\par
{\bkmkstart AAAAAAAAFS}
{\bkmkend AAAAAAAAFS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    19                                                             \{\par
   20     Encomenda::restauranteNome = restaurante;\par
   21 \}\par
}
}
{\xe \v setSucesso\:Encomenda}
{\xe \v Encomenda\:setSucesso}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Encomenda::setSucesso (bool  {\i sucesso})}}
\par
{\bkmkstart AAAAAAAAFT}
{\bkmkend AAAAAAAAFT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    68                                        \{\par
   69     Encomenda::sucesso = sucesso;\par
   70 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos dados membro\par
\pard\plain 
{\xe \v clienteNome\:Encomenda}
{\xe \v Encomenda\:clienteNome}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Encomenda::clienteNome{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFU}
{\bkmkend AAAAAAAAFU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O nome do {\b Cliente} que realizou a encomenda. }}\par
}
{\xe \v data\:Encomenda}
{\xe \v Encomenda\:data}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Data} Encomenda::data{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFV}
{\bkmkend AAAAAAAAFV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A data da encomenda. }}\par
}
{\xe \v entrega\:Encomenda}
{\xe \v Encomenda\:entrega}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Encomenda::entrega{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFW}
{\bkmkend AAAAAAAAFW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Booleano que representa se a encomenda foi realizada dentro ou fora. }}\par
}
{\xe \v entregadorNome\:Encomenda}
{\xe \v Encomenda\:entregadorNome}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Encomenda::entregadorNome{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFX}
{\bkmkend AAAAAAAAFX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O nome do entregador da encomenda. }}\par
}
{\xe \v hora\:Encomenda}
{\xe \v Encomenda\:hora}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Encomenda::hora{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFY}
{\bkmkend AAAAAAAAFY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A hora da encomenda. }}\par
}
{\xe \v pratosNome\:Encomenda}
{\xe \v Encomenda\:pratosNome}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Encomenda::pratosNome{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFZ}
{\bkmkend AAAAAAAAFZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Os pratos encomendados. }}\par
}
{\xe \v preco\:Encomenda}
{\xe \v Encomenda\:preco}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double Encomenda::preco{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAGA}
{\bkmkend AAAAAAAAGA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O pre\'E7o da encomenda. }}\par
}
{\xe \v restauranteNome\:Encomenda}
{\xe \v Encomenda\:restauranteNome}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Encomenda::restauranteNome{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAGB}
{\bkmkend AAAAAAAAGB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O nome do {\b Restaurante} da encomenda. }}\par
}
{\xe \v sucesso\:Encomenda}
{\xe \v Encomenda\:sucesso}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Encomenda::sucesso{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAGC}
{\bkmkend AAAAAAAAGC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Booleano que representa se a encomenda foi realizada com sucesso. }}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para esta classe foi gerada a partir dos seguintes ficheiros:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UgnEatsFoodDeliveryFinal3/{\b empresa.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UgnEatsFoodDeliveryFinal3/{\b empresa.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia \'E0 classe Entregador\par \pard\plain 
{\tc\tcl2 \v Entregador}
{\xe \v Entregador}
{\bkmkstart AAAAAAAAGD}
{\bkmkend AAAAAAAAGD}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b Entregador} representa um funcion\'E1rio {\b Entregador} atrav\'E9s das suas caracter\'EDsticas enquanto Funcion\'E1rio, mais o seu Ve\'EDculo, um vetor de encomendas (classe {\b Encomenda}) feitas, e a sua disponibilidade. }}\par
{
{\f2 #include <empresa.h>}}\par
Diagrama de heran\'E7as da classe Entregador{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_entregador.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Entregador} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Entregador}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~Entregador} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destrutor da classe {\b Entregador}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b Veiculo} {\b getVeiculoAlocado} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setVeiculoAlocado} (const {\b Veiculo} &veiculoAlocado)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
vector< {\b Encomenda} > {\b getEncomFeitas} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setEncomFeitas} (const vector< {\b Encomenda} > &encomFeitas)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b isDisponivel} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setDisponivel} (bool {\b disponivel})\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos Privados\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Veiculo} {\b veiculo_alocado}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O veiculo do entregador. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
vector< {\b Encomenda} > {\b encom_feitas}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O vetor de encomendas (Classe {\b Encomenda}) feitas pelo entregador. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b disponivel}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A sua disponibilidade. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b Entregador} representa um funcion\'E1rio {\b Entregador} atrav\'E9s das suas caracter\'EDsticas enquanto Funcion\'E1rio, mais o seu Ve\'EDculo, um vetor de encomendas (classe {\b Encomenda}) feitas, e a sua disponibilidade. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos Construtores & Destrutor\par
\pard\plain 
{\xe \v Entregador\:Entregador}
{\xe \v Entregador\:Entregador}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Entregador::Entregador ()}}
\par
{\bkmkstart AAAAAAAAGE}
{\bkmkend AAAAAAAAGE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Entregador}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   146 \{\}\par
}
}
{\xe \v ~Entregador\:Entregador}
{\xe \v Entregador\:~Entregador}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Entregador::~Entregador (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAGF}
{\bkmkend AAAAAAAAGF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destrutor da classe {\b Entregador}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   147                         \{\par
  148 \par
  149 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos m\'E9todos\par
\pard\plain 
{\xe \v getEncomFeitas\:Entregador}
{\xe \v Entregador\:getEncomFeitas}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
vector< {\b Encomenda} > Entregador::getEncomFeitas (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAGG}
{\bkmkend AAAAAAAAGG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplementado de {\b Funcionario} ({\i p. {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGH \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   156                                             \{\par
  157     {\cf19 return} encom_feitas;\par
  158 \}\par
}
}
{\xe \v getVeiculoAlocado\:Entregador}
{\xe \v Entregador\:getVeiculoAlocado}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b Veiculo} Entregador::getVeiculoAlocado () const{\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAGI}
{\bkmkend AAAAAAAAGI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplementado de {\b Funcionario} ({\i p. {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGJ \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   150                                                   \{\par
  151     {\cf19 return} veiculo_alocado;\par
  152 \}\par
}
}
{\xe \v isDisponivel\:Entregador}
{\xe \v Entregador\:isDisponivel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Entregador::isDisponivel () const{\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAGK}
{\bkmkend AAAAAAAAGK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplementado de {\b Funcionario} ({\i p. {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   162                                     \{\par
  163     {\cf19 return} disponivel;\par
  164 \}\par
}
}
{\xe \v setDisponivel\:Entregador}
{\xe \v Entregador\:setDisponivel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Entregador::setDisponivel (bool  {\i disponivel}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAGM}
{\bkmkend AAAAAAAAGM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplementado de {\b Funcionario} ({\i p. {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGN \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   165                                               \{\par
  166     Entregador::disponivel = disponivel;\par
  167 \}\par
}
}
{\xe \v setEncomFeitas\:Entregador}
{\xe \v Entregador\:setEncomFeitas}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Entregador::setEncomFeitas (const vector< {\b Encomenda} > &  {\i encomFeitas}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAGO}
{\bkmkend AAAAAAAAGO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplementado de {\b Funcionario} ({\i p. {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGP \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   159                                                                     \{\par
  160     encom_feitas = encomFeitas;\par
  161 \}\par
}
}
{\xe \v setVeiculoAlocado\:Entregador}
{\xe \v Entregador\:setVeiculoAlocado}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Entregador::setVeiculoAlocado (const {\b Veiculo} &  {\i veiculoAlocado}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAGQ}
{\bkmkend AAAAAAAAGQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplementado de {\b Funcionario} ({\i p. {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGR \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   153                                                                 \{\par
  154     veiculo_alocado = veiculoAlocado;\par
  155 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos dados membro\par
\pard\plain 
{\xe \v disponivel\:Entregador}
{\xe \v Entregador\:disponivel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Entregador::disponivel{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAGS}
{\bkmkend AAAAAAAAGS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A sua disponibilidade. }}\par
}
{\xe \v encom_feitas\:Entregador}
{\xe \v Entregador\:encom_feitas}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
vector<{\b Encomenda}> Entregador::encom_feitas{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAGT}
{\bkmkend AAAAAAAAGT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O vetor de encomendas (Classe {\b Encomenda}) feitas pelo entregador. }}\par
}
{\xe \v veiculo_alocado\:Entregador}
{\xe \v Entregador\:veiculo_alocado}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Veiculo} Entregador::veiculo_alocado{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAGU}
{\bkmkend AAAAAAAAGU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O veiculo do entregador. }}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para esta classe foi gerada a partir dos seguintes ficheiros:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UgnEatsFoodDeliveryFinal3/{\b empresa.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UgnEatsFoodDeliveryFinal3/{\b empresa.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia \'E0 classe Funcionario\par \pard\plain 
{\tc\tcl2 \v Funcionario}
{\xe \v Funcionario}
{\bkmkstart AAAAAAAAGV}
{\bkmkend AAAAAAAAGV}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b Funcionario} representa um funcion\'E1rio atrav\'E9s do seu nome e nif, da sua {\b Data} de nascimento, do seu Salario e do seu tipo(Entregador/Administrador). }}\par
{
{\f2 #include <empresa.h>}}\par
Diagrama de heran\'E7as da classe Funcionario{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_funcionario.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Funcionario} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe Funcion\'E1rio. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~Funcionario} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe Funcion\'E1rio. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual const string & {\b getNome} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b setNome} (const string &{\b nome})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual const {\b Data} & {\b getData} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b setData} (const {\b Data} &{\b data})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual string {\b getNif} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b setNif} (string {\b nif})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual int {\b getSalario} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b setSalario} (int {\b salario})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual const string {\b getFuncao} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b setFuncao} (const string &funcao)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual const {\b Veiculo} {\b getVeiculoAlocado} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b setVeiculoAlocado} (const {\b Veiculo} &veiculoAlocado)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual vector< {\b Encomenda} > {\b getEncomFeitas} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b setEncomFeitas} (const vector< {\b Encomenda} > &encomFeitas)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b isDisponivel} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b setDisponivel} (bool disponivel)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setTipoDeFuncionario} (string t)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b getTipoDeFuncionario} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos Privados\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b nome}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O nome do Funcion\'E1rio. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b nif}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O nif do Funcion\'E1rio. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Data} {\b data}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A data de nascimento do Funcion\'E1rio. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b salario}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O sal\'E1rio do Funcion\'E1rio. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b tipoDeFuncionario}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O tipo de Funcion\'E1rio. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b Funcionario} representa um funcion\'E1rio atrav\'E9s do seu nome e nif, da sua {\b Data} de nascimento, do seu Salario e do seu tipo(Entregador/Administrador). \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos Construtores & Destrutor\par
\pard\plain 
{\xe \v Funcionario\:Funcionario}
{\xe \v Funcionario\:Funcionario}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Funcionario::Funcionario ()}}
\par
{\bkmkstart AAAAAAAAGW}
{\bkmkend AAAAAAAAGW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe Funcion\'E1rio. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    87 \{\}\par
}
}
{\xe \v ~Funcionario\:Funcionario}
{\xe \v Funcionario\:~Funcionario}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Funcionario::~Funcionario (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAGX}
{\bkmkend AAAAAAAAGX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe Funcion\'E1rio. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    88                           \{\par
   89 \par
   90 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos m\'E9todos\par
\pard\plain 
{\xe \v getData\:Funcionario}
{\xe \v Funcionario\:getData}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b Data} & Funcionario::getData () const{\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAGY}
{\bkmkend AAAAAAAAGY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    97                                        \{\par
   98     {\cf19 return} data;\par
   99 \}\par
}
}
{\xe \v getEncomFeitas\:Funcionario}
{\xe \v Funcionario\:getEncomFeitas}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
vector< {\b Encomenda} > Funcionario::getEncomFeitas (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAGH}
{\bkmkend AAAAAAAAGH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplementado em {\b Entregador} ({\i p. {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGG \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   119 \{vector<Encomenda> v; {\cf19 return} v;\}\par
}
}
{\xe \v getFuncao\:Funcionario}
{\xe \v Funcionario\:getFuncao}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string Funcionario::getFuncao () const{\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplementado em {\b Administrador} ({\i p. {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABK \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   115 \{{\cf18 string} a; {\cf19 return} a;\}\par
}
}
{\xe \v getNif\:Funcionario}
{\xe \v Funcionario\:getNif}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Funcionario::getNif () const{\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAGZ}
{\bkmkend AAAAAAAAGZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   103                                  \{\par
  104     {\cf19 return} nif;\par
  105 \}\par
}
}
{\xe \v getNome\:Funcionario}
{\xe \v Funcionario\:getNome}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string & Funcionario::getNome () const{\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAHA}
{\bkmkend AAAAAAAAHA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    91                                          \{\par
   92     {\cf19 return} nome;\par
   93 \}\par
}
}
{\xe \v getSalario\:Funcionario}
{\xe \v Funcionario\:getSalario}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Funcionario::getSalario () const{\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAHB}
{\bkmkend AAAAAAAAHB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   109                                   \{\par
  110     {\cf19 return} salario;\par
  111 \}\par
}
}
{\xe \v getTipoDeFuncionario\:Funcionario}
{\xe \v Funcionario\:getTipoDeFuncionario}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Funcionario::getTipoDeFuncionario ()}}
\par
{\bkmkstart AAAAAAAAHC}
{\bkmkend AAAAAAAAHC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   126                                         \{\par
  127     {\cf19 return} tipoDeFuncionario;\par
  128 \}\par
}
}
{\xe \v getVeiculoAlocado\:Funcionario}
{\xe \v Funcionario\:getVeiculoAlocado}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b Veiculo} Funcionario::getVeiculoAlocado () const{\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAGJ}
{\bkmkend AAAAAAAAGJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplementado em {\b Entregador} ({\i p. {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGI \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   117 \{Veiculo v; {\cf19 return} v;\}\par
}
}
{\xe \v isDisponivel\:Funcionario}
{\xe \v Funcionario\:isDisponivel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Funcionario::isDisponivel () const{\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAGL}
{\bkmkend AAAAAAAAGL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplementado em {\b Entregador} ({\i p. {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGK \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   121 \{{\cf19 return} {\cf17 true};\}\par
}
}
{\xe \v setData\:Funcionario}
{\xe \v Funcionario\:setData}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Funcionario::setData (const {\b Data} &  {\i data}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAHD}
{\bkmkend AAAAAAAAHD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   100                                           \{\par
  101     Funcionario::data = data;\par
  102 \}\par
}
}
{\xe \v setDisponivel\:Funcionario}
{\xe \v Funcionario\:setDisponivel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Funcionario::setDisponivel (bool  {\i disponivel}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAGN}
{\bkmkend AAAAAAAAGN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplementado em {\b Entregador} ({\i p. {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGM \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   122 \{{\cf19 return};\}\par
}
}
{\xe \v setEncomFeitas\:Funcionario}
{\xe \v Funcionario\:setEncomFeitas}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Funcionario::setEncomFeitas (const vector< {\b Encomenda} > &  {\i encomFeitas}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAGP}
{\bkmkend AAAAAAAAGP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplementado em {\b Entregador} ({\i p. {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGO \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   120 \{{\cf19 return};\}\par
}
}
{\xe \v setFuncao\:Funcionario}
{\xe \v Funcionario\:setFuncao}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Funcionario::setFuncao (const string &  {\i funcao}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplementado em {\b Administrador} ({\i p. {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABM \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   116 \{{\cf19 return};\}\par
}
}
{\xe \v setNif\:Funcionario}
{\xe \v Funcionario\:setNif}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Funcionario::setNif (string  {\i nif}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAHE}
{\bkmkend AAAAAAAAHE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   106                                  \{\par
  107     nif = n;\par
  108 \}\par
}
}
{\xe \v setNome\:Funcionario}
{\xe \v Funcionario\:setNome}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Funcionario::setNome (const string &  {\i nome}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAHF}
{\bkmkend AAAAAAAAHF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    94                                             \{\par
   95     Funcionario::nome = nome;\par
   96 \}\par
}
}
{\xe \v setSalario\:Funcionario}
{\xe \v Funcionario\:setSalario}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Funcionario::setSalario (int  {\i salario}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAHG}
{\bkmkend AAAAAAAAHG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   112                                         \{\par
  113     Funcionario::salario = salario;\par
  114 \}\par
}
}
{\xe \v setTipoDeFuncionario\:Funcionario}
{\xe \v Funcionario\:setTipoDeFuncionario}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Funcionario::setTipoDeFuncionario (string  {\i t})}}
\par
{\bkmkstart AAAAAAAAHH}
{\bkmkend AAAAAAAAHH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   123                                               \{\par
  124     tipoDeFuncionario=t;\par
  125 \}\par
}
}
{\xe \v setVeiculoAlocado\:Funcionario}
{\xe \v Funcionario\:setVeiculoAlocado}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Funcionario::setVeiculoAlocado (const {\b Veiculo} &  {\i veiculoAlocado}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAGR}
{\bkmkend AAAAAAAAGR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Reimplementado em {\b Entregador} ({\i p. {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGQ \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   118 \{{\cf19 return};\}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos dados membro\par
\pard\plain 
{\xe \v data\:Funcionario}
{\xe \v Funcionario\:data}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Data} Funcionario::data{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAHI}
{\bkmkend AAAAAAAAHI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A data de nascimento do Funcion\'E1rio. }}\par
}
{\xe \v nif\:Funcionario}
{\xe \v Funcionario\:nif}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Funcionario::nif{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAHJ}
{\bkmkend AAAAAAAAHJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O nif do Funcion\'E1rio. }}\par
}
{\xe \v nome\:Funcionario}
{\xe \v Funcionario\:nome}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Funcionario::nome{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAHK}
{\bkmkend AAAAAAAAHK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O nome do Funcion\'E1rio. }}\par
}
{\xe \v salario\:Funcionario}
{\xe \v Funcionario\:salario}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Funcionario::salario{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAHL}
{\bkmkend AAAAAAAAHL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O sal\'E1rio do Funcion\'E1rio. }}\par
}
{\xe \v tipoDeFuncionario\:Funcionario}
{\xe \v Funcionario\:tipoDeFuncionario}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Funcionario::tipoDeFuncionario{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAHM}
{\bkmkend AAAAAAAAHM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O tipo de Funcion\'E1rio. }}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para esta classe foi gerada a partir dos seguintes ficheiros:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UgnEatsFoodDeliveryFinal3/{\b empresa.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UgnEatsFoodDeliveryFinal3/{\b empresa.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia \'E0 classe FuncionarioInexistente\par \pard\plain 
{\tc\tcl2 \v FuncionarioInexistente}
{\xe \v FuncionarioInexistente}
{\bkmkstart AAAAAAAAHN}
{\bkmkend AAAAAAAAHN}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b FuncionarioInexistente} representa uma exce\'E7\'E3o que \'E9 lan\'E7ada se tenta aceder a um funcionario que n\'E3o pertence \'E0 lista de funcionarios da base. }}\par
{
{\f2 #include <empresa.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b FuncionarioInexistente} ({\b Funcionario} &f)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da Classe {\b FuncionarioInexistente}. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Funcionario} * {\b funcionario}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O {\b Funcionario} Inexistente. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Amigos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
ostream & {\b operator<<} (ostream &out, const {\b FuncionarioInexistente} &f)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Operador << para mensagem de erro que apanha o objeto lan\'E7ado pela exce\'E7\'E3o. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b FuncionarioInexistente} representa uma exce\'E7\'E3o que \'E9 lan\'E7ada se tenta aceder a um funcionario que n\'E3o pertence \'E0 lista de funcionarios da base. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos Construtores & Destrutor\par
\pard\plain 
{\xe \v FuncionarioInexistente\:FuncionarioInexistente}
{\xe \v FuncionarioInexistente\:FuncionarioInexistente}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
FuncionarioInexistente::FuncionarioInexistente ({\b Funcionario} &  {\i f}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAHO}
{\bkmkend AAAAAAAAHO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da Classe {\b FuncionarioInexistente}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    43 \{ funcionario=&f;\}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das classes amigas e fun\'E7\'F5es relacionadas\par
\pard\plain 
{\xe \v operator<<\:FuncionarioInexistente}
{\xe \v FuncionarioInexistente\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
ostream& operator<< (ostream &  {\i out}, const {\b FuncionarioInexistente} &  {\i f}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAHP}
{\bkmkend AAAAAAAAHP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Operador << para mensagem de erro que apanha o objeto lan\'E7ado pela exce\'E7\'E3o. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    45                                                                               \{\par
   46         out << {\cf22 "Esse funcionario nao e nosso trabalhador!"}<<endl;\par
   47         {\cf19 return} out;\par
   48     \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos dados membro\par
\pard\plain 
{\xe \v funcionario\:FuncionarioInexistente}
{\xe \v FuncionarioInexistente\:funcionario}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Funcionario}* FuncionarioInexistente::funcionario}}
\par
{\bkmkstart AAAAAAAAHQ}
{\bkmkend AAAAAAAAHQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O {\b Funcionario} Inexistente. }}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para esta classe foi gerada a partir do seguinte ficheiro:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UgnEatsFoodDeliveryFinal3/{\b empresa.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia \'E0 classe Morada\par \pard\plain 
{\tc\tcl2 \v Morada}
{\xe \v Morada}
{\bkmkstart AAAAAAAAHR}
{\bkmkend AAAAAAAAHR}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class {\b Morada} representa uma morada atraves da sua rua, localidade e numero. }}\par
{
{\f2 #include <auxiliares.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Morada} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Morada}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Morada} (string morada)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constroi uma inst\'E2ncia de {\b Morada} recebendo uma string estruturada com o seu conte\'FAdo. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Morada} (string {\b rua}, string {\b numero}, string {\b localidade})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constroi uma inst\'E2ncia de {\b Morada} recebendo uma a rua, o numero e a localidade. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~Morada} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destrutor da classe morada. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const string & {\b getRua} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setRua} (const string &{\b rua})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const string & {\b getLocalidade} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setLocalidade} (const string &{\b localidade})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b getNumero} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setNumero} (string {\b numero})\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos Privados\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b rua}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A rua da morada;. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b localidade}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A localidade da morada;. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b numero}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O numero da porta da morada;. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class {\b Morada} representa uma morada atraves da sua rua, localidade e numero. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos Construtores & Destrutor\par
\pard\plain 
{\xe \v Morada\:Morada}
{\xe \v Morada\:Morada}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Morada::Morada ()}}
\par
{\bkmkstart AAAAAAAAHS}
{\bkmkend AAAAAAAAHS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Morada}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    18 \{\}\par
}
}
{\xe \v Morada\:Morada}
{\xe \v Morada\:Morada}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Morada::Morada (string  {\i morada})}}
\par
{\bkmkstart AAAAAAAAHT}
{\bkmkend AAAAAAAAHT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constroi uma inst\'E2ncia de {\b Morada} recebendo uma string estruturada com o seu conte\'FAdo. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    19                             \{\par
   20     {\cf18 string} temp = {\cf22 ""};\par
   21     vector<string> morada_temp;\par
   22 \par
   23     {\cf19 for} ({\cf18 size_t} i = 0; i <= morada.length(); i++)\par
   24     \{\par
   25         {\cf19 if} (morada[i] == {\cf23 ','} )\par
   26         \{\par
   27             i += 1;\par
   28             morada_temp.push_back(temp);\par
   29             temp = {\cf22 ""};\par
   30         \}\par
   31         {\cf19 else}\par
   32             temp += morada[i];\par
   33     \}\par
   34     morada_temp.push_back(temp);\par
   35 \par
   36     this->rua = morada_temp[0];\par
   37     this->localidade= morada_temp[1];\par
   38     this->numero = morada_temp[2];\par
   39 \}\par
}
}
{\xe \v Morada\:Morada}
{\xe \v Morada\:Morada}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Morada::Morada (string  {\i rua}, string  {\i numero}, string  {\i localidade})}}
\par
{\bkmkstart AAAAAAAAHU}
{\bkmkend AAAAAAAAHU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constroi uma inst\'E2ncia de {\b Morada} recebendo uma a rua, o numero e a localidade. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i rua} \cell }{A rua da morada; \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i numero} \cell }{O n\'FAmero da porta da morada; \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i rua} \cell }{A localidade da morada; \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    41                                                \{\par
   42     this->rua = r;\par
   43     this->numero = num;\par
   44     this->localidade = loc;\par
   45 \}\par
}
}
{\xe \v ~Morada\:Morada}
{\xe \v Morada\:~Morada}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Morada::~Morada (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAHV}
{\bkmkend AAAAAAAAHV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destrutor da classe morada. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    47 \{\}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos m\'E9todos\par
\pard\plain 
{\xe \v getLocalidade\:Morada}
{\xe \v Morada\:getLocalidade}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string & Morada::getLocalidade () const}}
\par
{\bkmkstart AAAAAAAAHW}
{\bkmkend AAAAAAAAHW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    57                                           \{\par
   58     {\cf19 return} localidade;\par
   59 \}\par
}
}
{\xe \v getNumero\:Morada}
{\xe \v Morada\:getNumero}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Morada::getNumero () const}}
\par
{\bkmkstart AAAAAAAAHX}
{\bkmkend AAAAAAAAHX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    65                                \{\par
   66     {\cf19 return} numero;\par
   67 \}\par
}
}
{\xe \v getRua\:Morada}
{\xe \v Morada\:getRua}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string & Morada::getRua () const}}
\par
{\bkmkstart AAAAAAAAHY}
{\bkmkend AAAAAAAAHY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    49                                    \{\par
   50     {\cf19 return} rua;\par
   51 \}\par
}
}
{\xe \v setLocalidade\:Morada}
{\xe \v Morada\:setLocalidade}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Morada::setLocalidade (const string &  {\i localidade})}}
\par
{\bkmkstart AAAAAAAAHZ}
{\bkmkend AAAAAAAAHZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    61                                             \{\par
   62     localidade = loc;\par
   63 \}\par
}
}
{\xe \v setNumero\:Morada}
{\xe \v Morada\:setNumero}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Morada::setNumero (string  {\i numero})}}
\par
{\bkmkstart AAAAAAAAIA}
{\bkmkend AAAAAAAAIA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    69                                  \{\par
   70     numero = num;\par
   71 \}\par
}
}
{\xe \v setRua\:Morada}
{\xe \v Morada\:setRua}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Morada::setRua (const string &  {\i rua})}}
\par
{\bkmkstart AAAAAAAAIB}
{\bkmkend AAAAAAAAIB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    53                                    \{\par
   54     rua = r;\par
   55 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos dados membro\par
\pard\plain 
{\xe \v localidade\:Morada}
{\xe \v Morada\:localidade}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Morada::localidade{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAIC}
{\bkmkend AAAAAAAAIC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A localidade da morada;. }}\par
}
{\xe \v numero\:Morada}
{\xe \v Morada\:numero}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Morada::numero{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAID}
{\bkmkend AAAAAAAAID}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O numero da porta da morada;. }}\par
}
{\xe \v rua\:Morada}
{\xe \v Morada\:rua}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Morada::rua{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAIE}
{\bkmkend AAAAAAAAIE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A rua da morada;. }}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para esta classe foi gerada a partir dos seguintes ficheiros:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UgnEatsFoodDeliveryFinal3/{\b auxiliares.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UgnEatsFoodDeliveryFinal3/{\b auxiliares.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia \'E0 classe Prato\par \pard\plain 
{\tc\tcl2 \v Prato}
{\xe \v Prato}
{\bkmkstart AAAAAAAAIF}
{\bkmkend AAAAAAAAIF}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class {\b Prato} representa um prato atraves do seu nome, tipo de culin\'E1ria e o respetivo pre\'E7o. }}\par
{
{\f2 #include <auxiliares.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Prato} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Prato}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~Prato} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destrutor da classe {\b Prato}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const string & {\b getNome} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setNome} (const string &{\b nome})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const string & {\b getTipoDeCulinaria} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setTipoDeCulinaria} (const string &tipoDeCulinaria)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b getPreco} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setPreco} (double {\b preco})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
vector< {\b Prato} > {\b pratos_readfile} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
L\'EA o ficheiro dos pratos.txt, guardando-os num vetor com objetos "Prato". }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos Privados\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b nome}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O nome do prato. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b tipo_de_culinaria}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O tipo de culinaria do prato. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b preco}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O pre\'E7o do prato. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class {\b Prato} representa um prato atraves do seu nome, tipo de culin\'E1ria e o respetivo pre\'E7o. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos Construtores & Destrutor\par
\pard\plain 
{\xe \v Prato\:Prato}
{\xe \v Prato\:Prato}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Prato::Prato ()}}
\par
{\bkmkstart AAAAAAAAIG}
{\bkmkend AAAAAAAAIG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Prato}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    76 \{\}\par
}
}
{\xe \v ~Prato\:Prato}
{\xe \v Prato\:~Prato}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Prato::~Prato (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAIH}
{\bkmkend AAAAAAAAIH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destrutor da classe {\b Prato}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    78               \{\par
   79 \par
   80 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos m\'E9todos\par
\pard\plain 
{\xe \v getNome\:Prato}
{\xe \v Prato\:getNome}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string & Prato::getNome () const}}
\par
{\bkmkstart AAAAAAAAII}
{\bkmkend AAAAAAAAII}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    82                                    \{\par
   83     {\cf19 return} nome;\par
   84 \}\par
}
}
{\xe \v getPreco\:Prato}
{\xe \v Prato\:getPreco}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double Prato::getPreco () const}}
\par
{\bkmkstart AAAAAAAAIJ}
{\bkmkend AAAAAAAAIJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    98                              \{\par
   99     {\cf19 return} preco;\par
  100 \}\par
}
}
{\xe \v getTipoDeCulinaria\:Prato}
{\xe \v Prato\:getTipoDeCulinaria}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string & Prato::getTipoDeCulinaria () const}}
\par
{\bkmkstart AAAAAAAAIK}
{\bkmkend AAAAAAAAIK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    90                                               \{\par
   91     {\cf19 return} tipo_de_culinaria;\par
   92 \}\par
}
}
{\xe \v pratos_readfile\:Prato}
{\xe \v Prato\:pratos_readfile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
vector< {\b Prato} > Prato::pratos_readfile ()}}
\par
{\bkmkstart AAAAAAAAIL}
{\bkmkend AAAAAAAAIL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
L\'EA o ficheiro dos pratos.txt, guardando-os num vetor com objetos "Prato". }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Retorna um vetor com objetos da classe {\b Prato}. \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   106                                      \{\par
  107     Prato p;\par
  108     vector<Prato> pratos;\par
  109     vector<string> prato_info;\par
  110     ifstream infile;\par
  111     {\cf18 string} line;\par
  112     infile.open({\cf22 "pratos.txt"});\par
  113     {\cf19 while}(getline(infile,line))\{\par
  114         {\cf19 if}(line=={\cf22 ":::::"})\{\par
  115             p.setNome(prato_info[0]);\par
  116             p.setTipoDeCulinaria(prato_info[1]);\par
  117             p.setPreco(stod(prato_info[2]));\par
  118             pratos.push_back(p);\par
  119             prato_info.clear();\par
  120         \}{\cf19 else}\{\par
  121             prato_info.push_back(line);\par
  122         \}\par
  123     \}\par
  124     p.setNome(prato_info[0]);\par
  125     p.setTipoDeCulinaria(prato_info[1]);\par
  126     p.setPreco(stod(prato_info[2]));\par
  127     pratos.push_back(p);\par
  128     prato_info.clear();\par
  129     {\cf19 return} pratos;\par
  130 \}\par
}
}
{\xe \v setNome\:Prato}
{\xe \v Prato\:setNome}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Prato::setNome (const string &  {\i nome})}}
\par
{\bkmkstart AAAAAAAAIM}
{\bkmkend AAAAAAAAIM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    86                                       \{\par
   87     Prato::nome = nome;\par
   88 \}\par
}
}
{\xe \v setPreco\:Prato}
{\xe \v Prato\:setPreco}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Prato::setPreco (double  {\i preco})}}
\par
{\bkmkstart AAAAAAAAIN}
{\bkmkend AAAAAAAAIN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   102                                  \{\par
  103     Prato::preco = preco;\par
  104 \}\par
}
}
{\xe \v setTipoDeCulinaria\:Prato}
{\xe \v Prato\:setTipoDeCulinaria}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Prato::setTipoDeCulinaria (const string &  {\i tipoDeCulinaria})}}
\par
{\bkmkstart AAAAAAAAIO}
{\bkmkend AAAAAAAAIO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    94                                                             \{\par
   95     tipo_de_culinaria = tipoDeCulinaria;\par
   96 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos dados membro\par
\pard\plain 
{\xe \v nome\:Prato}
{\xe \v Prato\:nome}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Prato::nome{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAIP}
{\bkmkend AAAAAAAAIP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O nome do prato. }}\par
}
{\xe \v preco\:Prato}
{\xe \v Prato\:preco}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double Prato::preco{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAIQ}
{\bkmkend AAAAAAAAIQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O pre\'E7o do prato. }}\par
}
{\xe \v tipo_de_culinaria\:Prato}
{\xe \v Prato\:tipo_de_culinaria}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Prato::tipo_de_culinaria{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAIR}
{\bkmkend AAAAAAAAIR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O tipo de culinaria do prato. }}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para esta classe foi gerada a partir dos seguintes ficheiros:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UgnEatsFoodDeliveryFinal3/{\b auxiliares.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UgnEatsFoodDeliveryFinal3/{\b auxiliares.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia \'E0 classe Restaurante\par \pard\plain 
{\tc\tcl2 \v Restaurante}
{\xe \v Restaurante}
{\bkmkstart AAAAAAAAIS}
{\bkmkend AAAAAAAAIS}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class {\b Restaurante} representa um restaurante atraves do seu nome, da sua {\b Morada}, do seu menu(vetor de pratos) e conjunto de tipos de culin\'E1ria. }}\par
{
{\f2 #include <restaurante.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Restaurante} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Restaurante}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~Restaurante} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destrutor da classe {\b Restaurante}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b Morada} & {\b getMorada} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const string & {\b getNome} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setNome} (const string &{\b nome})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setMorada} (const {\b Morada} &{\b morada})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const vector< string > & {\b getTiposDeCulinaria} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setTiposDeCulinaria} (const vector< string > &tiposDeCulinaria)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const vector< {\b Prato} > & {\b getPratos} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setPratos} (const vector< {\b Prato} > &{\b pratos})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b pratos_readfile} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
L\'EA o ficheiro dos pratos.txt, que contem um conjunto de objetos da classe {\b Prato}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
vector< {\b Restaurante} > {\b sortRestaurantesPorZona} (vector< {\b Restaurante} > v)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Ordena um vetor de Restaurantes por Zona/Concelho a que pertence, organizando-o. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
vector< {\b Restaurante} > {\b sortRestaurantesPorComida} (vector< {\b Restaurante} > v)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Ordena um vetor de Restaurantes por Tipo de Culinaria, organizando-o. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
vector< {\b Restaurante} > {\b sortRestaurantesPorNome} (vector< {\b Restaurante} > v)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator<} ({\b Restaurante} a)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Operador menor usado para fazer sort(), ordenar, um vetor de Restaurantes. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos Privados\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b nome}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O nome do {\b Restaurante}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Morada} {\b morada}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A morada do {\b Restaurante}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
vector< string > {\b tipos_de_culinaria}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O conjunto de tipos de culin\'E1ria do {\b Restaurante}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
vector< {\b Prato} > {\b pratos}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O menu/conjunto de pratos do {\b Restaurante}. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class {\b Restaurante} representa um restaurante atraves do seu nome, da sua {\b Morada}, do seu menu(vetor de pratos) e conjunto de tipos de culin\'E1ria. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos Construtores & Destrutor\par
\pard\plain 
{\xe \v Restaurante\:Restaurante}
{\xe \v Restaurante\:Restaurante}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Restaurante::Restaurante ()}}
\par
{\bkmkstart AAAAAAAAIT}
{\bkmkend AAAAAAAAIT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Restaurante}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     8 \{\}\par
}
}
{\xe \v ~Restaurante\:Restaurante}
{\xe \v Restaurante\:~Restaurante}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Restaurante::~Restaurante (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAIU}
{\bkmkend AAAAAAAAIU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destrutor da classe {\b Restaurante}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    10                           \{\par
   11 \par
   12 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos m\'E9todos\par
\pard\plain 
{\xe \v getMorada\:Restaurante}
{\xe \v Restaurante\:getMorada}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b Morada} & Restaurante::getMorada () const}}
\par
{\bkmkstart AAAAAAAAIV}
{\bkmkend AAAAAAAAIV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    22                                            \{\par
   23     {\cf19 return} morada;\par
   24 \}\par
}
}
{\xe \v getNome\:Restaurante}
{\xe \v Restaurante\:getNome}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string & Restaurante::getNome () const}}
\par
{\bkmkstart AAAAAAAAIW}
{\bkmkend AAAAAAAAIW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    14                                          \{\par
   15     {\cf19 return} nome;\par
   16 \}\par
}
}
{\xe \v getPratos\:Restaurante}
{\xe \v Restaurante\:getPratos}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const vector< {\b Prato} > & Restaurante::getPratos () const}}
\par
{\bkmkstart AAAAAAAAIX}
{\bkmkend AAAAAAAAIX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    38                                                   \{\par
   39     {\cf19 return} pratos;\par
   40 \}\par
}
}
{\xe \v getTiposDeCulinaria\:Restaurante}
{\xe \v Restaurante\:getTiposDeCulinaria}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const vector< string > & Restaurante::getTiposDeCulinaria () const}}
\par
{\bkmkstart AAAAAAAAIY}
{\bkmkend AAAAAAAAIY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    30                                                              \{\par
   31     {\cf19 return} tipos_de_culinaria;\par
   32 \}\par
}
}
{\xe \v operator<\:Restaurante}
{\xe \v Restaurante\:operator<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Restaurante::operator< ({\b Restaurante}  {\i a})}}
\par
{\bkmkstart AAAAAAAAIZ}
{\bkmkend AAAAAAAAIZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Operador menor usado para fazer sort(), ordenar, um vetor de Restaurantes. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i a} \cell }{Objeto da Classe {\b Restaurante}. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Verdadeiro ou falso consoante o operador. \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    76                                          \{\par
   77     {\cf19 if}(nome<a.getNome())\par
   78         {\cf19 return} {\cf17 true};\par
   79     {\cf19 return} {\cf17 false};\par
   80 \}\par
}
}
{\xe \v pratos_readfile\:Restaurante}
{\xe \v Restaurante\:pratos_readfile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Restaurante::pratos_readfile ()}}
\par
{\bkmkstart AAAAAAAAJA}
{\bkmkend AAAAAAAAJA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
L\'EA o ficheiro dos pratos.txt, que contem um conjunto de objetos da classe {\b Prato}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    46                                  \{\par
   47     Prato p;\par
   48     vector<string> prato_info;\par
   49     ifstream infile;\par
   50     {\cf18 string} line;\par
   51     infile.open({\cf22 "pratos.txt"});\par
   52     this->pratos.clear();\par
   53     {\cf19 while}(getline(infile,line))\{\par
   54         {\cf19 if}(line=={\cf22 ":::::"})\{\par
   55             p.setNome(prato_info[0]);\par
   56             p.setTipoDeCulinaria(prato_info[1]);\par
   57             p.setPreco(stod(prato_info[2]));\par
   58             {\cf19 if} (p.getTipoDeCulinaria() == this->tipos_de_culinaria[0]) \{\par
   59                 this->pratos.push_back(p);\par
   60             \}\par
   61             prato_info.clear();\par
   62         \}{\cf19 else}\{\par
   63             prato_info.push_back(line);\par
   64         \}\par
   65     \}\par
   66     p.setNome(prato_info[0]);\par
   67     p.setTipoDeCulinaria(prato_info[1]);\par
   68     p.setPreco(stod(prato_info[2]));\par
   69     {\cf19 if} (p.getTipoDeCulinaria() == this->tipos_de_culinaria[0]) \{\par
   70         this->pratos.push_back(p);\par
   71     \}\par
   72     prato_info.clear();\par
   73     {\cf19 return};\par
   74 \}\par
}
}
{\xe \v setMorada\:Restaurante}
{\xe \v Restaurante\:setMorada}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Restaurante::setMorada (const {\b Morada} &  {\i morada})}}
\par
{\bkmkstart AAAAAAAAJB}
{\bkmkend AAAAAAAAJB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    26                                                 \{\par
   27     Restaurante::morada = morada;\par
   28 \}\par
}
}
{\xe \v setNome\:Restaurante}
{\xe \v Restaurante\:setNome}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Restaurante::setNome (const string &  {\i nome})}}
\par
{\bkmkstart AAAAAAAAJC}
{\bkmkend AAAAAAAAJC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    18                                             \{\par
   19     Restaurante::nome = nome;\par
   20 \}\par
}
}
{\xe \v setPratos\:Restaurante}
{\xe \v Restaurante\:setPratos}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Restaurante::setPratos (const vector< {\b Prato} > &  {\i pratos})}}
\par
{\bkmkstart AAAAAAAAJD}
{\bkmkend AAAAAAAAJD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    42                                                        \{\par
   43     Restaurante::pratos = pratos;\par
   44 \}\par
}
}
{\xe \v setTiposDeCulinaria\:Restaurante}
{\xe \v Restaurante\:setTiposDeCulinaria}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Restaurante::setTiposDeCulinaria (const vector< string > &  {\i tiposDeCulinaria})}}
\par
{\bkmkstart AAAAAAAAJE}
{\bkmkend AAAAAAAAJE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    34                                                                             \{\par
   35     tipos_de_culinaria = tiposDeCulinaria;\par
   36 \}\par
}
}
{\xe \v sortRestaurantesPorComida\:Restaurante}
{\xe \v Restaurante\:sortRestaurantesPorComida}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
vector< {\b Restaurante} > Restaurante::sortRestaurantesPorComida (vector< {\b Restaurante} >  {\i v})}}
\par
{\bkmkstart AAAAAAAAJF}
{\bkmkend AAAAAAAAJF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Ordena um vetor de Restaurantes por Tipo de Culinaria, organizando-o. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i v} \cell }{Vetor com objetos da Classe {\b Restaurante}. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Retorna um vetor com objetos da classe {\b Restaurante}. \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   131                                                                                \{\par
  132     vector<Restaurante> res;\par
  133     {\cf19 for}({\cf18 int} i=0; i<v.size(); i++)\{\par
  134         {\cf19 if}(v[i].getTiposDeCulinaria()[0]=={\cf22 "Portuguesa"})\par
  135             res.push_back(v[i]);\par
  136     \}\par
  137     {\cf19 for}({\cf18 int} i=0; i<v.size(); i++)\{\par
  138         {\cf19 if}(v[i].getTiposDeCulinaria()[0]=={\cf22 "Italiana"})\par
  139             res.push_back(v[i]);\par
  140     \}\par
  141     {\cf19 for}({\cf18 int} i=0; i<v.size(); i++)\{\par
  142         {\cf19 if}(v[i].getTiposDeCulinaria()[0]=={\cf22 "Chinesa"})\par
  143             res.push_back(v[i]);\par
  144     \}\par
  145     {\cf19 for}({\cf18 int} i=0; i<v.size(); i++)\{\par
  146         {\cf19 if}(v[i].getTiposDeCulinaria()[0]=={\cf22 "Japonesa"})\par
  147             res.push_back(v[i]);\par
  148     \}\par
  149     {\cf19 return} res;\par
  150 \}\par
}
}
{\xe \v sortRestaurantesPorNome\:Restaurante}
{\xe \v Restaurante\:sortRestaurantesPorNome}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
vector< {\b Restaurante} > Restaurante::sortRestaurantesPorNome (vector< {\b Restaurante} >  {\i v})}}
\par
{\bkmkstart AAAAAAAAJG}
{\bkmkend AAAAAAAAJG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   152                                                                               \{\par
  153 \}\par
}
}
{\xe \v sortRestaurantesPorZona\:Restaurante}
{\xe \v Restaurante\:sortRestaurantesPorZona}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
vector< {\b Restaurante} > Restaurante::sortRestaurantesPorZona (vector< {\b Restaurante} >  {\i v})}}
\par
{\bkmkstart AAAAAAAAJH}
{\bkmkend AAAAAAAAJH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Ordena um vetor de Restaurantes por Zona/Concelho a que pertence, organizando-o. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i v} \cell }{Vetor com objetos da Classe {\b Restaurante}. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Retorna um vetor com objetos da classe {\b Restaurante}. \par
}}}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    82                                                                              \{\par
   83     vector<Restaurante> res;\par
   84     {\cf19 for}({\cf18 int} i=0; i<v.size(); i++)\{\par
   85         {\cf19 if}(v[i].getMorada().getLocalidade()=={\cf22 "Porto"})\par
   86             res.push_back(v[i]);\par
   87     \}\par
   88     {\cf19 for}({\cf18 int} i=0; i<v.size(); i++)\{\par
   89         {\cf19 if}(v[i].getMorada().getLocalidade()=={\cf22 "Matosinhos"})\par
   90             res.push_back(v[i]);\par
   91     \}\par
   92     {\cf19 for}({\cf18 int} i=0; i<v.size(); i++)\{\par
   93         {\cf19 if}(v[i].getMorada().getLocalidade()=={\cf22 "Vila Nova de Gaia"})\par
   94             res.push_back(v[i]);\par
   95     \}\par
   96     {\cf19 for}({\cf18 int} i=0; i<v.size(); i++)\{\par
   97         {\cf19 if}(v[i].getMorada().getLocalidade()=={\cf22 "Maia"})\par
   98             res.push_back(v[i]);\par
   99     \}\par
  100     {\cf19 for}({\cf18 int} i=0; i<v.size(); i++)\{\par
  101         {\cf19 if}(v[i].getMorada().getLocalidade()=={\cf22 "Gondarem"})\par
  102             res.push_back(v[i]);\par
  103     \}\par
  104     {\cf19 for}({\cf18 int} i=0; i<v.size(); i++)\{\par
  105         {\cf19 if}(v[i].getMorada().getLocalidade()=={\cf22 "Lisboa"})\par
  106             res.push_back(v[i]);\par
  107     \}\par
  108     {\cf19 for}({\cf18 int} i=0; i<v.size(); i++)\{\par
  109         {\cf19 if}(v[i].getMorada().getLocalidade()=={\cf22 "Amadora"})\par
  110             res.push_back(v[i]);\par
  111     \}\par
  112     {\cf19 for}({\cf18 int} i=0; i<v.size(); i++)\{\par
  113         {\cf19 if}(v[i].getMorada().getLocalidade()=={\cf22 "Loures"})\par
  114             res.push_back(v[i]);\par
  115     \}\par
  116     {\cf19 for}({\cf18 int} i=0; i<v.size(); i++)\{\par
  117         {\cf19 if}(v[i].getMorada().getLocalidade()=={\cf22 "Faro"})\par
  118             res.push_back(v[i]);\par
  119     \}\par
  120     {\cf19 for}({\cf18 int} i=0; i<v.size(); i++)\{\par
  121         {\cf19 if}(v[i].getMorada().getLocalidade()=={\cf22 "Loule"})\par
  122             res.push_back(v[i]);\par
  123     \}\par
  124     {\cf19 for}({\cf18 int} i=0; i<v.size(); i++)\{\par
  125         {\cf19 if}(v[i].getMorada().getLocalidade()=={\cf22 "Sao Bras de Alportel"})\par
  126             res.push_back(v[i]);\par
  127     \}\par
  128     {\cf19 return} res;\par
  129 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos dados membro\par
\pard\plain 
{\xe \v morada\:Restaurante}
{\xe \v Restaurante\:morada}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Morada} Restaurante::morada{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAJI}
{\bkmkend AAAAAAAAJI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A morada do {\b Restaurante}. }}\par
}
{\xe \v nome\:Restaurante}
{\xe \v Restaurante\:nome}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Restaurante::nome{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAJJ}
{\bkmkend AAAAAAAAJJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O nome do {\b Restaurante}. }}\par
}
{\xe \v pratos\:Restaurante}
{\xe \v Restaurante\:pratos}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
vector<{\b Prato}> Restaurante::pratos{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAJK}
{\bkmkend AAAAAAAAJK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O menu/conjunto de pratos do {\b Restaurante}. }}\par
}
{\xe \v tipos_de_culinaria\:Restaurante}
{\xe \v Restaurante\:tipos_de_culinaria}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
vector<string> Restaurante::tipos_de_culinaria{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAJL}
{\bkmkend AAAAAAAAJL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O conjunto de tipos de culin\'E1ria do {\b Restaurante}. }}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para esta classe foi gerada a partir dos seguintes ficheiros:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UgnEatsFoodDeliveryFinal3/{\b restaurante.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UgnEatsFoodDeliveryFinal3/{\b restaurante.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia \'E0 classe RestauranteInexistente\par \pard\plain 
{\tc\tcl2 \v RestauranteInexistente}
{\xe \v RestauranteInexistente}
{\bkmkstart AAAAAAAAJM}
{\bkmkend AAAAAAAAJM}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b RestauranteInexistente} representa uma exce\'E7\'E3o que \'E9 lan\'E7ada quando tenta aceder a um {\b Restaurante} que n\'E3o pertence \'E0 lista de restaurantes da base. }}\par
{
{\f2 #include <empresa.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b RestauranteInexistente} ({\b Restaurante} &r)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da Classe RestautanteInexistente. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Restaurante} * {\b restaurante}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O {\b Restaurante} Inexistente. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Amigos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
ostream & {\b operator<<} (ostream &out, const {\b RestauranteInexistente} &r)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Operador << para mensagem de erro que apanha o objeto lan\'E7ado pela exce\'E7\'E3o. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b RestauranteInexistente} representa uma exce\'E7\'E3o que \'E9 lan\'E7ada quando tenta aceder a um {\b Restaurante} que n\'E3o pertence \'E0 lista de restaurantes da base. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos Construtores & Destrutor\par
\pard\plain 
{\xe \v RestauranteInexistente\:RestauranteInexistente}
{\xe \v RestauranteInexistente\:RestauranteInexistente}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
RestauranteInexistente::RestauranteInexistente ({\b Restaurante} &  {\i r}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAJN}
{\bkmkend AAAAAAAAJN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da Classe RestautanteInexistente. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    56                                           \{\par
   57         restaurante=&r;\par
   58     \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das classes amigas e fun\'E7\'F5es relacionadas\par
\pard\plain 
{\xe \v operator<<\:RestauranteInexistente}
{\xe \v RestauranteInexistente\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
ostream& operator<< (ostream &  {\i out}, const {\b RestauranteInexistente} &  {\i r}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAJO}
{\bkmkend AAAAAAAAJO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Operador << para mensagem de erro que apanha o objeto lan\'E7ado pela exce\'E7\'E3o. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    60                                                                               \{\par
   61         out << {\cf22 "Esse restaurante nao pertence a nossa cadeia de fornecedores!"}<<endl;\par
   62         {\cf19 return} out;\par
   63     \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos dados membro\par
\pard\plain 
{\xe \v restaurante\:RestauranteInexistente}
{\xe \v RestauranteInexistente\:restaurante}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Restaurante}* RestauranteInexistente::restaurante}}
\par
{\bkmkstart AAAAAAAAJP}
{\bkmkend AAAAAAAAJP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O {\b Restaurante} Inexistente. }}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para esta classe foi gerada a partir do seguinte ficheiro:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UgnEatsFoodDeliveryFinal3/{\b empresa.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia \'E0 classe Veiculo\par \pard\plain 
{\tc\tcl2 \v Veiculo}
{\xe \v Veiculo}
{\bkmkstart AAAAAAAAJQ}
{\bkmkend AAAAAAAAJQ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class {\b Veiculo} representa um ve\'EDculo atraves da sua marca, do seu tipo e a sua data de aquisi\'E7\'E3o. }}\par
{
{\f2 #include <auxiliares.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros p\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Veiculo} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da Classe {\b Veiculo}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Veiculo} (string v)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constroi uma inst\'E2ncia da classe {\b Veiculo} recebendo uma string estruturada com o seu conteudo. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~Veiculo} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destrutor da Classe {\b Data}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const string & {\b getMarca} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setMarca} (const string &{\b marca})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const string & {\b getTipo} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setTipo} (const string &{\b tipo})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const string & {\b getDataDeAquisicao} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setDataDeAquisicao} (const string &dataDeAquisicao)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos Privados\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b marca}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A marca do Ve\'EDculo. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b tipo}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O tipo do Ve\'EDculo. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b data_de_aquisicao}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A data de aquisi\'E7\'E3o em string do Ve\'EDculo. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class {\b Veiculo} representa um ve\'EDculo atraves da sua marca, do seu tipo e a sua data de aquisi\'E7\'E3o. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos Construtores & Destrutor\par
\pard\plain 
{\xe \v Veiculo\:Veiculo}
{\xe \v Veiculo\:Veiculo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Veiculo::Veiculo ()}}
\par
{\bkmkstart AAAAAAAAJR}
{\bkmkend AAAAAAAAJR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da Classe {\b Veiculo}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   184 \{\}\par
}
}
{\xe \v Veiculo\:Veiculo}
{\xe \v Veiculo\:Veiculo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Veiculo::Veiculo (string  {\i v})}}
\par
{\bkmkstart AAAAAAAAJS}
{\bkmkend AAAAAAAAJS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constroi uma inst\'E2ncia da classe {\b Veiculo} recebendo uma string estruturada com o seu conteudo. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i d} \cell }{A string estruturada com o conteudo do Ve\'EDculo. \cell }
{\row }
}
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   185                          \{\par
  186     Data d;\par
  187     {\cf18 string} temp=  {\cf22 ""};\par
  188     vector<string> veiculo_temp;\par
  189     {\cf19 for} ({\cf18 size_t} i = 0; i <= v.length(); i++)\par
  190     \{\par
  191         {\cf19 if} (v[i] == {\cf23 ','} )\par
  192         \{\par
  193             i += 1;\par
  194             veiculo_temp.push_back(temp);\par
  195             temp = {\cf22 ""};\par
  196         \}\par
  197         {\cf19 else}\par
  198             temp += v[i];\par
  199     \}\par
  200     veiculo_temp.push_back(temp);\par
  201 \par
  202     this->marca = veiculo_temp[0];\par
  203     this->tipo= veiculo_temp[1];\par
  204     this->data_de_aquisicao = veiculo_temp[2];\par
  205 \par
  206 \}\par
}
}
{\xe \v ~Veiculo\:Veiculo}
{\xe \v Veiculo\:~Veiculo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Veiculo::~Veiculo (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAJT}
{\bkmkend AAAAAAAAJT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destrutor da Classe {\b Data}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   208                   \{\par
  209 \par
  210 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos m\'E9todos\par
\pard\plain 
{\xe \v getDataDeAquisicao\:Veiculo}
{\xe \v Veiculo\:getDataDeAquisicao}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string & Veiculo::getDataDeAquisicao () const}}
\par
{\bkmkstart AAAAAAAAJU}
{\bkmkend AAAAAAAAJU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   228                                                 \{\par
  229     {\cf19 return} data_de_aquisicao;\par
  230 \}\par
}
}
{\xe \v getMarca\:Veiculo}
{\xe \v Veiculo\:getMarca}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string & Veiculo::getMarca () const}}
\par
{\bkmkstart AAAAAAAAJV}
{\bkmkend AAAAAAAAJV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   212                                       \{\par
  213     {\cf19 return} marca;\par
  214 \}\par
}
}
{\xe \v getTipo\:Veiculo}
{\xe \v Veiculo\:getTipo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const string & Veiculo::getTipo () const}}
\par
{\bkmkstart AAAAAAAAJW}
{\bkmkend AAAAAAAAJW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   220                                      \{\par
  221     {\cf19 return} tipo;\par
  222 \}\par
}
}
{\xe \v setDataDeAquisicao\:Veiculo}
{\xe \v Veiculo\:setDataDeAquisicao}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Veiculo::setDataDeAquisicao (const string &  {\i dataDeAquisicao})}}
\par
{\bkmkstart AAAAAAAAJX}
{\bkmkend AAAAAAAAJX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   232                                                               \{\par
  233     data_de_aquisicao = dataDeAquisicao;\par
  234 \}\par
}
}
{\xe \v setMarca\:Veiculo}
{\xe \v Veiculo\:setMarca}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Veiculo::setMarca (const string &  {\i marca})}}
\par
{\bkmkstart AAAAAAAAJY}
{\bkmkend AAAAAAAAJY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   216                                           \{\par
  217     Veiculo::marca = marca;\par
  218 \}\par
}
}
{\xe \v setTipo\:Veiculo}
{\xe \v Veiculo\:setTipo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Veiculo::setTipo (const string &  {\i tipo})}}
\par
{\bkmkstart AAAAAAAAJZ}
{\bkmkend AAAAAAAAJZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   224                                         \{\par
  225     Veiculo::tipo = tipo;\par
  226 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos dados membro\par
\pard\plain 
{\xe \v data_de_aquisicao\:Veiculo}
{\xe \v Veiculo\:data_de_aquisicao}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Veiculo::data_de_aquisicao{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAKA}
{\bkmkend AAAAAAAAKA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A data de aquisi\'E7\'E3o em string do Ve\'EDculo. }}\par
}
{\xe \v marca\:Veiculo}
{\xe \v Veiculo\:marca}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Veiculo::marca{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAKB}
{\bkmkend AAAAAAAAKB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A marca do Ve\'EDculo. }}\par
}
{\xe \v tipo\:Veiculo}
{\xe \v Veiculo\:tipo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string Veiculo::tipo{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAKC}
{\bkmkend AAAAAAAAKC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
O tipo do Ve\'EDculo. }}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para esta classe foi gerada a partir dos seguintes ficheiros:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UgnEatsFoodDeliveryFinal3/{\b auxiliares.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
UgnEatsFoodDeliveryFinal3/{\b auxiliares.cpp}\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Documenta\'E7\'E3o do ficheiro{\tc \v Documenta\'E7\'E3o do ficheiro}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia ao ficheiro UgnEatsFoodDeliveryFinal3/auxiliares.cpp\par \pard\plain 
{\tc\tcl2 \v UgnEatsFoodDeliveryFinal3/auxiliares.cpp}
{\xe \v UgnEatsFoodDeliveryFinal3/auxiliares.cpp}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "auxiliares.h"}\par
{\f2 #include <fstream>}\par
{\f2 #include <string>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
vector< string > {\b tiposculinaria} (string tipos)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v tiposculinaria\:auxiliares.cpp}
{\xe \v auxiliares.cpp\:tiposculinaria}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
vector<string> tiposculinaria (string  {\i tipos})}}
\par
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    10                                            \{\par
   11     vector<string> tipos_temp;\par
   12     tipos_temp.push_back(tipos);\par
   13     {\cf19 return} tipos_temp;\par
   14 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia ao ficheiro UgnEatsFoodDeliveryFinal3/auxiliares.h\par \pard\plain 
{\tc\tcl2 \v UgnEatsFoodDeliveryFinal3/auxiliares.h}
{\xe \v UgnEatsFoodDeliveryFinal3/auxiliares.h}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <string>}\par
{\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Morada}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class {\b Morada} representa uma morada atraves da sua rua, localidade e numero. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Prato}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class {\b Prato} representa um prato atraves do seu nome, tipo de culin\'E1ria e o respetivo pre\'E7o. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Data}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class {\b Data} representa uma data atraves do dia, mes e ano. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Veiculo}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class {\b Veiculo} representa um ve\'EDculo atraves da sua marca, do seu tipo e a sua data de aquisi\'E7\'E3o. }}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
vector< string > {\b tiposculinaria} (string tipos)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v tiposculinaria\:auxiliares.h}
{\xe \v auxiliares.h\:tiposculinaria}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
vector<string> tiposculinaria (string  {\i tipos})}}
\par
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    10                                            \{\par
   11     vector<string> tipos_temp;\par
   12     tipos_temp.push_back(tipos);\par
   13     {\cf19 return} tipos_temp;\par
   14 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia ao ficheiro UgnEatsFoodDeliveryFinal3/cliente.cpp\par \pard\plain 
{\tc\tcl2 \v UgnEatsFoodDeliveryFinal3/cliente.cpp}
{\xe \v UgnEatsFoodDeliveryFinal3/cliente.cpp}
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "cliente.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia ao ficheiro UgnEatsFoodDeliveryFinal3/cliente.h\par \pard\plain 
{\tc\tcl2 \v UgnEatsFoodDeliveryFinal3/cliente.h}
{\xe \v UgnEatsFoodDeliveryFinal3/cliente.h}
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "auxiliares.h"}\par
{\f2 #include "empresa.h"}\par
{\f2 #include <string>}\par
{\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Cliente}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class {\b Cliente} representa um cliente atraves da sua {\b Morada}, nome, nif e {\b Base} pertencente. }}\par}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia ao ficheiro UgnEatsFoodDeliveryFinal3/empresa.cpp\par \pard\plain 
{\tc\tcl2 \v UgnEatsFoodDeliveryFinal3/empresa.cpp}
{\xe \v UgnEatsFoodDeliveryFinal3/empresa.cpp}
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "iostream"}\par
{\f2 #include "empresa.h"}\par
{\f2 #include "cliente.h"}\par
{\f2 #include "auxiliares.h"}\par
{\f2 #include <fstream>}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia ao ficheiro UgnEatsFoodDeliveryFinal3/empresa.h\par \pard\plain 
{\tc\tcl2 \v UgnEatsFoodDeliveryFinal3/empresa.h}
{\xe \v UgnEatsFoodDeliveryFinal3/empresa.h}
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "restaurante.h"}\par
{\f2 #include <iostream>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ClienteNaListaNegra}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b ClienteNaListaNegra} representa uma exce\'E7\'E3o que \'E9 lan\'E7ada quando um cliente pertence \'E0 Lista Negra da empresa (listanegra.txt). }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b FuncionarioInexistente}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b FuncionarioInexistente} representa uma exce\'E7\'E3o que \'E9 lan\'E7ada se tenta aceder a um funcionario que n\'E3o pertence \'E0 lista de funcionarios da base. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b RestauranteInexistente}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b RestauranteInexistente} representa uma exce\'E7\'E3o que \'E9 lan\'E7ada quando tenta aceder a um {\b Restaurante} que n\'E3o pertence \'E0 lista de restaurantes da base. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Encomenda}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b Encomenda} representa uma encomenda atrav\'E9s do nome do Restauranre, {\b Data} e hora da encomenda, nome do {\b Entregador} e {\b Cliente}, lista de pratos do menu encomendados, se a encomenda foi realizada com sucesso e se foi realizada dentro ou num concelho vizinho, e o pre\'E7o total da encomenda. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Funcionario}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b Funcionario} representa um funcion\'E1rio atrav\'E9s do seu nome e nif, da sua {\b Data} de nascimento, do seu Salario e do seu tipo(Entregador/Administrador). }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Administrador}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b Administrador} representa um funcion\'E1rio {\b Administrador} atrav\'E9s das suas caracteristicas enquanto Funcion\'E1rio, mais a sua fun\'E7\'E3o. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Entregador}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b Entregador} representa um funcion\'E1rio {\b Entregador} atrav\'E9s das suas caracter\'EDsticas enquanto Funcion\'E1rio, mais o seu Ve\'EDculo, um vetor de encomendas (classe {\b Encomenda}) feitas, e a sua disponibilidade. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Base}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b Base} representa uma {\b Base} da {\b Empresa} atrav\'E9s da sua {\b Morada}, conselho, coordenadas GPS, gerente, conjunto de Clientes, conjunto de Restaurantes e o conjunto de funcion\'E1rios dessa {\b Base}. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Empresa}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe {\b Empresa} representa a {\b Empresa} atrav\'E9s do conjunto de Bases (classe {\b Base}) que tem e um conjunto de encomendas feitas \'E0 empresa desde sempre. }}\par}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia ao ficheiro UgnEatsFoodDeliveryFinal3/main.cpp\par \pard\plain 
{\tc\tcl2 \v UgnEatsFoodDeliveryFinal3/main.cpp}
{\xe \v UgnEatsFoodDeliveryFinal3/main.cpp}
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
{\f2 #include "restaurante.h"}\par
{\f2 #include "cliente.h"}\par
{\f2 #include "auxiliares.h"}\par
{\f2 #include "empresa.h"}\par
{\f2 #include "fstream"}\par
{\f2 #include <algorithm>}\par
{\f2 #include <ctime>}\par
{\f2 #include <chrono>}\par
{\f2 #include <iomanip>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b mainmenu} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta o menu inicial. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b cliente} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta o menu "cliente" levando \'E0s respetivas funcionalidades - login e registo;. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b funcionario} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta o menu "funcion\'E1rio" levando \'E0s respetivas funcionalidades - {\b Administrador} e {\b Entregador}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b gestao} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta o menu "gest\'E3o" levando \'E0s respetivas funcionalidades. - Economia, adicionar e remover restaurante, ver diversas informa\'E7oes e lista de encomendas. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b login} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta o menu "login" levando \'E0s respetivas funcionalidades. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b eliminarRegisto} ({\b Cliente} c)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Elimina o registo de um cliente terminando o programa. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b registo} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta o menu "registo" levando \'E0s respetivas funcionalidades. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b informacaoCliente} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta a informa\'E7\'E3o de um cliente. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b procurarRestaurante} ({\b Cliente} c)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta o menu "Procurar Restaurante" que permite ver uma lista de restaurantes ordenados de diferentes formas. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b fazerEncomenda} ({\b Restaurante} r, {\b Cliente} c)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Realiza uma encomenda. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b addRest} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Adiciona restaurantes a uma base. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b removeRest} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove restaurantes de uma base. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b addFunc} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Adiciona funcion\'E1rios a uma base. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b removeFunc} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove Funcion\'E1rios de uma base. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b verFunc} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta de forma organizada a informa\'E7\'E3o de um funcion\'E1rio. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b verRest} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta de forma organizada a informa\'E7\'E3o de um {\b Restaurante}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b verClientes} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta de forma organizada a informa\'E7\'E3o de um {\b Cliente}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b verEncomendas} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta de forma organizada a informa\'E7\'E3o das Encomendas Realizadas. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b economia} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta a informa\'E7\'E3o relacionada \'E0 economia/lucro da empresa. Podem ser procuradas por {\b Base}, {\b Restaurante}, ou {\b Entregador}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b listaEncomendas} ({\b Funcionario} &f)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta a informa\'E7\'E3o relacionada \'E0 economia/lucro da empresa,. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b informacaoCliente} ({\b Cliente} c)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v addFunc\:main.cpp}
{\xe \v main.cpp\:addFunc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void addFunc ()}}
\par
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Adiciona funcion\'E1rios a uma base. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1159                \{\par
 1160     cout << {\cf22 "Selecionou -Adicionar um funcionario-\\n"};\par
 1161     cout << {\cf22 "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\n"};\par
 1162     cout << {\cf22 "                         UghEats Food Delivery                                    "};\par
 1163     cout << {\cf22 "\\n\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n"};\par
 1164     cout << {\cf22 "A que base quer adicionar o funcionario? \\n"};\par
 1165     cout << {\cf22 "\{1\} - Porto\\n"};\par
 1166     cout << {\cf22 "\{2\} - Lisboa\\n"};\par
 1167     cout << {\cf22 "\{3\} - Faro\\n"};\par
 1168     cout << {\cf22 "Prima \{0\} para valtar atras!\\n"};\par
 1169     {\cf18 int} base;\par
 1170     cin >> base;\par
 1171 \par
 1172     Base b;\par
 1173     {\cf19 switch} (base) \{\par
 1174         {\cf19 case} 0:\par
 1175             exit;\par
 1176             {\cf19 break};\par
 1177     \}\par
 1178     {\cf19 if} (base == 1) b = Base({\cf22 "porto.txt"});\par
 1179     {\cf19 else} {\cf19 if} (base == 2) b = Base({\cf22 "lisboa.txt"});\par
 1180     {\cf19 else} {\cf19 if} (base == 3) b = Base({\cf22 "faro.txt"});\par
 1181     {\cf19 else} cout << {\cf22 "Opcao Invalida!\\n"};\par
 1182     cout << {\cf22 "Pretende adicionar:"} << endl;\par
 1183     cout << {\cf22 "\{1\} - Administrador"} << endl;\par
 1184     cout << {\cf22 "\{2\} - Entregador"} << endl;\par
 1185     {\cf18 int} op1;\par
 1186     cin >> op1;\par
 1187     {\cf19 switch} (op1) \{\par
 1188         {\cf19 case} 0:\par
 1189             exit;\par
 1190             {\cf19 break};\par
 1191     \}\par
 1192 \par
 1193     {\cf19 if} (op1 == 1) \{\par
 1194         b.addAdmin();\par
 1195     \} {\cf19 else} {\cf19 if} (op1 == 2) \{\par
 1196         b.addEntreg();\par
 1197     \} {\cf19 else}\{\par
 1198         cout << {\cf22 "Opcao invalida!"} << endl;\par
 1199         system({\cf22 "pause"});\par
 1200 \par
 1201     \}\par
 1202 \par
 1203 \par
 1204 \}\par
}
}
{\xe \v addRest\:main.cpp}
{\xe \v main.cpp\:addRest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void addRest ()}}
\par
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Adiciona restaurantes a uma base. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1041               \{\par
 1042     {\cf18 bool} exit={\cf17 false};\par
 1043     {\cf19 while}(!exit) \{\par
 1044         {\cf19 if}(exit) {\cf19 break};\par
 1045         cout << {\cf22 "Selecionou -Adicionar um restaurante-\\n"};\par
 1046         cout << {\cf22 "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\n"};\par
 1047         cout << {\cf22 "                         UghEats Food Delivery                                    "};\par
 1048         cout << {\cf22 "\\n\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n"};\par
 1049         cout << {\cf22 "Em que base pretende registar o restaurante? \\n"};\par
 1050         cout << {\cf22 "\{1\} - Porto\\n"};\par
 1051         cout << {\cf22 "\{2\} - Lisboa\\n"};\par
 1052         cout << {\cf22 "\{3\} - Faro\\n"};\par
 1053         cout << {\cf22 "Prima \{0\} para voltar atras!\\n"};\par
 1054         {\cf18 int} base;\par
 1055         cin >> base;\par
 1056         Base b;\par
 1057         {\cf19 switch}(base)\{\par
 1058             {\cf19 case} 0:\par
 1059                 exit={\cf17 true};\par
 1060                 {\cf19 break};\par
 1061         \}\par
 1062         {\cf19 if}(!exit) \{\par
 1063             {\cf19 if} (base == 1) \{\par
 1064                 b = Base({\cf22 "porto.txt"});\par
 1065             \}\par
 1066             {\cf19 else} {\cf19 if} (base == 2) \{\par
 1067                 b = Base({\cf22 "lisboa.txt"});\par
 1068             \}\par
 1069             {\cf19 else} {\cf19 if} (base == 3) \{\par
 1070                 b = Base({\cf22 "faro.txt"});\par
 1071             \} {\cf19 else} \{\par
 1072                 cout << {\cf22 "Opcao Invalida!"} << endl;\par
 1073                 system({\cf22 "pause"});\par
 1074             \}\par
 1075             b.restaurantes_readfile();\par
 1076             b.addRestaurante();\par
 1077             system({\cf22 "pause"});\par
 1078         \}\par
 1079 \par
 1080 \par
 1081     \}\par
 1082 \par
 1083 \}\par
}
}
{\xe \v cliente\:main.cpp}
{\xe \v main.cpp\:cliente}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void cliente ()}}
\par
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta o menu "cliente" levando \'E0s respetivas funcionalidades - login e registo;. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   118                \{\par
  119     {\cf18 bool} exit = {\cf17 false};\par
  120     {\cf19 while} (!exit) \{\par
  121         {\cf18 char} op;\par
  122         {\cf19 do} \{\par
  123             cout << {\cf22 "Selecionou -Cliente-\\n"};\par
  124             cout << {\cf22 "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\n"};\par
  125             cout << {\cf22 "                          UghEats Food Delivery                                    "};\par
  126             cout << {\cf22 "\\n\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n"};\par
  127             cout << {\cf22 "Selecione uma opcao: \\n"};\par
  128             cout << {\cf22 "\{1\} - Log in \\n"};\par
  129             cout << {\cf22 "\{2\} - Registo \\n"};\par
  130             cout << {\cf22 "Prima \{0\} para voltar atras!\\n"};\par
  131             cin >> op;\par
  132             {\cf19 switch} (op) \{\par
  133                 {\cf19 case} {\cf23 '1'}:\par
  134                     login();\par
  135                     {\cf19 break};\par
  136                 {\cf19 case} {\cf23 '2'}:\par
  137                     registo();\par
  138                     {\cf19 break};\par
  139                 {\cf19 case} {\cf23 '0'}:\par
  140                     exit = {\cf17 true};\par
  141                     {\cf19 break};\par
  142                 {\cf19 default}:\par
  143                     cout << {\cf22 "Opcao Invalida! \\n"};\par
  144             \}\par
  145         \} {\cf19 while} (!isdigit((op)));\par
  146     \}\par
  147 \}\par
}
}
{\xe \v economia\:main.cpp}
{\xe \v main.cpp\:economia}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void economia ()}}
\par
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta a informa\'E7\'E3o relacionada \'E0 economia/lucro da empresa. Podem ser procuradas por {\b Base}, {\b Restaurante}, ou {\b Entregador}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  2299                \{\par
 2300     {\cf18 bool} exit={\cf17 false};\par
 2301     {\cf18 bool} exit2={\cf17 false};\par
 2302     {\cf19 while}(!exit) \{\par
 2303         cout << {\cf22 "Selecionou -Econimia-\\n"};\par
 2304         cout << {\cf22 "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\n"};\par
 2305         cout << {\cf22 "                         UghEats Food Delivery                                    "};\par
 2306         cout << {\cf22 "\\n\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n"};\par
 2307         cout << {\cf22 "Ver lucro da empresa por: \\n"};\par
 2308         cout << {\cf22 "\{1\} - Base\\n"};\par
 2309         cout << {\cf22 "\{2\} - Cliente\\n"};\par
 2310         cout << {\cf22 "\{3\} - Restaurante\\n"};\par
 2311         cout << {\cf22 "\{4\} - Mes\\n"};\par
 2312         cout << {\cf22 "\{5\} - Geral\\n"};\par
 2313         cout << {\cf22 "Prima \{0\} para voltar atras!\\n"};\par
 2314         {\cf18 int} op;\par
 2315         cin >> op;\par
 2316         {\cf19 switch} (op) \{\par
 2317             {\cf19 case} 0:\par
 2318                 exit = {\cf17 true};\par
 2319                 {\cf19 break};\par
 2320         \}\par
 2321         {\cf19 if} (!exit) \{\par
 2322             {\cf19 if} (op == 1) \{\par
 2323                 cout << {\cf22 "Selecionou -Ver lucro da empresa por base-\\n"};\par
 2324                 cout << {\cf22 "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\n"};\par
 2325                 cout << {\cf22 "                         UghEats Food Delivery                                    "};\par
 2326                 cout << {\cf22 "\\n\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n"};\par
 2327                 cout << {\cf22 "Ver lucro da base: \\n"};\par
 2328                 cout << {\cf22 "\{1\} - Porto\\n"};\par
 2329                 cout << {\cf22 "\{2\} - Lisboa\\n"};\par
 2330                 cout << {\cf22 "\{3\} - Faro\\n"};\par
 2331                 cout << {\cf22 "Prima \{0\} para voltar atras!\\n"};\par
 2332                 {\cf18 int} op2;\par
 2333                 cin >> op2;\par
 2334                 {\cf19 switch} (op2) \{\par
 2335                     {\cf19 case} 0:\par
 2336                         exit2 = {\cf17 true};\par
 2337                         {\cf19 break};\par
 2338                 \}\par
 2339                 {\cf18 double} soma = 0.0;\par
 2340                 {\cf19 if} (!exit2) \{\par
 2341                     {\cf19 if} (op2 == 1) \{\par
 2342                         {\cf18 double} soma = 0.0;\par
 2343                         Base b;\par
 2344                         Empresa e;\par
 2345                         e.encomendas_readfile();\par
 2346                         b = Base({\cf22 "porto.txt"});\par
 2347                         cout << {\cf22 "Lucro da base do Porto: "} << endl;\par
 2348                         b.restaurantes_readfile();\par
 2349 \par
 2350                         {\cf19 for} ({\cf18 int} i = 0; i < b.getRestaurantes().size(); i++) \{\par
 2351                             {\cf19 for} ({\cf18 int} j = i; j < e.getEncomendas().size(); j++) \{\par
 2352                                 {\cf19 if} (b.getRestaurantes()[i].getNome() == e.getEncomendas()[j].getRestauranteNome()) \{\par
 2353                                     soma += e.getEncomendas()[j].getPreco();\par
 2354                                 \}\par
 2355                             \}\par
 2356                         \}\par
 2357                         cout << soma << endl;\par
 2358                     \} {\cf19 else} {\cf19 if} (op2 == 2) \{\par
 2359                         Base b;\par
 2360                         Empresa e;\par
 2361                         e.encomendas_readfile();\par
 2362                         b = Base({\cf22 "lisboa.txt"});\par
 2363                         cout << {\cf22 "Lucro da base de Lisboa: "} << endl;\par
 2364                         cout << endl;\par
 2365                         b.restaurantes_readfile();\par
 2366 \par
 2367                         {\cf19 for} ({\cf18 int} i = 0; i < b.getRestaurantes().size(); i++) \{\par
 2368                             {\cf19 for} ({\cf18 int} j = i; i < e.getEncomendas().size(); j++) \{\par
 2369                                 {\cf19 if} (b.getRestaurantes()[i].getNome() == e.getEncomendas()[j].getRestauranteNome()) \{\par
 2370                                     soma += e.getEncomendas()[j].getPreco();\par
 2371 \par
 2372                                 \}\par
 2373                             \}\par
 2374 \par
 2375                         \}\par
 2376                         cout << soma << endl;\par
 2377                     \} {\cf19 else} {\cf19 if} (op2 == 3) \{\par
 2378                         Base b;\par
 2379                         Empresa e;\par
 2380                         e.encomendas_readfile();\par
 2381                         b = Base({\cf22 "faro.txt"});\par
 2382                         cout << {\cf22 "Lucro da base de Faro: "} << endl;\par
 2383                         cout << endl;\par
 2384                         b.restaurantes_readfile();\par
 2385 \par
 2386                         {\cf19 for} ({\cf18 int} i = 0; i < b.getRestaurantes().size(); i++) \{\par
 2387                             {\cf19 for} ({\cf18 int} j = i; i < e.getEncomendas().size(); j++) \{\par
 2388                                 {\cf19 if} (b.getRestaurantes()[i].getNome() == e.getEncomendas()[j].getRestauranteNome()) \{\par
 2389                                     soma += e.getEncomendas()[j].getPreco();\par
 2390 \par
 2391 \par
 2392                                 \}\par
 2393                             \}\par
 2394 \par
 2395                         \}\par
 2396                         cout << soma << endl;\par
 2397                     \}\par
 2398                     system({\cf22 "pause"});\par
 2399                 \}\par
 2400 \par
 2401             \} {\cf19 else} {\cf19 if} (op == 2) \{\par
 2402                 cout << {\cf22 "Selecionou -Ver lucro da empresa por cliente-\\n"};\par
 2403                 cout << {\cf22 "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\n"};\par
 2404                 cout << {\cf22 "                         UghEats Food Delivery                                    "};\par
 2405                 cout << {\cf22 "\\n\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n"};\par
 2406                 cout << {\cf22 "Clientes que ja efetuaram uma ou mais encomendas:"} << endl;\par
 2407                 Empresa e;\par
 2408                 e.encomendas_readfile();\par
 2409                 vector<string> n;\par
 2410                 {\cf19 for} ({\cf18 int} j = 0; j < e.getEncomendas().size() ; j++) \{\par
 2411                     cout << {\cf22 "\{"} << j + 1 << {\cf22 "\} - "} << e.getEncomendas()[j].getClienteNome() << endl;\par
 2412                 \}\par
 2413 \par
 2414                 cout << {\cf22 "Prima \{0\} para voltar atras!"} << endl;\par
 2415                 {\cf18 int} op2;\par
 2416                 cin >> op2;\par
 2417                 {\cf19 switch} (op2) \{\par
 2418                     {\cf19 case} 0:\par
 2419                         exit2 = {\cf17 true};\par
 2420                         {\cf19 break};\par
 2421                 \}\par
 2422                 {\cf18 double} soma = 0.0;\par
 2423                 {\cf19 if} (!exit2) \{\par
 2424                     {\cf19 for} ({\cf18 int} j = 0; j < e.getEncomendas().size(); j++) \{\par
 2425                         {\cf19 if} (e.getEncomendas()[op2 - 1].getClienteNome() == e.getEncomendas()[j].getClienteNome()) \{\par
 2426                             soma += e.getEncomendas()[j].getPreco();\par
 2427                         \}\par
 2428                     \}\par
 2429                     cout << {\cf22 "O/A cliente "} << e.getEncomendas()[op2 - 1].getClienteNome() << {\cf22 " gastou um total de "}\par
 2430                          << soma << {\cf22 " euros."} << endl;\par
 2431                     cout << {\cf22 "Prima \{0\} para voltar atras!"} << endl;\par
 2432                     system({\cf22 "pause"});\par
 2433                 \}\par
 2434             \} {\cf19 else} {\cf19 if} (op == 3) \{\par
 2435                 cout << {\cf22 "Selecionou -Ver lucro da empresa por restaurante-\\n"};\par
 2436                 cout << {\cf22 "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\n"};\par
 2437                 cout << {\cf22 "                         UghEats Food Delivery                                    "};\par
 2438                 cout << {\cf22 "\\n\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n"};\par
 2439                 cout << {\cf22 "Restaurantes com encomendas realizadas:"} << endl;\par
 2440                 Empresa e;\par
 2441                 e.encomendas_readfile();\par
 2442                 {\cf19 for} ({\cf18 int} j = 0; j < e.getEncomendas().size(); j++) \{\par
 2443                     cout << {\cf22 "\{"} << j + 1 << {\cf22 "\} - "} << e.getEncomendas()[j].getRestauranteNome() << endl;\par
 2444                 \}\par
 2445                 cout << {\cf22 "Prima \{0\} para voltar atras!"} << endl;\par
 2446                 {\cf18 int} op2;\par
 2447                 cin >> op2;\par
 2448                 {\cf19 switch} (op2) \{\par
 2449                     {\cf19 case} 0:\par
 2450                         exit2 = {\cf17 true};\par
 2451                         {\cf19 break};\par
 2452                 \}\par
 2453                 {\cf18 double} soma = 0.0;\par
 2454                 {\cf19 if} (!exit2) \{\par
 2455                     {\cf19 for} ({\cf18 int} j = 0; j < e.getEncomendas().size(); j++) \{\par
 2456                         {\cf19 if} (e.getEncomendas()[op2 - 1].getRestauranteNome() ==\par
 2457                             e.getEncomendas()[j].getRestauranteNome()) \{\par
 2458                             soma += e.getEncomendas()[j].getPreco();\par
 2459                         \}\par
 2460                     \}\par
 2461                     cout << {\cf22 "O restaurante "} << e.getEncomendas()[op2 - 1].getRestauranteNome()\par
 2462                          << {\cf22 " fez um total de "} << soma << {\cf22 " euros em encomendas."} << endl;\par
 2463                     system({\cf22 "pause"});\par
 2464                 \}\par
 2465 \par
 2466 \par
 2467             \} {\cf19 else} {\cf19 if} (op == 4) \{\par
 2468                 cout << {\cf22 "Selecionou -Ver lucro da empresa por mes-\\n"};\par
 2469                 cout << {\cf22 "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\n"};\par
 2470                 cout << {\cf22 "                         UghEats Food Delivery                                    "};\par
 2471                 cout << {\cf22 "\\n\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n"};\par
 2472                 {\cf18 int} op2;\par
 2473                 {\cf18 double} somaj = 0.0;\par
 2474                 {\cf18 double} somaf = 0.0;\par
 2475                 {\cf18 double} somam = 0.0;\par
 2476                 {\cf18 double} somaa = 0.0;\par
 2477                 {\cf18 double} somamai = 0.0;\par
 2478                 {\cf18 double} somajun = 0.0;\par
 2479                 {\cf18 double} somajul = 0.0;\par
 2480                 {\cf18 double} somaag = 0.0;\par
 2481                 {\cf18 double} somas = 0.0;\par
 2482                 {\cf18 double} somao = 0.0;\par
 2483                 {\cf18 double} soman = 0.0;\par
 2484                 {\cf18 double} somad = 0.0;\par
 2485                 {\cf19 if} (!exit2) \{\par
 2486                     Empresa e;\par
 2487                     e.encomendas_readfile();\par
 2488 \par
 2489                     {\cf19 for} ({\cf18 int} j = 0; j < e.getEncomendas().size(); j++) \{\par
 2490                         {\cf19 if} (e.getEncomendas()[j].getData().getMes() == 1) \{\par
 2491                             somaj += e.getEncomendas()[j].getPreco();\par
 2492                         \}\par
 2493                     \}\par
 2494                     cout << {\cf22 "No mes de janeiro, fez-se um total de "} << somaj << {\cf22 " euros em encomendas."} << endl;\par
 2495                     {\cf19 for} ({\cf18 int} j = 0; j < e.getEncomendas().size(); j++) \{\par
 2496                         {\cf19 if} (e.getEncomendas()[j].getData().getMes() == 2) \{\par
 2497                             somaf += e.getEncomendas()[j].getPreco();\par
 2498                         \}\par
 2499                     \}\par
 2500                     cout << {\cf22 "No mes de janeiro, fez-se um total de "} << somaf << {\cf22 " euros em encomendas."} << endl;\par
 2501                     {\cf19 for} ({\cf18 int} j = 0; j < e.getEncomendas().size(); j++) \{\par
 2502                         {\cf19 if} (e.getEncomendas()[j].getData().getMes() == 3) \{\par
 2503                             somam += e.getEncomendas()[j].getPreco();\par
 2504                         \}\par
 2505                     \}\par
 2506                     cout << {\cf22 "No mes de marco, fez-se um total de "} << somam << {\cf22 " euros em encomendas."} << endl;\par
 2507                     {\cf19 for} ({\cf18 int} j = 0; j < e.getEncomendas().size(); j++) \{\par
 2508                         {\cf19 if} (e.getEncomendas()[j].getData().getMes() == 4) \{\par
 2509                             somaa += e.getEncomendas()[j].getPreco();\par
 2510                         \}\par
 2511                     \}\par
 2512                     cout << {\cf22 "No mes de abril, fez-se um total de "} << somaa << {\cf22 " euros em encomendas."} << endl;\par
 2513                     {\cf19 for} ({\cf18 int} j = 0; j < e.getEncomendas().size(); j++) \{\par
 2514                         {\cf19 if} (e.getEncomendas()[j].getData().getMes() == 5) \{\par
 2515                             somamai += e.getEncomendas()[j].getPreco();\par
 2516                         \}\par
 2517                     \}\par
 2518                     cout << {\cf22 "No mes de maio, fez-se um total de "} << somamai << {\cf22 " euros em encomendas."} << endl;\par
 2519                     {\cf19 for} ({\cf18 int} j = 0; j < e.getEncomendas().size(); j++) \{\par
 2520                         {\cf19 if} (e.getEncomendas()[j].getData().getMes() == 6) \{\par
 2521                             somajun += e.getEncomendas()[j].getPreco();\par
 2522                         \}\par
 2523                     \}\par
 2524                     cout << {\cf22 "No mes de junho, fez-se um total de "} << somajun << {\cf22 " euros em encomendas."} << endl;\par
 2525                     {\cf19 for} ({\cf18 int} j = 0; j < e.getEncomendas().size(); j++) \{\par
 2526                         {\cf19 if} (e.getEncomendas()[j].getData().getMes() == 7) \{\par
 2527                             somajul += e.getEncomendas()[j].getPreco();\par
 2528                         \}\par
 2529                     \}\par
 2530                     cout << {\cf22 "No mes de julho, fez-se um total de "} << somajul << {\cf22 " euros em encomendas."} << endl;\par
 2531                     {\cf19 for} ({\cf18 int} j = 0; j < e.getEncomendas().size(); j++) \{\par
 2532                         {\cf19 if} (e.getEncomendas()[j].getData().getMes() == 8) \{\par
 2533                             somaag += e.getEncomendas()[j].getPreco();\par
 2534                         \}\par
 2535                     \}\par
 2536                     cout << {\cf22 "No mes de agosto, fez-se um total de "} << somaag << {\cf22 " euros em encomendas."} << endl;\par
 2537                     {\cf19 for} ({\cf18 int} j = 0; j < e.getEncomendas().size(); j++) \{\par
 2538                         {\cf19 if} (e.getEncomendas()[j].getData().getMes() == 9) \{\par
 2539                             somas += e.getEncomendas()[j].getPreco();\par
 2540                         \}\par
 2541                     \}\par
 2542                     cout << {\cf22 "No mes de setembro, fez-se um total de "} << somas << {\cf22 " euros em encomendas."} << endl;\par
 2543                     {\cf19 for} ({\cf18 int} j = 0; j < e.getEncomendas().size(); j++) \{\par
 2544                         {\cf19 if} (e.getEncomendas()[j].getData().getMes() == 10) \{\par
 2545                             somao += e.getEncomendas()[j].getPreco();\par
 2546                         \}\par
 2547                     \}\par
 2548                     cout << {\cf22 "No mes de outubro, fez-se um total de "} << somao << {\cf22 " euros em encomendas."} << endl;\par
 2549                     {\cf19 for} ({\cf18 int} j = 0; j < e.getEncomendas().size(); j++) \{\par
 2550                         {\cf19 if} (e.getEncomendas()[j].getData().getMes() == 11) \{\par
 2551                             soman += e.getEncomendas()[j].getPreco();\par
 2552                         \}\par
 2553                     \}\par
 2554                     cout << {\cf22 "No mes de novembro, fez-se um total de "} << soman << {\cf22 " euros em encomendas."} << endl;\par
 2555                     {\cf19 for} ({\cf18 int} j = 0; j < e.getEncomendas().size(); j++) \{\par
 2556                         {\cf19 if} (e.getEncomendas()[j].getData().getMes() == 12) \{\par
 2557                             somad += e.getEncomendas()[j].getPreco();\par
 2558                         \}\par
 2559                     \}\par
 2560                     cout << {\cf22 "No mes de dezembro, fez-se um total de "} << somad << {\cf22 " euros em encomendas."} << endl;\par
 2561                     system({\cf22 "pause"});\par
 2562                 \}\par
 2563 \par
 2564 \par
 2565             \} {\cf19 else} {\cf19 if} (op == 5) \{\par
 2566                 cout << {\cf22 "Selecionou -Ver lucro geral da empresa-\\n"};\par
 2567                 cout << {\cf22 "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\n"};\par
 2568                 cout << {\cf22 "                         UghEats Food Delivery                                    "};\par
 2569                 cout << {\cf22 "\\n\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n"};\par
 2570                 {\cf19 if} (!exit2) \{\par
 2571                     {\cf18 double} soma = 0.0;\par
 2572                     Empresa e;\par
 2573                     e.encomendas_readfile();\par
 2574                     {\cf19 for} ({\cf18 int} j = 0; j < e.getEncomendas().size(); j++) \{\par
 2575                         soma += e.getEncomendas()[j].getPreco();\par
 2576                     \}\par
 2577                     cout << {\cf22 "A empresa obteve ate hoje um total de "} << soma << {\cf22 " euros em encomendas."}<<endl;\par
 2578                     system({\cf22 "pause"});\par
 2579                 \}\par
 2580             \} {\cf19 else} cout << {\cf22 "Opcao Invalida!"} << endl;\par
 2581 \par
 2582         \}\par
 2583     \}\par
 2584 \}\par
}
}
{\xe \v eliminarRegisto\:main.cpp}
{\xe \v main.cpp\:eliminarRegisto}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void eliminarRegisto ({\b Cliente}  {\i c})}}
\par
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Elimina o registo de um cliente terminando o programa. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   287                                \{\par
  288     Base b= c.getBase();\par
  289     b.removeCliente(c);\par
  290     cout<<{\cf22 "Ja nao e cliente da Ugh Eats Delivery!"}<<endl;\par
  291     exit(0);\par
  292 \}\par
}
}
{\xe \v fazerEncomenda\:main.cpp}
{\xe \v main.cpp\:fazerEncomenda}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void fazerEncomenda ({\b Restaurante}  {\i r}, {\b Cliente}  {\i c})}}
\par
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Realiza uma encomenda. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   577                                             \{\par
  578     Encomenda e;\par
  579     e.setRestauranteNome(r.getNome());\par
  580     e.setClienteNome(c.getName());\par
  581 \par
  582     {\cf18 int} op;\par
  583     {\cf18 char} op1;\par
  584     cout << {\cf22 "Selecionou -Fazer uma encomenda- Restaurante: "}<<r.getNome()<<endl;\par
  585     cout << {\cf22 "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\n"};\par
  586     cout << {\cf22 "                         UghEats Food Delivery                                    "};\par
  587     cout << {\cf22 "\\n\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n"};\par
  588     vector<Prato> encomendas;\par
  589     {\cf19 do} \{\par
  590         cout << {\cf22 "Menu: "} << endl;\par
  591         {\cf19 for} ({\cf18 int} i = 0; i < r.getPratos().size(); i++) \{\par
  592             cout << {\cf22 "\{"} << i + 1 << {\cf22 "\} - "} << r.getPratos()[i].getNome() << fixed << setprecision(2) << {\cf22 " - Preco: "} << r.getPratos()[i].getPreco()\par
  593                  << endl;\par
  594         \}\par
  595         cout << {\cf22 "Selecione o prato que pretende encomendar"} << endl;\par
  596         cin >> op;\par
  597         encomendas.push_back(r.getPratos()[op-1]);\par
  598         cout << {\cf22 "Deseja encomendar outro prato? s/n"} << endl;\par
  599         cin >> op1;\par
  600     \}{\cf19 while}(op1!={\cf23 'n'});\par
  601     {\cf18 string} stringDePratos;\par
  602     {\cf19 for}({\cf18 int} i=0; i<encomendas.size()-1; i++)\{\par
  603         stringDePratos+=encomendas[i].getNome()+{\cf22 ", "};\par
  604     \}\par
  605     stringDePratos+=encomendas[encomendas.size()-1].getNome();\par
  606     e.setPratosNome(stringDePratos);\par
  607     cout<<{\cf22 "A verificar se existem entregadores disponiveis perto de si..."}<<endl;\par
  608     c.getBase().funcionarios_readfile();\par
  609     {\cf18 bool} existe={\cf17 false};\par
  610     Funcionario *f={\cf17 new} Entregador;\par
  611     {\cf19 for}({\cf18 int} i=0; i<c.getBase().getFuncionarios().size(); i++) \{\par
  612         {\cf19 if}(c.getBase().getFuncionarios()[i]->getTipoDeFuncionario() == {\cf22 "Entregador"}) \{\par
  613             {\cf19 if} (c.getBase().getFuncionarios()[i]->isDisponivel()) \{\par
  614                 existe = {\cf17 true};\par
  615                 f = c.getBase().getFuncionarios()[i];\par
  616                 {\cf20 //c.getBase().getFuncionarios()[i]->setDisponivel(false);}\par
  617                 {\cf19 break};\par
  618             \}\par
  619         \}\par
  620     \}\par
  621     ofstream file;\par
  622     file.open(c.getBase().getFuncionariosFileName());\par
  623     {\cf19 for} ({\cf18 int} i = 0; i < c.getBase().getFuncionarios().size()-1; i++) \{\par
  624         {\cf19 if}(c.getBase().getFuncionarios()[i]->getTipoDeFuncionario()=={\cf22 "Administrador"}) \{\par
  625             file << {\cf22 "Administrador"} << endl;\par
  626             file << c.getBase().getFuncionarios()[i]->getNome() << endl;\par
  627             file << c.getBase().getFuncionarios()[i]->getNif() << endl;\par
  628             file << to_string(c.getBase().getFuncionarios()[i]->getData().getDia()) + {\cf22 "/"} +\par
  629                     to_string(c.getBase().getFuncionarios()[i]->getData().getMes()) + {\cf22 "/"} +\par
  630                     to_string(c.getBase().getFuncionarios()[i]->getData().getAno()) << endl;\par
  631             file << to_string(c.getBase().getFuncionarios()[i]->getSalario()) << endl;\par
  632             file << c.getBase().getFuncionarios()[i]->getFuncao() << endl;\par
  633             file << {\cf22 ":::::"} << endl;\par
  634         \}{\cf19 else} {\cf19 if}(c.getBase().getFuncionarios()[i]->getTipoDeFuncionario()=={\cf22 "Entregador"})\{\par
  635             file << {\cf22 "Entregador"} << endl;\par
  636             file << c.getBase().getFuncionarios()[i]->getNome() << endl;\par
  637             file << c.getBase().getFuncionarios()[i]->getNif() << endl;\par
  638             file << to_string(c.getBase().getFuncionarios()[i]->getData().getDia()) + {\cf22 "/"} +\par
  639                     to_string(c.getBase().getFuncionarios()[i]->getData().getMes()) + {\cf22 "/"} +\par
  640                     to_string(c.getBase().getFuncionarios()[i]->getData().getAno()) << endl;\par
  641             file << to_string(c.getBase().getFuncionarios()[i]->getSalario()) << endl;\par
  642             file << c.getBase().getFuncionarios()[i]->getVeiculoAlocado().getMarca()+{\cf22 ", "}+c.getBase().getFuncionarios()[i]->getVeiculoAlocado().getTipo()+{\cf22 ", "}+c.getBase().getFuncionarios()[i]->getVeiculoAlocado().getDataDeAquisicao() << endl;\par
  643             {\cf19 if}(c.getBase().getFuncionarios()[i]->isDisponivel())\{\par
  644                 file<<{\cf22 "1"}<<endl;\par
  645             \}{\cf19 else}\{\par
  646                 file<<{\cf22 "0"}<<endl;\par
  647             \}\par
  648 \par
  649             file << {\cf22 ":::::"} << endl;\par
  650         \}\par
  651     \}\par
  652     {\cf19 if}(c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getTipoDeFuncionario()=={\cf22 "Administrador"}) \{\par
  653         file << {\cf22 "Administrador"} << endl;\par
  654         file << c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getNome() << endl;\par
  655         file << c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getNif() << endl;\par
  656         file << to_string(c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getData().getDia()) + {\cf22 "/"} +\par
  657                 to_string(c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getData().getMes()) + {\cf22 "/"} +\par
  658                 to_string(c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getData().getAno()) << endl;\par
  659         file << to_string(c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getSalario()) << endl;\par
  660         file << c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getFuncao() << endl;\par
  661     \}{\cf19 else} {\cf19 if}(c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getTipoDeFuncionario()=={\cf22 "Entregador"})\{\par
  662         file << {\cf22 "Entregador"} << endl;\par
  663         file << c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getNome() << endl;\par
  664         file << c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getNif() << endl;\par
  665         file << to_string(c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getData().getDia()) + {\cf22 "/"} +\par
  666                 to_string(c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getData().getMes()) + {\cf22 "/"} +\par
  667                 to_string(c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getData().getAno()) << endl;\par
  668         file << to_string(c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getSalario()) << endl;\par
  669         file <<c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getVeiculoAlocado().getMarca()+{\cf22 ", "}+c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getVeiculoAlocado().getTipo()+{\cf22 ", "}+c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getVeiculoAlocado().getDataDeAquisicao() << endl;\par
  670         {\cf19 if}(c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->isDisponivel())\{\par
  671             file<<{\cf22 "1"}<<endl;\par
  672         \}{\cf19 else}\{\par
  673             file<<{\cf22 "0"}<<endl;\par
  674         \}\par
  675     \}\par
  676     {\cf19 if}(existe)\{\par
  677         e.setEntregadorNome(f->getNome());\par
  678         cout<<endl;\par
  679         cout<<{\cf22 "DADOS DA ENTREGA"}<<endl;\par
  680         cout<<{\cf22 "Produtos encomendados: "} << endl;\par
  681         {\cf19 for}({\cf18 int} i=0; i<encomendas.size(); i++)\{\par
  682             cout<< {\cf22 "\\t\\t\\t"} << encomendas[i].getNome() << {\cf22 " - Preco: "} << fixed << setprecision(2) << encomendas[i].getPreco() << endl;\par
  683         \}\par
  684         cout<<{\cf22 "Entregador: "}<< f->getNome() << endl;\par
  685         cout<<{\cf22 "Meio de transporte utilizado: "}<<f->getVeiculoAlocado().getMarca()<< {\cf22 ", "}<<f->getVeiculoAlocado().getTipo()<< {\cf22 ", "}<<f->getVeiculoAlocado().getDataDeAquisicao()<<endl;\par
  686         {\cf20 //Hora}\par
  687         chrono::system_clock::time_point  time_now =chrono::system_clock::now();\par
  688         time_now += std::chrono::minutes(30);\par
  689         time_t c_time_format = std::chrono::system_clock::to_time_t(time_now);\par
  690         {\cf18 string} str_time =ctime(& c_time_format);\par
  691         cout<<{\cf22 "Data exata de entrega prevista: "} << str_time<<endl;\par
  692         {\cf18 string} stringData;\par
  693         {\cf18 string} stringHora;\par
  694         {\cf18 string} mess;\par
  695         {\cf18 string} dias;\par
  696         {\cf18 string} anos;\par
  697         stringHora+=str_time[11];\par
  698         stringHora+=str_time[12];\par
  699         stringHora+=str_time[13];\par
  700         stringHora+=str_time[14];\par
  701         stringHora+=str_time[15];\par
  702         mess+=str_time[4];\par
  703         mess+=str_time[5];\par
  704         mess+=str_time[6];\par
  705         dias+=str_time[8];\par
  706         dias+=str_time[9];\par
  707         anos+=str_time[20];\par
  708         anos+=str_time[21];\par
  709         anos+=str_time[22];\par
  710         anos+=str_time[23];\par
  711         {\cf18 int} ano=stoi(anos);\par
  712         {\cf18 int} mes;\par
  713         {\cf19 if}(mess=={\cf22 "Nov"})\{\par
  714             mes=11;\par
  715         \}\par
  716         {\cf19 else} {\cf19 if} (mess=={\cf22 "Dez"})\{\par
  717             mes=12;\par
  718         \}\par
  719         {\cf19 else} {\cf19 if} (mess=={\cf22 "Jan"})\{\par
  720             mes = 01;\par
  721         \}\par
  722         {\cf18 int} dia=stoi(dias);\par
  723         Data d;\par
  724         d.setAno(ano);\par
  725         d.setDia(dia);\par
  726         d.setMes(mes);\par
  727         e.setData(d);\par
  728         e.setHora(stringHora);\par
  729         {\cf18 double} preco=0.0;\par
  730         {\cf19 for}({\cf18 int} i=0; i<encomendas.size(); i++)\{\par
  731             preco+=encomendas[i].getPreco();\par
  732         \}\par
  733         {\cf19 if}(r.getMorada().getLocalidade()=={\cf22 "Porto"}||r.getMorada().getLocalidade()=={\cf22 "Lisboa"}||r.getMorada().getLocalidade()=={\cf22 "Faro"})\{\par
  734             e.setEntrega({\cf17 true});\par
  735             preco+=3.0;\par
  736             cout<<{\cf22 "Preco: "}<<fixed<<setprecision(2) <<preco<<{\cf22 " euros - Foi acrescida uma taxa de entrega de 3 euros."};\par
  737         \}\par
  738         {\cf19 else}\{\par
  739             e.setEntrega({\cf17 false});\par
  740             preco+=5.0;\par
  741             cout<<{\cf22 "Preco: "}<<fixed<<setprecision(2) <<preco<<{\cf22 " euros - Foi acrescida uma taxa de entrega de 5 euros por se localizar num concelho vizinho."};\par
  742         \}\par
  743         e.setPreco(preco);\par
  744         srand(time(NULL));\par
  745         {\cf18 int} r = (double)rand()/(9000 + 1) * (9999-1000);\par
  746         {\cf18 int} m;\par
  747         cout<<setw(7)<< {\cf22 " "}<< {\cf22 "MENSAGEM: "}<<r<<endl;\par
  748         cout<<{\cf22 "Introduza o codigo de pagamento enviado por mensagem."}<<endl;\par
  749 \par
  750         {\cf18 int} a=3;\par
  751         {\cf19 while}(a!=0 && m!=r) \{\par
  752             cin>>m;\par
  753             {\cf19 if} (m == r) \{\par
  754                 e.setSucesso({\cf17 true});\par
  755                 cout << {\cf22 "O pagamento foi efetuado com sucesso"} << endl;\par
  756                 cout << {\cf22 "O seu pedido esta a ser preparado!"}<<endl;\par
  757                 {\cf19 for}({\cf18 int} i=0; i<c.getBase().getFuncionarios().size(); i++) \{\par
  758                     {\cf19 if}(c.getBase().getFuncionarios()[i]->getTipoDeFuncionario() == {\cf22 "Entregador"}) \{\par
  759                         {\cf19 if} (c.getBase().getFuncionarios()[i]->getNome() == e.getEntregadorNome()) \{\par
  760                             {\cf20 //cout << c.getBase().getFuncionarios()[i]->isDisponivel() << endl;}\par
  761                             c.getBase().getFuncionarios()[i]->setDisponivel({\cf17 false});\par
  762                             {\cf20 //cout << c.getBase().getFuncionarios()[i]->isDisponivel() << endl;}\par
  763                             {\cf19 break};\par
  764                         \}\par
  765                     \}\par
  766                 \}\par
  767                 ofstream file;\par
  768                 file.open(c.getBase().getFuncionariosFileName());\par
  769                 {\cf19 for} ({\cf18 int} i = 0; i < c.getBase().getFuncionarios().size()-1; i++) \{\par
  770                     {\cf19 if}(c.getBase().getFuncionarios()[i]->getTipoDeFuncionario()=={\cf22 "Administrador"}) \{\par
  771                         file << {\cf22 "Administrador"} << endl;\par
  772                         file << c.getBase().getFuncionarios()[i]->getNome() << endl;\par
  773                         file << c.getBase().getFuncionarios()[i]->getNif() << endl;\par
  774                         file << to_string(c.getBase().getFuncionarios()[i]->getData().getDia()) + {\cf22 "/"} +\par
  775                                 to_string(c.getBase().getFuncionarios()[i]->getData().getMes()) + {\cf22 "/"} +\par
  776                                 to_string(c.getBase().getFuncionarios()[i]->getData().getAno()) << endl;\par
  777                         file << to_string(c.getBase().getFuncionarios()[i]->getSalario()) << endl;\par
  778                         file << c.getBase().getFuncionarios()[i]->getFuncao() << endl;\par
  779                         file << {\cf22 ":::::"} << endl;\par
  780                     \}{\cf19 else} {\cf19 if}(c.getBase().getFuncionarios()[i]->getTipoDeFuncionario()=={\cf22 "Entregador"})\{\par
  781                         file << {\cf22 "Entregador"} << endl;\par
  782                         file << c.getBase().getFuncionarios()[i]->getNome() << endl;\par
  783                         file << c.getBase().getFuncionarios()[i]->getNif() << endl;\par
  784                         file << to_string(c.getBase().getFuncionarios()[i]->getData().getDia()) + {\cf22 "/"} +\par
  785                                 to_string(c.getBase().getFuncionarios()[i]->getData().getMes()) + {\cf22 "/"} +\par
  786                                 to_string(c.getBase().getFuncionarios()[i]->getData().getAno()) << endl;\par
  787                         file << to_string(c.getBase().getFuncionarios()[i]->getSalario()) << endl;\par
  788                         file << c.getBase().getFuncionarios()[i]->getVeiculoAlocado().getMarca()+{\cf22 ", "}+c.getBase().getFuncionarios()[i]->getVeiculoAlocado().getTipo()+{\cf22 ", "}+c.getBase().getFuncionarios()[i]->getVeiculoAlocado().getDataDeAquisicao() << endl;\par
  789                         {\cf19 if}(c.getBase().getFuncionarios()[i]->isDisponivel())\{\par
  790                             file<<{\cf22 "1"}<<endl;\par
  791                         \}{\cf19 else}\{\par
  792                             file<<{\cf22 "0"}<<endl;\par
  793                         \}\par
  794 \par
  795                         file << {\cf22 ":::::"} << endl;\par
  796                     \}\par
  797                 \}\par
  798                 {\cf19 if}(c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getTipoDeFuncionario()=={\cf22 "Administrador"}) \{\par
  799                     file << {\cf22 "Administrador"} << endl;\par
  800                     file << c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getNome() << endl;\par
  801                     file << c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getNif() << endl;\par
  802                     file << to_string(c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getData().getDia()) + {\cf22 "/"} +\par
  803                             to_string(c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getData().getMes()) + {\cf22 "/"} +\par
  804                             to_string(c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getData().getAno()) << endl;\par
  805                     file << to_string(c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getSalario()) << endl;\par
  806                     file << c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getFuncao() << endl;\par
  807                 \}{\cf19 else} {\cf19 if}(c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getTipoDeFuncionario()=={\cf22 "Entregador"})\{\par
  808                     file << {\cf22 "Entregador"} << endl;\par
  809                     file << c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getNome() << endl;\par
  810                     file << c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getNif() << endl;\par
  811                     file << to_string(c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getData().getDia()) + {\cf22 "/"} +\par
  812                             to_string(c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getData().getMes()) + {\cf22 "/"} +\par
  813                             to_string(c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getData().getAno()) << endl;\par
  814                     file << to_string(c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getSalario()) << endl;\par
  815                     file <<c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getVeiculoAlocado().getMarca()+{\cf22 ", "}+c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getVeiculoAlocado().getTipo()+{\cf22 ", "}+c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->getVeiculoAlocado().getDataDeAquisicao() << endl;\par
  816                     {\cf19 if}(c.getBase().getFuncionarios()[c.getBase().getFuncionarios().size()-1]->isDisponivel())\{\par
  817                         file<<{\cf22 "1"}<<endl;\par
  818                     \}{\cf19 else}\{\par
  819                         file<<{\cf22 "0"}<<endl;\par
  820                     \}\par
  821                 \}\par
  822                 {\cf19 break};\par
  823             \} {\cf19 else} \{\par
  824                 cout << {\cf22 "Codigo errado, tem "} << a-1 << {\cf22 " tentativas."} << endl;\par
  825                 a--;\par
  826                 cout << {\cf22 "Introduza o codigo de pagamento enviado por mensagem."} << endl;\par
  827             \}\par
  828         \}\par
  829         {\cf19 if}(m!=r)\{\par
  830             cout<<{\cf22 "Foi removido da nossa plataforma por ter pagamentos em atraso. Nao se podera registar novamente."}<<endl;\par
  831             ofstream file;\par
  832             file.open({\cf22 "listanegra.txt"}, ios::app);\par
  833             file<<{\cf22 ":::::"}<<endl;\par
  834             file << c.getName() << endl;\par
  835             file << c.getNif() << endl;\par
  836             file << c.getMorada().getRua() + {\cf22 ", "} + c.getMorada().getLocalidade() + {\cf22 ", "} +c.getMorada().getNumero() << endl;\par
  837             file << c.getBase().getConselho()<<endl;\par
  838             c.getBase().removeCliente(c);\par
  839             c.getBase().listaNegra_readfile();\par
  840             exit(0);\par
  841         \}\par
  842         Empresa empresa;\par
  843         ofstream file;\par
  844         file.open({\cf22 "entregas.txt"},ios::app);\par
  845         file<<endl;\par
  846         file << {\cf22 ":::::"} << endl;\par
  847         file << e.getRestauranteNome() << endl;\par
  848         file <<e.getData().getDia() <<{\cf22 "/"}<< e.getData().getMes()<<{\cf22 "/"}<<e.getData().getAno()<<endl;\par
  849         file << e.getEntregadorNome()<<endl;\par
  850         file << e.getHora()<<endl;\par
  851         file << e.getPratosNome()<<endl;\par
  852         {\cf19 if}(e.isEntrega())\{\par
  853             file<<1<<endl;\par
  854         \}\par
  855         {\cf19 else} {\cf19 if}(!e.isEntrega())\{\par
  856             file<<0<<endl;\par
  857         \}\par
  858         {\cf19 if}(e.isSucesso()=={\cf17 true})\{\par
  859             file<<1<<endl;\par
  860         \}\par
  861         {\cf19 else} {\cf19 if}(!e.isSucesso()=={\cf17 true})\{\par
  862             file<<0<<endl;\par
  863         \}\par
  864         file << e.getClienteNome()<<endl;\par
  865         file << e.getPreco();\par
  866         empresa.encomendas_readfile();\par
  867 \par
  868     \}\par
  869     {\cf19 else}\{\par
  870         cout<<{\cf22 "De momento nao existem entregadores disponiveis. Por favor tente de novo dentro de uns minutos."}<<endl;\par
  871     \}\par
  872 \}\par
}
}
{\xe \v funcionario\:main.cpp}
{\xe \v main.cpp\:funcionario}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void funcionario ()}}
\par
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta o menu "funcion\'E1rio" levando \'E0s respetivas funcionalidades - {\b Administrador} e {\b Entregador}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   873                    \{\par
  874     {\cf18 bool} exit={\cf17 false};\par
  875     {\cf18 bool} exit2={\cf17 false};\par
  876     {\cf19 while}(!exit) \{\par
  877         {\cf18 char} op;\par
  878         {\cf18 bool} existe = {\cf17 false};\par
  879         {\cf18 string} nif;\par
  880         cout << {\cf22 "Selecionou -Funcionario-\\n"};\par
  881         cout << {\cf22 "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\n"};\par
  882         cout << {\cf22 "                         UghEats Food Delivery                                    "};\par
  883         cout << {\cf22 "\\n\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n"};\par
  884         {\cf19 do}\{\par
  885             cout << {\cf22 "Selecione uma opcao\\n"};\par
  886             cout << {\cf22 "\{1\} - Sou administrador \\n"}; {\cf20 //ver e mexer -adicionar/remover funcionarios}\par
  887             cout << {\cf22 "\{2\} - Sou entregador \\n"}; {\cf20 //ver lista de encomendas}\par
  888             cout << {\cf22 "Prima \{0\} para voltar atras!\\n"};\par
  889             cin >> op;\par
  890         \}{\cf19 while}(!isdigit(op)||(op!={\cf23 '1'}&&op!={\cf23 '0'}&&op!={\cf23 '2'}));\par
  891         {\cf18 string} pass;\par
  892         {\cf19 switch} (op) \{\par
  893             {\cf19 case} {\cf23 '0'}:\par
  894                 exit = {\cf17 true};\par
  895                 {\cf19 break};\par
  896         \}\par
  897         {\cf19 if} (!exit) \{\par
  898             {\cf19 if} (op == {\cf23 '1'}) \{\par
  899                 cout << {\cf22 "Introduza palavra-passe:"};\par
  900                 cin >> pass;\par
  901                 {\cf19 if} (pass == {\cf22 "0000"}) \{\par
  902                     {\cf18 char} op1;\par
  903                     {\cf19 do}\{\par
  904                         cout<<{\cf22 "Selecione uma opcao:"}<<endl<<endl;\par
  905                         cout << {\cf22 "\{1\} - Ver lista de funcionarios \\n"}; {\cf20 //ver e mexer -adicionar/remover funcionarios}\par
  906                         cout << {\cf22 "\{2\} - Adicionar funcionarios \\n"};\par
  907                         cout << {\cf22 "\{3\} - Remover funcionarios\\n"};\par
  908                         cin >> op1;\par
  909                     \}{\cf19 while}(!isdigit(op1)||(op1!={\cf23 '1'}&&op1!={\cf23 '2'}&&op1!={\cf23 '3'}));\par
  910                     {\cf19 switch} (op1) \{\par
  911                         {\cf19 case} {\cf23 '1'}:\par
  912                             verFunc();\par
  913                             {\cf19 break};\par
  914                         {\cf19 case} {\cf23 '2'}:\par
  915                             addFunc();\par
  916                             {\cf19 break};\par
  917                         {\cf19 case} {\cf23 '3'}:\par
  918                             {\cf19 try} \{\par
  919                                 removeFunc();\par
  920                             \} {\cf19 catch} (FuncionarioInexistente &e) \{\par
  921                                 cerr << e << endl;\par
  922                             \}\par
  923                             {\cf19 break};\par
  924                         {\cf19 default}:\par
  925                             cout << {\cf22 "Opcao Invalida!"} << endl;\par
  926                     \}\par
  927                 \}\par
  928                 system({\cf22 "pause"});\par
  929             \} {\cf19 else} {\cf19 if} (op == {\cf23 '2'}) \{\par
  930                 cout << {\cf22 "Coloque o seu NIF:\\n"};\par
  931                 cin >> nif;\par
  932 \par
  933                 Funcionario *fun;\par
  934                 Base p = Base({\cf22 "porto.txt"});\par
  935                 Base l = Base({\cf22 "lisboa.txt"});\par
  936                 Base f = Base({\cf22 "faro.txt"});\par
  937                 p.funcionarios_readfile();\par
  938                 l.funcionarios_readfile();\par
  939                 f.funcionarios_readfile();\par
  940                 {\cf19 for} ({\cf18 int} i = 0; i < p.getFuncionarios().size(); i++) \{\par
  941 \par
  942                     {\cf19 if} (p.getFuncionarios()[i]->getTipoDeFuncionario() == {\cf22 "Entregador"}) \{\par
  943                         {\cf19 if} (p.getFuncionarios()[i]->getNif() == nif) \{\par
  944                             existe = {\cf17 true};\par
  945                             fun = p.getFuncionarios()[i];\par
  946                         \}\par
  947                     \}\par
  948                 \}\par
  949                 {\cf19 for} ({\cf18 int} i = 0; i < l.getFuncionarios().size(); i++) \{\par
  950                     {\cf19 if} (l.getFuncionarios()[i]->getTipoDeFuncionario() == {\cf22 "Entregador"}) \{\par
  951                         {\cf19 if} (l.getFuncionarios()[i]->getNif() == nif) \{\par
  952                             existe = {\cf17 true};\par
  953                             fun = l.getFuncionarios()[i];\par
  954                         \}\par
  955                     \}\par
  956                 \}\par
  957                 {\cf19 for} ({\cf18 int} i = 0; i < f.getFuncionarios().size(); i++) \{\par
  958                     {\cf19 if} (f.getFuncionarios()[i]->getTipoDeFuncionario() == {\cf22 "Entregador"}) \{\par
  959                         {\cf19 if} (f.getFuncionarios()[i]->getNif() == nif) \{\par
  960                             existe = {\cf17 true};\par
  961                             fun = f.getFuncionarios()[i];\par
  962                         \}\par
  963                     \}\par
  964                 \}\par
  965                 {\cf19 if} (existe) \{\par
  966                     listaEncomendas(*fun);\par
  967                 \} {\cf19 else} \{\par
  968                     cout << {\cf22 "Nao temos nenhum entregador com esse nif!"} << endl;\par
  969                     system({\cf22 "pause"});\par
  970                 \}\par
  971             \} {\cf19 else} \{\par
  972                 cout << {\cf22 "Opcao Invalida!\\n"};\par
  973                 system({\cf22 "pause"});\par
  974             \}\par
  975         \}\par
  976     \}\par
  977 \}\par
}
}
{\xe \v gestao\:main.cpp}
{\xe \v main.cpp\:gestao}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void gestao ()}}
\par
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta o menu "gest\'E3o" levando \'E0s respetivas funcionalidades. - Economia, adicionar e remover restaurante, ver diversas informa\'E7oes e lista de encomendas. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   981               \{\par
  982 \par
  983     {\cf18 int} op;\par
  984     Base b;\par
  985     {\cf18 string} pass;\par
  986     Restaurante r;\par
  987     cout << {\cf22 "Selecionou -Gestao-\\n"};\par
  988     cout << {\cf22 "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\n"};\par
  989     cout << {\cf22 "                          UghEats Food Delivery                                    "};\par
  990     cout << {\cf22 "\\n\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n"};\par
  991     cout << {\cf22 "Introduza a palavra-passe:"};\par
  992     cin >> pass;\par
  993     {\cf19 if} (pass == {\cf22 "0000"}) \{\par
  994         cout << {\cf22 "Selecione uma opcao: \\n"};\par
  995         cout << {\cf22 "\{1\} - Economia \\n"};\par
  996         cout << {\cf22 "\{2\} - Adicionar um restaurante \\n"};\par
  997         cout << {\cf22 "\{3\} - Remover um restaurante\\n"};\par
  998         cout << {\cf22 "\{4\} - Ver lista de funcionarios\\n"};\par
  999         cout << {\cf22 "\{5\} - Ver lista de restaurante\\n"};\par
 1000         cout << {\cf22 "\{6\} - Ver lista de cliente\\n"};\par
 1001         cout << {\cf22 "\{7\} - Ver lista de encomendas\\n"};\par
 1002         cout << {\cf22 "Prima \{0\} para voltar atras!\\n"};\par
 1003         cin >> op;\par
 1004         {\cf19 switch} (op) \{\par
 1005             {\cf19 case} 1:\par
 1006                 economia();\par
 1007                 {\cf19 break};\par
 1008             {\cf19 case} 2:\par
 1009                 addRest();\par
 1010                 {\cf19 break};\par
 1011             {\cf19 case} 3:\par
 1012                 {\cf19 try}\{\par
 1013                     removeRest();\par
 1014                 \}{\cf19 catch}(RestauranteInexistente &e)\{\par
 1015                     cerr<<e<<endl;\par
 1016                 \}\par
 1017                 system({\cf22 "pause"});\par
 1018                 {\cf19 break};\par
 1019             {\cf19 case} 0:\par
 1020                 exit;\par
 1021                 {\cf19 break};\par
 1022             {\cf19 case} 4:\par
 1023                 verFunc();\par
 1024                 {\cf19 break};\par
 1025             {\cf19 case} 5:\par
 1026                 verRest();\par
 1027                 {\cf19 break};\par
 1028             {\cf19 case} 6:\par
 1029                 verClientes();\par
 1030                 {\cf19 break};\par
 1031             {\cf19 case} 7:\par
 1032                 verEncomendas();\par
 1033                 {\cf19 break};\par
 1034             {\cf19 default}:\par
 1035                 cout << {\cf22 "Opcao Invalida \\n"};\par
 1036                 system({\cf22 "pause"});\par
 1037         \}\par
 1038     \}\par
 1039 \par
 1040 \}\par
}
}
{\xe \v informacaoCliente\:main.cpp}
{\xe \v main.cpp\:informacaoCliente}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void informacaoCliente ()}}
\par
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta a informa\'E7\'E3o de um cliente. }}\par
}
{\xe \v informacaoCliente\:main.cpp}
{\xe \v main.cpp\:informacaoCliente}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void informacaoCliente ({\b Cliente}  {\i c})}}
\par
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   148                                  \{\par
  149 \par
  150         {\cf18 char} op;\par
  151         cout << endl;\par
  152         cout << {\cf22 "Selecionou -Ver a sua informacao- "} << endl;\par
  153         cout << {\cf22 "Nome: \\t"} << c.getName() << endl;\par
  154         cout << {\cf22 "Nif: \\t"} << c.getNif() << endl;\par
  155         cout << {\cf22 "Morada: "} << c.getMorada().getRua() << {\cf22 ", "} << c.getMorada().getLocalidade() << {\cf22 ", "}\par
  156              << c.getMorada().getNumero() << endl;\par
  157         cout << {\cf22 "Base: \\t"} << c.getBase().getConselho() << endl << endl;\par
  158         cout << {\cf22 "Prima \{0\} para voltar atras!\\n"};\par
  159         cin >> op;\par
  160         {\cf19 switch}(op)\{\par
  161             {\cf19 case} {\cf23 '0'}:\par
  162                 exit;\par
  163                 {\cf19 break};\par
  164             {\cf19 default}:\par
  165                 cout<<{\cf22 "Opcao Invalida!\\n"};\par
  166         \}\par
  167 \}\par
}
}
{\xe \v listaEncomendas\:main.cpp}
{\xe \v main.cpp\:listaEncomendas}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void listaEncomendas ({\b Funcionario} &  {\i f})}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta a informa\'E7\'E3o relacionada \'E0 economia/lucro da empresa,. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  2585                                        \{\par
 2586     Empresa e;\par
 2587     {\cf18 bool} existe = {\cf17 false};\par
 2588     e.encomendas_readfile();\par
 2589     vector<Encomenda> encom = e.getEncomendas();\par
 2590     {\cf19 if} (fun.getTipoDeFuncionario() == {\cf22 "Entregador"}) \{\par
 2591         cout << {\cf22 "Bem vindo "} << fun.getNome() << endl << endl;\par
 2592         {\cf19 for} ({\cf18 int} i = 0; i < encom.size(); i++) \{\par
 2593             {\cf19 if} (fun.getNome() == encom[i].getEntregadorNome()) \{\par
 2594                 existe = {\cf17 true};\par
 2595                 cout << {\cf22 "Nome do Restaurante: \\t"} << encom[i].getRestauranteNome() << endl;\par
 2596                 cout << {\cf22 "Data de entrega: \\t"} << encom[i].getData().getDia() << {\cf22 "/"}\par
 2597                      << encom[i].getData().getMes() << {\cf22 "/"}\par
 2598                      << encom[i].getData().getAno() << endl;\par
 2599                 cout << {\cf22 "Nome do Entregador: \\t"} << encom[i].getEntregadorNome() << endl;\par
 2600                 cout << {\cf22 "Hora de entrega: \\t"} << encom[i].getHora() << endl;\par
 2601                 cout << {\cf22 "Pratos Encomendados: \\t"} << encom[i].getPratosNome() << endl;\par
 2602 \par
 2603                 {\cf19 if} (!encom[i].isSucesso()) \{ {\cf20 //isSucesso = 0}\par
 2604                     cout << {\cf22 "A entrega foi efetuada num concelho vizinho!"} << endl;\par
 2605                 \} {\cf19 else} cout << {\cf22 "A entrega foi efetuada no proprio concelho!"} << endl;\par
 2606 \par
 2607                 {\cf19 if} (!encom[i].isEntrega()) \{ {\cf20 //sem sucesso}\par
 2608                     srand(time(0));\par
 2609                     {\cf18 string} razoesInsucesso[4] = \{{\cf22 "Restaurante fechado!"}, {\cf22 "Problema de transporte!"},\par
 2610                                                  {\cf22 "Aplicacao em atualizacao!"},\par
 2611                                                  {\cf22 "Todos os entregadores estao ocupados!\\nTente novamente dentro de momentos"}\};\par
 2612 \par
 2613                     vector<string> random;\par
 2614                     {\cf19 for} ({\cf18 int} i = 0; i < 3; i++) \{\par
 2615                         random.push_back(razoesInsucesso[rand() % 4]);\par
 2616                     \}\par
 2617                     cout << random[0] << endl;\par
 2618                 \} {\cf19 else} cout << {\cf22 "Encomenda entregue com sucesso!\\nBom Apetite!"} << endl;\par
 2619                 cout << {\cf22 "Nome do Cliente: \\t"} << encom[i].getClienteNome() << endl;\par
 2620                 cout << {\cf22 "Valor da Encomenda: \\t"} << encom[i].getPreco() << {\cf22 " euros"} << endl;\par
 2621                 cout << {\cf22 ":::::"} << endl;\par
 2622 \par
 2623             \}\par
 2624 \par
 2625         \}\par
 2626         {\cf19 if} (!existe) \{\par
 2627             cout << {\cf22 "Ainda nao realizou nenhuma encomenda!"} << endl;\par
 2628         \}\par
 2629         system({\cf22 "pause"});\par
 2630     \} {\cf19 else} \{\par
 2631         cout << {\cf22 "Nao e entregador na nossa empresa!"} << endl;\par
 2632         system({\cf22 "pause"});\par
 2633     \}\par
 2634 \par
 2635 \par
 2636 \}\par
}
}
{\xe \v login\:main.cpp}
{\xe \v main.cpp\:login}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void login ()}}
\par
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta o menu "login" levando \'E0s respetivas funcionalidades. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   168              \{\par
  169     {\cf18 bool} exit={\cf17 false};\par
  170     {\cf19 while}(!exit) \{\par
  171         {\cf18 int} op, op1;\par
  172         {\cf18 char} base;\par
  173         {\cf18 bool} existe = {\cf17 false};\par
  174         Cliente c;\par
  175         {\cf18 string} nif;\par
  176         {\cf19 do}\{\par
  177             cin.clear();\par
  178             cout << {\cf22 "Selecionou -LogIn-\\n"};\par
  179             cout << {\cf22 "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\n"};\par
  180             cout << {\cf22 "                          UghEats Food Delivery                                    "};\par
  181             cout << {\cf22 "\\n\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n"};\par
  182             cout << {\cf22 "A que base pertence? \\n"};\par
  183             cout << {\cf22 "\{1\} - Porto\\n"};\par
  184             cout << {\cf22 "\{2\} - Lisboa\\n"};\par
  185             cout << {\cf22 "\{3\} - Faro\\n"};\par
  186             cin >> base;\par
  187             {\cf19 if} (base == {\cf23 '1'}) \{\par
  188                 {\cf19 break};\par
  189             \} {\cf19 else} {\cf19 if} (base == {\cf23 '2'}) \{\par
  190                 {\cf19 break};\par
  191             \} {\cf19 else} {\cf19 if} (base == {\cf23 '3'}) \{\par
  192                 {\cf19 break};\par
  193             \} {\cf19 else} \{\par
  194                 cout << {\cf22 "Opcao Invalida!"} << endl;\par
  195             \}\par
  196         \}{\cf19 while}(!isdigit(base)||base!={\cf23 '1'}||base!={\cf23 '2'}||base!={\cf23 '3'});\par
  197 \par
  198         cout << {\cf22 "Coloque o seu NIF:\\n"};\par
  199         cin >> nif;\par
  200         {\cf19 while}(nif.size()>9 || nif.size()<9)\{\par
  201             cout<<{\cf22 "Nif invalido. Volte a inserir:"}<<endl;\par
  202             cin>>nif;\par
  203         \}\par
  204         {\cf20 /*verifica\'E7ao do nif*/}\par
  205         {\cf19 if} (base == {\cf23 '1'}) \{\par
  206             Base b({\cf22 "porto.txt"});\par
  207             b.clientes_readfile();\par
  208             {\cf19 for} ({\cf18 int} i = 0; i < b.getClientes().size(); i++) \{\par
  209                 {\cf19 if} (b.getClientes()[i].getNif() == nif) \{\par
  210                     existe = {\cf17 true};\par
  211                     c = b.getClientes()[i];\par
  212                 \}\par
  213             \}\par
  214         \} {\cf19 else} {\cf19 if} (base == {\cf23 '2'}) \{\par
  215             Base b({\cf22 "lisboa.txt"});\par
  216             b.clientes_readfile();\par
  217             {\cf19 for} ({\cf18 int} i = 0; i < b.getClientes().size(); i++) \{\par
  218                 {\cf19 if} (b.getClientes()[i].getNif() == nif) \{\par
  219                     existe = {\cf17 true};\par
  220                     c = b.getClientes()[i];\par
  221                 \}\par
  222             \}\par
  223         \} {\cf19 else} {\cf19 if} (base == {\cf23 '3'}) \{\par
  224             Base b({\cf22 "faro.txt"});\par
  225             b.clientes_readfile();\par
  226             {\cf19 for} ({\cf18 int} i = 0; i < b.getClientes().size(); i++) \{\par
  227                 {\cf19 if} (b.getClientes()[i].getNif() == nif) \{\par
  228                     existe = {\cf17 true};\par
  229                     c = b.getClientes()[i];\par
  230                 \}\par
  231             \}\par
  232         \}\par
  233         {\cf19 else} \{\par
  234             cout << {\cf22 "Opcao Invalida!"} << endl;\par
  235         \}\par
  236         {\cf19 if} (existe == {\cf17 true}) \{\par
  237             cout << {\cf22 "Ola "} << c.getName() << {\cf22 ".\\nBem vindo/a a UghEats Food Delivery!\\n\\n"};\par
  238             cout << {\cf22 "Selecione uma opcao: \\n"};\par
  239             cout << {\cf22 "\{1\} - Fazer uma encomenda\\n"};\par
  240             cout << {\cf22 "\{2\} - Ver a minha informacao\\n"};\par
  241             cout << {\cf22 "\{3\} - Eliminar registo\\n"};\par
  242             cout << {\cf22 "Prima \{0\} para voltar atras!\\n"};\par
  243 \par
  244             cin >> op;\par
  245             {\cf19 switch} (op) \{\par
  246                 {\cf19 case} 1:\par
  247                     procurarRestaurante(c);\par
  248                     {\cf19 break};\par
  249                 {\cf19 case} 2:\par
  250                     informacaoCliente(c);\par
  251                     {\cf19 break};\par
  252                 {\cf19 case} 3:\par
  253                     eliminarRegisto(c);\par
  254                     {\cf19 break};\par
  255                 {\cf19 case} 0:\par
  256                     exit = {\cf17 true};\par
  257                     {\cf19 break};\par
  258                 {\cf19 default}:\par
  259                     cout << {\cf22 "Opcao Invalida!\\n"};\par
  260             \}\par
  261         \} {\cf19 else} \{\par
  262             {\cf19 do} \{\par
  263                 cout << {\cf22 "Nao esta registado na nossa plataforma!"} << endl;\par
  264                 cout << {\cf22 "\{1\} - Registar\\n"};\par
  265                 cout << {\cf22 "\{2\} - Tentar login novamente\\n"};\par
  266                 cin >> op1;\par
  267                 {\cf19 if} (std::cin.fail()) {\cf20 // has a previous extraction failed?}\par
  268                 \{\par
  269                     {\cf20 // yep, so let's handle the failure}\par
  270                     std::cin.clear(); {\cf20 // put us back in 'normal' operation mode}\par
  271                     std::cin.ignore(32767,{\cf23 '\\n'}); {\cf20 // and remove the bad input}\par
  272                 \}\par
  273                 {\cf19 switch} (op1) \{\par
  274                     {\cf19 case} 1:\par
  275                         registo();\par
  276                         {\cf19 break};\par
  277                     {\cf19 case} 2:\par
  278                         login();\par
  279                         {\cf19 break};\par
  280                     {\cf19 default}:\par
  281                         cout << {\cf22 "Opcao Invalida \\n"};\par
  282                 \}\par
  283             \} {\cf19 while} (op1 != 1 && op1 != 2 && !exit);\par
  284         \}\par
  285     \}\par
  286 \}\par
}
}
{\xe \v main\:main.cpp}
{\xe \v main.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main ()}}
\par
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    77            \{\par
   78 \par
   79     mainmenu();\par
   80     {\cf19 return} 0;\par
   81 \par
   82 \}\par
}
}
{\xe \v mainmenu\:main.cpp}
{\xe \v main.cpp\:mainmenu}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void mainmenu ()}}
\par
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta o menu inicial. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid    83                \{\par
   84     {\cf18 bool} exit = {\cf17 false};\par
   85     {\cf19 while}(!exit) \{\par
   86         {\cf18 char} option;\par
   87         {\cf19 do}\{\par
   88             cout << {\cf22 "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\n"};\par
   89             cout << {\cf22 "                          UghEats Food Delivery                                    "};\par
   90             cout << {\cf22 "\\n\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n"};\par
   91             cout << {\cf22 "Selecione uma opcao: \\n"};\par
   92             cout << {\cf22 "\{1\} - Sou cliente \\n"};\par
   93             cout << {\cf22 "\{2\} - Sou funcionario \\n"};\par
   94             cout << {\cf22 "\{3\} - Gestao \\n"};  {\cf20 //economia, adicionar e remover restaurantes}\par
   95             cout << {\cf22 "\{0\} - Sair\\n"};\par
   96             {\cf20 //}\par
   97             cin >> option;\par
   98             {\cf19 switch} (option) \{\par
   99                 {\cf19 case} {\cf23 '1'}:\par
  100                     cliente();\par
  101                     {\cf19 break};\par
  102                 {\cf19 case} {\cf23 '2'}:\par
  103                     funcionario();\par
  104                     {\cf19 break};\par
  105                 {\cf19 case} {\cf23 '3'}:\par
  106                     gestao();\par
  107                     {\cf19 break};\par
  108                 {\cf19 case} {\cf23 '0'}:\par
  109                     cout << {\cf22 "Obrigado por escolher a UghEats Food Delivery. \\n"};\par
  110                     exit = {\cf17 true};\par
  111                     {\cf19 break};\par
  112                 {\cf19 default}:\par
  113                     cout << {\cf22 "Opcao Invalida!\\n"};\par
  114             \}\par
  115         \}{\cf19 while}(!isdigit(option));\par
  116     \}\par
  117 \} {\cf20 //cin verified}\par
}
}
{\xe \v procurarRestaurante\:main.cpp}
{\xe \v main.cpp\:procurarRestaurante}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void procurarRestaurante ({\b Cliente}  {\i c})}}
\par
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta o menu "Procurar Restaurante" que permite ver uma lista de restaurantes ordenados de diferentes formas. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   348                                     \{\par
  349 \par
  350     {\cf18 int} op, op1, op2, op3, op4;\par
  351     cout << {\cf22 "Procurar restaurantes por: \\n"};\par
  352     cout << {\cf22 "\{1\} - Zona Geografica \\n"};\par
  353     cout << {\cf22 "\{2\} - Ordem Alfabetica \\n"};\par
  354     cout << {\cf22 "\{3\} - Tipo de Culinaria\\n"};\par
  355     cout << {\cf22 "\{4\} - Intervalo de Preco\\n"};\par
  356     cout << {\cf22 "Prima \{0\} para voltar atras!\\n"};\par
  357     cin >> op;\par
  358     c.getBase().restaurantes_readfile();\par
  359     {\cf19 if} (op == 1) \{\par
  360         vector<Restaurante> ord = c.getBase().getRestaurantes()[0].sortRestaurantesPorZona(\par
  361                 c.getBase().getRestaurantes());\par
  362         cout << {\cf22 "Restaurantes disponiveis na sua base - "} << c.getBase().getConselho() << {\cf22 ":"} << endl;\par
  363         {\cf19 for} ({\cf18 int} i = 0; i < ord.size(); i++) \{\par
  364             {\cf19 if} (ord[i].getMorada().getLocalidade() == {\cf22 "Porto"}) \{\par
  365                 cout << {\cf22 "\{"} << i + 1 << {\cf22 "\} - "} << ord[i].getNome() << {\cf22 " - concelho : Porto"} << endl;\par
  366             \}\par
  367             {\cf19 if} (ord[i].getMorada().getLocalidade() == {\cf22 "Matosinhos"}) \{\par
  368                 cout << {\cf22 "\{"} << i + 1 << {\cf22 "\} - "} << ord[i].getNome() << {\cf22 " - concelho : Matosinhos"} << endl;\par
  369             \}\par
  370             {\cf19 if} (ord[i].getMorada().getLocalidade() == {\cf22 "Vila Nova de Gaia"}) \{\par
  371                 cout << {\cf22 "\{"} << i + 1 << {\cf22 "\} - "} << ord[i].getNome() << {\cf22 " - concelho : Vila Nova de Gaia"} << endl;\par
  372             \}\par
  373             {\cf19 if} (ord[i].getMorada().getLocalidade() == {\cf22 "Maia"}) \{\par
  374                 cout << {\cf22 "\{"} << i + 1 << {\cf22 "\} - "} << ord[i].getNome() << {\cf22 " - concelho : Maia"} << endl;\par
  375             \}\par
  376             {\cf19 if} (ord[i].getMorada().getLocalidade() == {\cf22 "Gondomar"}) \{\par
  377                 cout << {\cf22 "\{"} << i + 1 << {\cf22 "\} - "} << ord[i].getNome() << {\cf22 " - concelho : Gondomar"} << endl;\par
  378             \}\par
  379             {\cf19 if} (ord[i].getMorada().getLocalidade() == {\cf22 "Loures"}) \{\par
  380                 cout << {\cf22 "\{"} << i + 1 << {\cf22 "\} - "} << ord[i].getNome() << {\cf22 " - concelho : Loures"} << endl;\par
  381             \}\par
  382             {\cf19 if} (ord[i].getMorada().getLocalidade() == {\cf22 "Lisboa"}) \{\par
  383                 cout << {\cf22 "\{"} << i + 1 << {\cf22 "\} - "} << ord[i].getNome() << {\cf22 " - concelho : Lisboa"} << endl;\par
  384             \}\par
  385             {\cf19 if} (ord[i].getMorada().getLocalidade() == {\cf22 "Amadora"}) \{\par
  386                 cout << {\cf22 "\{"} << i + 1 << {\cf22 "\} - "} << ord[i].getNome() << {\cf22 " - concelho : Amadora"} << endl;\par
  387             \}\par
  388             {\cf19 if} (ord[i].getMorada().getLocalidade() == {\cf22 "Faro"}) \{\par
  389                 cout << {\cf22 "\{"} << i + 1 << {\cf22 "\} - "} << ord[i].getNome() << {\cf22 " - concelho : Faro"} << endl;\par
  390             \}\par
  391             {\cf19 if} (ord[i].getMorada().getLocalidade() == {\cf22 "Loule"}) \{\par
  392                 cout << {\cf22 "\{"} << i + 1 << {\cf22 "\} - "} << ord[i].getNome() << {\cf22 " - concelho : Loule"} << endl;\par
  393             \}\par
  394             {\cf19 if} (ord[i].getMorada().getLocalidade() == {\cf22 "Sao Bras de Alportel"}) \{\par
  395                 cout << {\cf22 "\{"} << i + 1 << {\cf22 "\} - "} << ord[i].getNome() << {\cf22 " - concelho : Sao Bras de Alportel"} << endl;\par
  396             \}\par
  397         \}\par
  398         cout << {\cf22 "Selecione o restaurante pelo qual pertende encomendar: "} << endl;\par
  399         cin >> op1;\par
  400         fazerEncomenda(ord[op1 - 1], c);\par
  401     \}\par
  402     {\cf19 else} {\cf19 if} (op == 2) \{\par
  403 \par
  404         vector<Restaurante> nomesRest = \{\};\par
  405         cout << {\cf22 "Restaurantes disponiveis na sua base - "} << c.getBase().getConselho() << {\cf22 ": "} << endl;\par
  406         {\cf19 for} ({\cf18 int} i = 0; i < c.getBase().getRestaurantes().size(); i++) \{\par
  407             nomesRest.push_back(c.getBase().getRestaurantes()[i]);\par
  408             sort(nomesRest.begin(), nomesRest.end());\par
  409         \}\par
  410         {\cf19 for} ({\cf18 int} i = 0; i < nomesRest.size(); i++) \{\par
  411             cout << {\cf22 "\{"} << i + 1 << {\cf22 "\} - "} << nomesRest[i].getNome() << endl;\par
  412         \}\par
  413         cout << {\cf22 "Selecione o restaurante pelo qual pertende encomendar"} << endl;\par
  414         cin >> op2;\par
  415 \par
  416         fazerEncomenda(nomesRest[op2 - 1], c);\par
  417     \}\par
  418     {\cf19 else} {\cf19 if} (op == 3) \{\par
  419         vector<Restaurante> ord = c.getBase().getRestaurantes()[0].sortRestaurantesPorComida(\par
  420                 c.getBase().getRestaurantes());\par
  421         cout << {\cf22 "Restaurantes disponiveis na sua base - "} << c.getBase().getConselho() << {\cf22 ":"} << endl;\par
  422         {\cf19 for} ({\cf18 int} i = 0; i < ord.size(); i++) \{\par
  423             {\cf19 if} (ord[i].getTiposDeCulinaria()[0] == {\cf22 "Portuguesa"}) \{\par
  424                 cout << {\cf22 "\{"} << i + 1 << {\cf22 "\} - "} << ord[i].getNome() << {\cf22 " - Tipo de Culinaria : Portuguesa"} << endl;\par
  425             \}\par
  426             {\cf19 if} (ord[i].getTiposDeCulinaria()[0] == {\cf22 "Italiana"}) \{\par
  427                 cout << {\cf22 "\{"} << i + 1 << {\cf22 "\} - "} << ord[i].getNome() << {\cf22 " - Tipo de Culinaria : Italiana"} << endl;\par
  428             \}\par
  429             {\cf19 if} (ord[i].getTiposDeCulinaria()[0] == {\cf22 "Chinesa"}) \{\par
  430                 cout << {\cf22 "\{"} << i + 1 << {\cf22 "\} - "} << ord[i].getNome() << {\cf22 " - Tipo de Culinaria : Chinesa"} << endl;\par
  431             \}\par
  432             {\cf19 if} (ord[i].getTiposDeCulinaria()[0] == {\cf22 "Japonesa"}) \{\par
  433                 cout << {\cf22 "\{"} << i + 1 << {\cf22 "\} - "} << ord[i].getNome() << {\cf22 " - Tipo de Culinaria : Japonesa"} << endl;\par
  434             \}\par
  435         \}\par
  436         cout << {\cf22 "Selecione o restaurante pelo qual pertende encomendar"} << endl;\par
  437         cin >> op1;\par
  438         fazerEncomenda(ord[op1 - 1], c);\par
  439     \}\par
  440     {\cf19 else} {\cf19 if} (op == 4) \{\par
  441         {\cf18 int} counter = 1;\par
  442         cout << {\cf22 "Selecione o intervalo de precos que pretende pesquisar"} << endl;\par
  443         cout << {\cf22 "\{1\} - 0 a 4.99 euros\\n"};\par
  444         cout << {\cf22 "\{2\} - 5 a 9.99 euros\\n"};\par
  445         cout << {\cf22 "\{3\} - 10 a 14.99 euros\\n"};\par
  446         cout << {\cf22 "\{4\} - 15 a 19.99 euros\\n"};\par
  447         cout << {\cf22 "\{5\} - 20 a 25 euros\\n"};\par
  448         cin >> op3;\par
  449         cout << {\cf22 "Restaurantes disponiveis na sua base - "} << c.getBase().getConselho() << {\cf22 ":"} << endl;\par
  450         {\cf19 switch} (op3) \{\par
  451             {\cf19 case} 1:\par
  452                 {\cf19 for} ({\cf18 int} i = 0; i < c.getBase().getRestaurantes().size(); i++) \{\par
  453                     {\cf19 for} ({\cf18 int} j = 0; j < c.getBase().getRestaurantes()[i].getPratos().size(); j++) \{\par
  454                         {\cf19 if} (c.getBase().getRestaurantes()[i].getTiposDeCulinaria()[0] ==\par
  455                             c.getBase().getRestaurantes()[i].getPratos()[j].getTipoDeCulinaria()) \{\par
  456                             {\cf19 if} (c.getBase().getRestaurantes()[i].getPratos()[j].getPreco() > 0 &&\par
  457                                 c.getBase().getRestaurantes()[i].getPratos()[j].getPreco() <= 4.99) \{\par
  458                                 cout << {\cf22 "\{"} << i + 1 << {\cf22 "\} - "} << c.getBase().getRestaurantes()[i].getNome()\par
  459                                      << {\cf22 " - Prato: "}\par
  460                                      << c.getBase().getRestaurantes()[i].getPratos()[j].getNome() << {\cf22 " - Preco: "}\par
  461                                      << fixed << setprecision(2)\par
  462                                      << c.getBase().getRestaurantes()[i].getPratos()[j].getPreco() << endl;\par
  463                             \}\par
  464                         \}\par
  465                     \}\par
  466                 \}\par
  467                 cout << {\cf22 "Selecione o restaurante pelo qual pertende encomendar"} << endl;\par
  468                 cin >> op4;\par
  469 \par
  470                 fazerEncomenda(c.getBase().getRestaurantes()[op4 - 1], c);\par
  471                 {\cf19 break};\par
  472 \par
  473 \par
  474             {\cf19 case} 2:\par
  475                 {\cf19 for} ({\cf18 int} i = 0; i < c.getBase().getRestaurantes().size(); i++) \{\par
  476                     {\cf19 for} ({\cf18 int} j = 0; j < c.getBase().getRestaurantes()[i].getPratos().size(); j++) \{\par
  477                         {\cf19 if} (c.getBase().getRestaurantes()[i].getTiposDeCulinaria()[0] ==\par
  478                             c.getBase().getRestaurantes()[i].getPratos()[j].getTipoDeCulinaria()) \{\par
  479                             {\cf19 if} (c.getBase().getRestaurantes()[i].getPratos()[j].getPreco() >= 5 &&\par
  480                                 c.getBase().getRestaurantes()[i].getPratos()[j].getPreco() <= 9.99) \{\par
  481                                 cout << {\cf22 "\{"} << i + 1 << {\cf22 "\} - "} << c.getBase().getRestaurantes()[i].getNome()\par
  482                                      << {\cf22 " - Prato: "}\par
  483                                      << c.getBase().getRestaurantes()[i].getPratos()[j].getNome() << {\cf22 " - Preco: "}\par
  484                                      << fixed << setprecision(2)\par
  485                                      << c.getBase().getRestaurantes()[i].getPratos()[j].getPreco() << endl;\par
  486                             \}\par
  487                         \}\par
  488                     \}\par
  489                 \}\par
  490                 cout << {\cf22 "Selecione o restaurante pelo qual pertende encomendar"} << endl;\par
  491                 cin >> op4;\par
  492 \par
  493                 fazerEncomenda(c.getBase().getRestaurantes()[op4 - 1], c);\par
  494                 {\cf19 break};\par
  495 \par
  496             {\cf19 case} 3:\par
  497                 {\cf19 for} ({\cf18 int} i = 0; i < c.getBase().getRestaurantes().size(); i++) \{\par
  498                     {\cf19 for} ({\cf18 int} j = i; j < c.getBase().getRestaurantes()[i].getPratos().size(); j++) \{\par
  499                         {\cf20 //cout << c.getBase().getRestaurantes()[i].getPratos()[j].getNome()<< endl;}\par
  500                         {\cf19 if} (c.getBase().getRestaurantes()[i].getTiposDeCulinaria()[0] ==\par
  501                             c.getBase().getRestaurantes()[i].getPratos()[j].getTipoDeCulinaria()) \{\par
  502                             {\cf19 if} (c.getBase().getRestaurantes()[i].getPratos()[j].getPreco() >= 10 &&\par
  503                                 c.getBase().getRestaurantes()[i].getPratos()[j].getPreco() <= 14.99) \{\par
  504                                 cout << {\cf22 "\{"} << i + 1 << {\cf22 "\} - "} << c.getBase().getRestaurantes()[i].getNome()\par
  505                                      << {\cf22 " - Prato: "}\par
  506                                      << c.getBase().getRestaurantes()[i].getPratos()[j].getNome() << {\cf22 " - Preco: "}\par
  507                                      << fixed << setprecision(2)\par
  508                                      << c.getBase().getRestaurantes()[i].getPratos()[j].getPreco() << endl;\par
  509                             \}\par
  510                         \}\par
  511                     \}\par
  512                 \}\par
  513                 cout << {\cf22 "Selecione o restaurante pelo qual pertende encomendar"} << endl;\par
  514                 cin >> op4;\par
  515 \par
  516                 fazerEncomenda(c.getBase().getRestaurantes()[op4 - 1], c);\par
  517                 {\cf19 break};\par
  518 \par
  519             {\cf19 case} 4:\par
  520                 {\cf19 for} ({\cf18 int} i = 0; i < c.getBase().getRestaurantes().size(); i++) \{\par
  521                     {\cf19 for} ({\cf18 int} j = i; j < c.getBase().getRestaurantes()[i].getPratos().size(); j++) \{\par
  522                         {\cf20 //cout << c.getBase().getRestaurantes()[i].getPratos()[j].getNome()<< endl;}\par
  523                         {\cf19 if} (c.getBase().getRestaurantes()[i].getTiposDeCulinaria()[0] ==\par
  524                             c.getBase().getRestaurantes()[i].getPratos()[j].getTipoDeCulinaria()) \{\par
  525                             {\cf19 if} (c.getBase().getRestaurantes()[i].getPratos()[j].getPreco() >= 15 &&\par
  526                                 c.getBase().getRestaurantes()[i].getPratos()[j].getPreco() <= 19.99) \{\par
  527                                 cout << {\cf22 "\{"} << i + 1 << {\cf22 "\} - "} << c.getBase().getRestaurantes()[i].getNome()\par
  528                                      << {\cf22 " - Prato: "}\par
  529                                      << c.getBase().getRestaurantes()[i].getPratos()[j].getNome() << {\cf22 " - Preco: "}\par
  530                                      << fixed << setprecision(2)\par
  531                                      << c.getBase().getRestaurantes()[i].getPratos()[j].getPreco() << endl;\par
  532                             \}\par
  533                         \}\par
  534                     \}\par
  535                 \}\par
  536                 cout << {\cf22 "Selecione o restaurante pelo qual pertende encomendar"} << endl;\par
  537                 cin >> op4;\par
  538 \par
  539                 fazerEncomenda(c.getBase().getRestaurantes()[op4 - 1], c);\par
  540                 {\cf19 break};\par
  541 \par
  542             {\cf19 case} 5:\par
  543                 {\cf19 for} ({\cf18 int} i = 0; i < c.getBase().getRestaurantes().size(); i++) \{\par
  544                     {\cf19 for} ({\cf18 int} j = i; j < c.getBase().getRestaurantes()[i].getPratos().size(); j++) \{\par
  545                         {\cf20 //cout << c.getBase().getRestaurantes()[i].getPratos()[j].getNome()<< endl;}\par
  546                         {\cf19 if} (c.getBase().getRestaurantes()[i].getTiposDeCulinaria()[0] ==\par
  547                             c.getBase().getRestaurantes()[i].getPratos()[j].getTipoDeCulinaria()) \{\par
  548                             {\cf19 if} (c.getBase().getRestaurantes()[i].getPratos()[j].getPreco() >= 20 &&\par
  549                                 c.getBase().getRestaurantes()[i].getPratos()[j].getPreco() <= 25) \{\par
  550                                 cout << {\cf22 "\{"} << i + 1 << {\cf22 "\} - "} << c.getBase().getRestaurantes()[i].getNome()\par
  551                                      << {\cf22 " - Prato: "}\par
  552                                      << c.getBase().getRestaurantes()[i].getPratos()[j].getNome() << {\cf22 " - Preco: "}\par
  553                                      << fixed << setprecision(2)\par
  554                                      << c.getBase().getRestaurantes()[i].getPratos()[j].getPreco() << endl;\par
  555                             \}\par
  556                         \}\par
  557                     \}\par
  558                 \}\par
  559                 cout << {\cf22 "Selecione o restaurante pelo qual pertende encomendar"} << endl;\par
  560                 cin >> op4;\par
  561 \par
  562                 fazerEncomenda(c.getBase().getRestaurantes()[op4 - 1], c);\par
  563                 {\cf19 break};\par
  564 \par
  565             {\cf19 default}:\par
  566                 cout << {\cf22 "Opcao invalida!"} << endl;\par
  567         \}\par
  568     \}\par
  569     {\cf19 else} {\cf19 if} (op == 0) \{\par
  570         exit;\par
  571 \par
  572     \} {\cf19 else} \{\par
  573         cout << {\cf22 "Opcao Invalida!"} << endl;\par
  574     \}\par
  575 \par
  576 \}\par
}
}
{\xe \v registo\:main.cpp}
{\xe \v main.cpp\:registo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void registo ()}}
\par
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta o menu "registo" levando \'E0s respetivas funcionalidades. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   293               \{\par
  294     cout << {\cf22 "Selecionou -Registo-\\n"};\par
  295     cout << {\cf22 "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\n"};\par
  296     cout << {\cf22 "                         UghEats Food Delivery                                    "};\par
  297     cout << {\cf22 "\\n\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n"};\par
  298     {\cf18 char} base;\par
  299     {\cf19 do}\{\par
  300         cout << {\cf22 "A que base se quer registar? \\n"};\par
  301         cout << {\cf22 "\{1\} - Porto\\n"};\par
  302         cout << {\cf22 "\{2\} - Lisboa\\n"};\par
  303         cout << {\cf22 "\{3\} - Faro\\n"};\par
  304         cin >> base;\par
  305         {\cf19 if} (base == {\cf23 '1'}) \{\par
  306             {\cf19 break};\par
  307         \} {\cf19 else} {\cf19 if} (base == {\cf23 '2'}) \{\par
  308             {\cf19 break};\par
  309         \} {\cf19 else} {\cf19 if} (base == {\cf23 '3'}) \{\par
  310             {\cf19 break};\par
  311         \} {\cf19 else} \{\par
  312             cout << {\cf22 "Opcao Invalida!"} << endl;\par
  313         \}\par
  314     \}{\cf19 while}(!isdigit(base)||base!={\cf23 '1'}||base!={\cf23 '2'}||base!={\cf23 '3'});\par
  315     Base b;\par
  316     {\cf19 if} (base == {\cf23 '1'}) \{\par
  317         b = Base({\cf22 "porto.txt"});\par
  318     \}\par
  319     {\cf19 if} (base == {\cf23 '2'}) \{\par
  320         b = Base({\cf22 "lisboa.txt"});\par
  321     \}\par
  322     {\cf19 if} (base == {\cf23 '3'}) \{\par
  323         b = Base({\cf22 "faro.txt"});\par
  324     \}\par
  325     b.clientes_readfile();\par
  326     {\cf19 try}\{\par
  327         b.addCliente();\par
  328     \}{\cf19 catch}(ClienteNaListaNegra &e)\{\par
  329         cerr<<e<<endl;\par
  330         system({\cf22 "pause"});\par
  331     \}\par
  332     cout << endl;\par
  333     cout << {\cf22 "Selecione uma opcao: "} << endl;\par
  334     cout << {\cf22 "\{1\} - Login\\n"};\par
  335     cout << {\cf22 "Prima \{0\} para voltar atras!\\n"};\par
  336     {\cf18 string} n;\par
  337     cin >> n;\par
  338     {\cf19 if} (n == {\cf22 "1"}) \{\par
  339         login();\par
  340     \}\par
  341     {\cf19 if} (n == {\cf22 "0"}) \{\par
  342         exit;\par
  343     \} {\cf19 else} \{\par
  344         cout << {\cf22 "Opcao Invalida!"};\par
  345     \}\par
  346 \par
  347 \}\par
}
}
{\xe \v removeFunc\:main.cpp}
{\xe \v main.cpp\:removeFunc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void removeFunc ()}}
\par
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove Funcion\'E1rios de uma base. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1205                  \{\par
 1206 \par
 1207         {\cf18 int} base;\par
 1208         {\cf18 string} nif;\par
 1209         Funcionario f;\par
 1210         cout << {\cf22 "Selecionou -Remover Funcionario-\\n"};\par
 1211         cout << {\cf22 "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\n"};\par
 1212         cout << {\cf22 "                          UghEats Food Delivery                                    "};\par
 1213         cout << {\cf22 "\\n\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n"};\par
 1214         cout << {\cf22 "A que base pertence o funcionario que pretende remover? \\n"};\par
 1215         cout << {\cf22 "\{1\} - Porto\\n"};\par
 1216         cout << {\cf22 "\{2\} - Lisboa\\n"};\par
 1217         cout << {\cf22 "\{3\} - Faro\\n"};\par
 1218         cout << {\cf22 "Prima \{0\} para voltar atras!\\n"};\par
 1219         cin >> base;\par
 1220         {\cf19 switch}(base)\{\par
 1221             {\cf19 case} 0:\par
 1222                 exit;\par
 1223                 {\cf19 break};\par
 1224         \}\par
 1225             cout << {\cf22 "Pretende remover:"} << endl;\par
 1226             cout << {\cf22 "\{1\} - Administrador"} << endl;\par
 1227             cout << {\cf22 "\{2\} - Entregador"} << endl;\par
 1228 \par
 1229             {\cf18 int} op1;\par
 1230             cin >> op1;\par
 1231             cout << {\cf22 "Nif do funcionario que pertende remover:\\n"};\par
 1232             cin >> nif;\par
 1233             {\cf18 bool} existe = {\cf17 false};\par
 1234             Base b;\par
 1235             {\cf19 if} (base == 1) \{\par
 1236                 b = Base({\cf22 "porto.txt"});\par
 1237                 b.funcionarios_readfile();\par
 1238                 {\cf19 for} ({\cf18 int} i = 0; i < b.getFuncionarios().size(); i++) \{\par
 1239                     {\cf19 if} (b.getFuncionarios()[i]->getNif() == nif) \{\par
 1240                         existe = {\cf17 true};\par
 1241                         f = *b.getFuncionarios()[i];\par
 1242                     \}\par
 1243                 \}\par
 1244             \} {\cf19 else} {\cf19 if} (base == 2) \{\par
 1245                 b = Base({\cf22 "lisboa.txt"});\par
 1246                 b.funcionarios_readfile();\par
 1247                 {\cf19 for} ({\cf18 int} i = 0; i < b.getFuncionarios().size(); i++) \{\par
 1248                     {\cf19 if} (b.getFuncionarios()[i]->getNif() == nif) \{\par
 1249                         existe = {\cf17 true};\par
 1250                         f = *b.getFuncionarios()[i];\par
 1251                     \}\par
 1252                 \}\par
 1253             \} {\cf19 else} {\cf19 if} (base == 3) \{\par
 1254                 b = Base({\cf22 "faro.txt"});\par
 1255                 b.funcionarios_readfile();\par
 1256                 {\cf19 for} ({\cf18 int} i = 0; i < b.getFuncionarios().size(); i++) \{\par
 1257                     {\cf19 if} (b.getFuncionarios()[i]->getNif() == nif) \{\par
 1258                         existe = {\cf17 true};\par
 1259                         f = *b.getFuncionarios()[i];\par
 1260                     \}\par
 1261                 \}\par
 1262             \} {\cf19 else} cout << {\cf22 "Opcao Invalida"} << endl;\par
 1263             {\cf19 if} (existe == {\cf17 true}) \{\par
 1264                 {\cf19 switch} (op1) \{\par
 1265                     {\cf19 case} 1 :\par
 1266                         b.removeAdmin(f);\par
 1267                         system({\cf22 "pause"});\par
 1268                         {\cf19 break};\par
 1269                     {\cf19 case} 2:\par
 1270 \par
 1271                         b.removeEntreg(f);\par
 1272                         system({\cf22 "pause"});\par
 1273                         {\cf19 break};\par
 1274                 \}\par
 1275             \} {\cf19 else} \{\par
 1276                 {\cf19 throw} FuncionarioInexistente(f);\par
 1277             \}\par
 1278 \par
 1279 \par
 1280 \}\par
}
}
{\xe \v removeRest\:main.cpp}
{\xe \v main.cpp\:removeRest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void removeRest ()}}
\par
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Remove restaurantes de uma base. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1084                   \{\par
 1085     {\cf18 bool} exit={\cf17 false};\par
 1086     {\cf19 while}(!exit) \{\par
 1087         {\cf19 if} (exit) {\cf19 break};\par
 1088         {\cf18 bool} existe = {\cf17 false};\par
 1089         Base b;\par
 1090         {\cf18 int} base;\par
 1091         {\cf18 string} nome;\par
 1092         Restaurante r;\par
 1093         cout << {\cf22 "Selecionou -Remover Restaurante-\\n"};\par
 1094         cout << {\cf22 "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\n"};\par
 1095         cout << {\cf22 "                          UghEats Food Delivery                                    "};\par
 1096         cout << {\cf22 "\\n\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n"};\par
 1097         cout << {\cf22 "A que base pertence o restaurante que pretende remover? \\n"};\par
 1098         cout << {\cf22 "\{1\} - Porto\\n"};\par
 1099         cout << {\cf22 "\{2\} - Lisboa\\n"};\par
 1100         cout << {\cf22 "\{3\} - Faro\\n"};\par
 1101         cout << {\cf22 "Prima \{0\} para voltar atras!\\n"};\par
 1102         cin >> base;\par
 1103         {\cf19 switch}(base)\{\par
 1104             {\cf19 case} 0:\par
 1105                 exit = {\cf17 true};\par
 1106                 {\cf19 break};\par
 1107         \}\par
 1108         cout << {\cf22 "Nome do restaurante:\\n"};\par
 1109         cin >> nome;\par
 1110         {\cf19 if}(base==1) \{\par
 1111             b = Base({\cf22 "porto.txt"});\par
 1112             b.restaurantes_readfile();\par
 1113             {\cf19 for} ({\cf18 int} i = 0; i < b.getRestaurantes().size(); i++) \{\par
 1114                 {\cf19 if} (b.getRestaurantes()[i].getNome() == nome) \{\par
 1115                     existe = {\cf17 true};\par
 1116                     r = b.getRestaurantes()[i];\par
 1117                 \}\par
 1118             \}\par
 1119         \}\par
 1120         {\cf19 if}(base==2) \{\par
 1121             b = Base({\cf22 "lisboa.txt"});\par
 1122             b.restaurantes_readfile();\par
 1123             {\cf19 for} ({\cf18 int} i = 0; i < b.getRestaurantes().size(); i++) \{\par
 1124                 {\cf19 if} (b.getRestaurantes()[i].getNome() == nome) \{\par
 1125                     existe = {\cf17 true};\par
 1126                     r = b.getRestaurantes()[i];\par
 1127                 \}\par
 1128             \}\par
 1129         \}\par
 1130         {\cf19 if}(base==3) \{\par
 1131             b = Base({\cf22 "faro.txt"});\par
 1132             b.restaurantes_readfile();\par
 1133             {\cf19 for} ({\cf18 int} i = 0; i < b.getRestaurantes().size(); i++) \{\par
 1134                 {\cf19 if} (b.getRestaurantes()[i].getNome() == nome) \{\par
 1135                     existe = {\cf17 true};\par
 1136                     r = b.getRestaurantes()[i];\par
 1137                 \}\par
 1138             \}\par
 1139         \}\par
 1140 \par
 1141         {\cf19 else} {\cf19 if}(base!=1 && base!=2 && base!=3 && base!=0)\{\par
 1142             cout << {\cf22 "Opcao Invalida"} << endl;\par
 1143         \}\par
 1144         {\cf19 if}(exit)\{\par
 1145             {\cf19 break};\par
 1146         \}\par
 1147 \par
 1148 \par
 1149         {\cf19 if} (existe == {\cf17 true} && !exit) \{\par
 1150             b.removeRestaurante(r);\par
 1151             cout<<{\cf22 "O restaurante "}<<r.getNome()<<{\cf22 " foi removido da nossa plataforma com sucesso!"}<<endl;\par
 1152             system({\cf22 "pause"});\par
 1153             exit={\cf17 true};\par
 1154         \} {\cf19 else} \{\par
 1155             {\cf19 throw} RestauranteInexistente(r);\par
 1156         \}\par
 1157     \}\par
 1158 \}\par
}
}
{\xe \v verClientes\:main.cpp}
{\xe \v main.cpp\:verClientes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void verClientes ()}}
\par
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta de forma organizada a informa\'E7\'E3o de um {\b Cliente}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1715                    \{\par
 1716     {\cf18 bool} exit={\cf17 false};\par
 1717     {\cf19 while}(!exit) \{\par
 1718         cout << {\cf22 "Selecionou -Ver clientes-\\n"};\par
 1719         cout << {\cf22 "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\n"};\par
 1720         cout << {\cf22 "                         UghEats Food Delivery                                    "};\par
 1721         cout << {\cf22 "\\n\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n"};\par
 1722         cout << {\cf22 "Ver clientes da base: \\n"};\par
 1723         cout << {\cf22 "\{1\} - Porto\\n"};\par
 1724         cout << {\cf22 "\{2\} - Lisboa\\n"};\par
 1725         cout << {\cf22 "\{3\} - Faro\\n"};\par
 1726         cout << {\cf22 "\{4\} - Todas\\n"};\par
 1727         cout << {\cf22 "Prima \{0\} para voltar atras!\\n"};\par
 1728         {\cf18 int} base;\par
 1729         cin >> base;\par
 1730         {\cf19 switch} (base) \{\par
 1731             {\cf19 case} 0:\par
 1732                 exit = {\cf17 true};\par
 1733                 {\cf19 break};\par
 1734         \}\par
 1735         {\cf19 if} (!exit) \{\par
 1736             Base b, c, d;\par
 1737             vector<Cliente> cli;\par
 1738             {\cf19 if} (base == 1) \{\par
 1739                 b = Base({\cf22 "porto.txt"});\par
 1740                 b.clientes_readfile();\par
 1741                 cout << {\cf22 "     Clientes Porto"} << endl;\par
 1742                 cout << {\cf22 "_____________________"} << endl;\par
 1743                 {\cf19 for} ({\cf18 int} i = 0; i < b.getClientes().size(); i++) \{\par
 1744                     cout << {\cf22 "Nome:\\t"} << b.getClientes()[i].getName() << endl;\par
 1745                     cout << {\cf22 "Nif:\\t"} << b.getClientes()[i].getNif() << endl;\par
 1746                     cout << {\cf22 "Morada:\\t"} << b.getClientes()[i].getMorada().getRua() << {\cf22 ", "}\par
 1747                          << b.getClientes()[i].getMorada().getLocalidade() << {\cf22 ", "}\par
 1748                          << b.getClientes()[i].getMorada().getNumero() << endl;\par
 1749                     cout << {\cf22 "Base:\\t"} << b.getClientes()[i].getBase().getConselho() << endl;\par
 1750                     cout << {\cf22 ":::::"} << endl;\par
 1751                 \}\par
 1752                 system({\cf22 "pause"});\par
 1753             \}\par
 1754             {\cf19 if} (base == 2) \{\par
 1755                 b = Base({\cf22 "lisboa.txt"});\par
 1756                 b.clientes_readfile();\par
 1757                 cout << {\cf22 "    Clientes Lisboa"} << endl;\par
 1758                 cout << {\cf22 "_____________________"} << endl;\par
 1759                 {\cf19 for} ({\cf18 int} i = 0; i < b.getClientes().size(); i++) \{\par
 1760                     cout << {\cf22 "Nome:\\t"} << b.getClientes()[i].getName() << endl;\par
 1761                     cout << {\cf22 "Nif:\\t"} << b.getClientes()[i].getNif() << endl;\par
 1762                     cout << {\cf22 "Morada:\\t"} << b.getClientes()[i].getMorada().getRua() << {\cf22 ", "}\par
 1763                          << b.getClientes()[i].getMorada().getLocalidade() << {\cf22 ", "}\par
 1764                          << b.getClientes()[i].getMorada().getNumero() << endl;\par
 1765                     cout << {\cf22 "Base:\\t"} << b.getClientes()[i].getBase().getConselho() << endl;\par
 1766                     cout << {\cf22 ":::::"} << endl;\par
 1767                 \}\par
 1768                 system({\cf22 "pause"});\par
 1769             \}\par
 1770             {\cf19 if} (base == 3) \{\par
 1771                 b = Base({\cf22 "faro.txt"});\par
 1772                 b.clientes_readfile();\par
 1773                 cout << {\cf22 "     Clientes Faro"} << endl;\par
 1774                 cout << {\cf22 "_____________________"} << endl;\par
 1775                 {\cf19 for} ({\cf18 int} i = 0; i < b.getClientes().size(); i++) \{\par
 1776                     cout << {\cf22 "Nome:\\t"} << b.getClientes()[i].getName() << endl;\par
 1777                     cout << {\cf22 "Nif:\\t"} << b.getClientes()[i].getNif() << endl;\par
 1778                     cout << {\cf22 "Morada:\\t"} << b.getClientes()[i].getMorada().getRua() << {\cf22 ", "}\par
 1779                          << b.getClientes()[i].getMorada().getLocalidade() << {\cf22 ", "}\par
 1780                          << b.getClientes()[i].getMorada().getNumero() << endl;\par
 1781                     cout << {\cf22 "Base:\\t"} << b.getClientes()[i].getBase().getConselho() << endl;\par
 1782                     cout << {\cf22 ":::::"} << endl;\par
 1783                 \}\par
 1784                 system({\cf22 "pause"});\par
 1785             \}\par
 1786             {\cf19 if} (base == 4) \{\par
 1787                 b = Base({\cf22 "porto.txt"});\par
 1788                 c = Base({\cf22 "lisboa.txt"});\par
 1789                 d = Base({\cf22 "faro.txt"});\par
 1790                 cout << {\cf22 "     Clientes Porto"} << endl;\par
 1791                 cout << {\cf22 "_____________________"} << endl;\par
 1792                 cout << endl;\par
 1793                 b.clientes_readfile();\par
 1794                 {\cf19 for} ({\cf18 int} i = 0; i < b.getClientes().size(); i++) \{\par
 1795                     cout << {\cf22 "Nome:\\t"} << b.getClientes()[i].getName() << endl;\par
 1796                     cout << {\cf22 "Nif:\\t"} << b.getClientes()[i].getNif() << endl;\par
 1797                     cout << {\cf22 "Morada:\\t"} << b.getClientes()[i].getMorada().getRua() << {\cf22 ", "}\par
 1798                          << b.getClientes()[i].getMorada().getLocalidade() << {\cf22 ", "}\par
 1799                          << b.getClientes()[i].getMorada().getNumero() << endl;\par
 1800                     cout << {\cf22 "Base:\\t"} << b.getClientes()[i].getBase().getConselho() << endl;\par
 1801                     cout << {\cf22 ":::::"} << endl;\par
 1802                 \}\par
 1803                 cout << endl;\par
 1804                 c.clientes_readfile();\par
 1805                 cout << {\cf22 "    Clientes Lisboa"} << endl;\par
 1806                 cout << {\cf22 "_____________________"} << endl;\par
 1807                 cout << endl;\par
 1808                 {\cf19 for} ({\cf18 int} i = 0; i < c.getClientes().size(); i++) \{\par
 1809                     cout << {\cf22 "Nome:\\t"} << c.getClientes()[i].getName() << endl;\par
 1810                     cout << {\cf22 "Nif:\\t"} << c.getClientes()[i].getNif() << endl;\par
 1811                     cout << {\cf22 "Morada:\\t"} << c.getClientes()[i].getMorada().getRua() << {\cf22 ", "}\par
 1812                          << c.getClientes()[i].getMorada().getLocalidade() << {\cf22 ", "}\par
 1813                          << c.getClientes()[i].getMorada().getNumero() << endl;\par
 1814                     cout << {\cf22 "Base:\\t"} << c.getClientes()[i].getBase().getConselho() << endl;\par
 1815                     cout << {\cf22 ":::::"} << endl;\par
 1816                 \}\par
 1817                 cout << endl;\par
 1818                 d.clientes_readfile();\par
 1819                 cout << {\cf22 "     Clientes Faro"} << endl;\par
 1820                 cout << {\cf22 "_____________________"} << endl;\par
 1821                 cout << endl;\par
 1822                 {\cf19 for} ({\cf18 int} i = 0; i < d.getClientes().size(); i++) \{\par
 1823                     cout << {\cf22 "Nome:\\t"} << d.getClientes()[i].getName() << endl;\par
 1824                     cout << {\cf22 "Nif:\\t"} << d.getClientes()[i].getNif() << endl;\par
 1825                     cout << {\cf22 "Morada:\\t"} << d.getClientes()[i].getMorada().getRua() << {\cf22 ", "}\par
 1826                          << d.getClientes()[i].getMorada().getLocalidade() << {\cf22 ", "}\par
 1827                          << d.getClientes()[i].getMorada().getNumero() << endl;\par
 1828                     cout << {\cf22 "Base:\\t"} << d.getClientes()[i].getBase().getConselho() << endl;\par
 1829                     cout << {\cf22 ":::::"} << endl;\par
 1830                 \}\par
 1831                 system({\cf22 "pause"});\par
 1832 \par
 1833 \par
 1834                 {\cf19 if} (base != 1 && base != 2 && base != 3 && base != 4 && base != 0) \{\par
 1835                     cout << {\cf22 "Opcao Invalida!"} << endl;\par
 1836                     system({\cf22 "pause"});\par
 1837                 \}\par
 1838 \par
 1839             \}\par
 1840         \}\par
 1841     \}\par
 1842 \}\par
}
}
{\xe \v verEncomendas\:main.cpp}
{\xe \v main.cpp\:verEncomendas}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void verEncomendas ()}}
\par
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta de forma organizada a informa\'E7\'E3o das Encomendas Realizadas. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1843                      \{\par
 1844 \par
 1845     Empresa e;\par
 1846     e.encomendas_readfile();\par
 1847     vector<Encomenda> encom = e.getEncomendas();\par
 1848     {\cf18 bool} exit = {\cf17 false};\par
 1849     {\cf18 bool} exit2 = {\cf17 false};\par
 1850     {\cf18 int} base, op;\par
 1851     {\cf19 while} (!exit) \{\par
 1852         cout << {\cf22 "Selecionou -Ver encomendas-\\n"};\par
 1853         cout << {\cf22 "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\n"};\par
 1854         cout << {\cf22 "                         UghEats Food Delivery                                    "};\par
 1855         cout << {\cf22 "\\n\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n"};\par
 1856         cout << {\cf22 "\{1\} - Por base\\n"};\par
 1857         cout << {\cf22 "\{2\} - Por restaurante\\n"};\par
 1858         cout << {\cf22 "\{3\} - Por entregador\\n"};\par
 1859         cout << {\cf22 "\{4\} - Todas\\n"};\par
 1860         cout << {\cf22 "Prima \{0\} para voltar atras!\\n"};\par
 1861         {\cf18 int} op;\par
 1862         cin >> op;\par
 1863         {\cf19 switch} (op) \{\par
 1864             {\cf19 case} 0:\par
 1865                 exit;\par
 1866                 {\cf19 break};\par
 1867         \}\par
 1868         {\cf19 if} (!exit) \{\par
 1869             Base b, p, l, f;\par
 1870 \par
 1871             {\cf20 //POR BASE}\par
 1872             {\cf19 if} (op == 1) \{\par
 1873                 cout << {\cf22 "Ver encomendas da base: \\n"};\par
 1874                 cout << {\cf22 "\{1\} - Porto\\n"};\par
 1875                 cout << {\cf22 "\{2\} - Lisboa\\n"};\par
 1876                 cout << {\cf22 "\{3\} - Faro\\n"};\par
 1877                 cout << {\cf22 "\{4\} - Todas\\n"};\par
 1878                 cout << {\cf22 "Prima \{0\} para voltar atras!\\n"};\par
 1879                 cin >> base;\par
 1880                 {\cf19 switch} (op) \{\par
 1881                     {\cf19 case} 0:\par
 1882                         exit2 = {\cf17 true};\par
 1883                         {\cf19 break};\par
 1884                 \}\par
 1885                 {\cf19 if} (!exit2) \{\par
 1886                     {\cf19 if} (base == 1) \{\par
 1887                         b = Base({\cf22 "porto.txt"});\par
 1888                         e.encomendas_readfile();\par
 1889                         b.restaurantes_readfile();\par
 1890                         cout << {\cf22 "    Encomendas Porto"} << endl;\par
 1891                         cout << {\cf22 "_________________________"} << endl;\par
 1892                         {\cf19 for} ({\cf18 int} i = 0; i < encom.size(); i++) \{\par
 1893 \par
 1894                             {\cf19 for} ({\cf18 int} j = 0; j < b.getRestaurantes().size(); j++) \{\par
 1895                                 {\cf19 if} (encom[i].getRestauranteNome() == b.getRestaurantes()[j].getNome()) \{\par
 1896                                     cout << {\cf22 "Nome do Restaurante: \\t"} << encom[i].getRestauranteNome() << endl;\par
 1897                                     cout << {\cf22 "Data de entrega: \\t"} << encom[i].getData().getDia() << {\cf22 "/"}\par
 1898                                          << encom[i].getData().getMes() << {\cf22 "/"}\par
 1899                                          << encom[i].getData().getAno() << endl;\par
 1900                                     cout << {\cf22 "Nome do Entregador: \\t"} << encom[i].getEntregadorNome() << endl;\par
 1901                                     cout << {\cf22 "Hora de entrega: \\t"} << encom[i].getHora() << endl;\par
 1902                                     cout << {\cf22 "Pratos Encomendados: \\t"} << encom[i].getPratosNome() << endl;\par
 1903 \par
 1904                                     {\cf19 if} (!encom[i].isSucesso()) \{ {\cf20 //isSucesso = 0}\par
 1905                                         cout << {\cf22 "A entrega foi efetuada num concelho vizinho!"} << endl;\par
 1906                                     \} {\cf19 else} cout << {\cf22 "A entrega foi efetuada no proprio concelho!"} << endl;\par
 1907 \par
 1908                                     {\cf19 if} (!encom[i].isEntrega()) \{ {\cf20 //sem sucesso}\par
 1909                                         srand(time(0));\par
 1910                                         {\cf18 string} razoesInsucesso[4] = \{{\cf22 "Restaurante fechado!"},\par
 1911                                                                      {\cf22 "Problema de transporte!"},\par
 1912                                                                      {\cf22 "Aplicacao em atualizacao!"},\par
 1913                                                                      {\cf22 "Todos os estregadores estao ocupados!\\nTente novamente dentro de momentos"}\};\par
 1914 \par
 1915                                         vector<string> random;\par
 1916                                         {\cf19 for} ({\cf18 int} i = 0; i < 3; i++) \{\par
 1917                                             random.push_back(razoesInsucesso[rand() % 4]);\par
 1918                                         \}\par
 1919                                         cout << random[0] << endl;\par
 1920                                     \} {\cf19 else} cout << {\cf22 "Encomenda entregue com sucesso!\\nBom Apetite!"} << endl;\par
 1921                                     cout << {\cf22 "Nome do Cliente: \\t"} << encom[i].getClienteNome() << endl;\par
 1922                                     cout << {\cf22 "Valor da Encomenda: \\t"} << encom[i].getPreco() << {\cf22 " euros"} << endl;\par
 1923                                     cout << {\cf22 ":::::"} << endl;\par
 1924                                 \}\par
 1925                             \}\par
 1926                         \}\par
 1927                         system({\cf22 "pause"});\par
 1928                     \} {\cf19 else} {\cf19 if} (base == 2) \{\par
 1929                         b = Base({\cf22 "lisboa.txt"});\par
 1930                         e.encomendas_readfile();\par
 1931                         b.restaurantes_readfile();\par
 1932                         cout << {\cf22 "    Encomendas Lisboa"} << endl;\par
 1933                         cout << {\cf22 "_________________________"} << endl;\par
 1934                         {\cf19 for} ({\cf18 int} i = 0; i < encom.size(); i++) \{\par
 1935 \par
 1936                             {\cf19 for} ({\cf18 int} j = 0; j < b.getRestaurantes().size(); j++) \{\par
 1937                                 {\cf19 if} (encom[i].getRestauranteNome() == b.getRestaurantes()[j].getNome()) \{\par
 1938                                     cout << {\cf22 "Nome do Restaurante: \\t"} << encom[i].getRestauranteNome() << endl;\par
 1939                                     cout << {\cf22 "Data de entrega: \\t"} << encom[i].getData().getDia() << {\cf22 "/"}\par
 1940                                          << encom[i].getData().getMes() << {\cf22 "/"}\par
 1941                                          << encom[i].getData().getAno() << endl;\par
 1942                                     cout << {\cf22 "Nome do Entregador: \\t"} << encom[i].getEntregadorNome() << endl;\par
 1943                                     cout << {\cf22 "Hora de entrega: \\t"} << encom[i].getHora() << endl;\par
 1944                                     cout << {\cf22 "Pratos Encomendados: \\t"} << encom[i].getPratosNome() << endl;\par
 1945 \par
 1946                                     {\cf19 if} (!encom[i].isSucesso()) \{ {\cf20 //isSucesso = 0}\par
 1947                                         cout << {\cf22 "A entrega foi efetuada num concelho vizinho!"} << endl;\par
 1948                                     \} {\cf19 else} cout << {\cf22 "A entrega foi efetuada no proprio concelho!"} << endl;\par
 1949 \par
 1950                                     {\cf19 if} (!encom[i].isEntrega()) \{ {\cf20 //sem sucesso}\par
 1951                                         srand(time(0));\par
 1952                                         {\cf18 string} razoesInsucesso[4] = \{{\cf22 "Restaurante fechado!"},\par
 1953                                                                      {\cf22 "Problema de transporte!"},\par
 1954                                                                      {\cf22 "Aplicacao em atualizacao!"},\par
 1955                                                                      {\cf22 "Todos os estregadores estao ocupados!\\nTente novamente dentro de momentos"}\};\par
 1956 \par
 1957                                         vector<string> random;\par
 1958                                         {\cf19 for} ({\cf18 int} i = 0; i < 3; i++) \{\par
 1959                                             random.push_back(razoesInsucesso[rand() % 4]);\par
 1960                                         \}\par
 1961                                         cout << random[0] << endl;\par
 1962                                     \} {\cf19 else} cout << {\cf22 "Encomenda entregue com sucesso!\\nBom Apetite!"} << endl;\par
 1963                                     cout << {\cf22 "Nome do Cliente: \\t"} << encom[i].getClienteNome() << endl;\par
 1964                                     cout << {\cf22 "Valor da Encomenda: \\t"} << encom[i].getPreco() << {\cf22 " euros"} << endl;\par
 1965                                     cout << {\cf22 ":::::"} << endl;\par
 1966                                 \}\par
 1967                             \}\par
 1968                         \}\par
 1969                         system({\cf22 "pause"});\par
 1970                     \} {\cf19 else} {\cf19 if} (base == 3) \{\par
 1971                         b = Base({\cf22 "faro.txt"});\par
 1972                         e.encomendas_readfile();\par
 1973                         b.restaurantes_readfile();\par
 1974                         cout << {\cf22 "     Encomendas Faro     "} << endl;\par
 1975                         cout << {\cf22 "_________________________"} << endl;\par
 1976                         {\cf19 for} ({\cf18 int} i = 0; i < encom.size(); i++) \{\par
 1977 \par
 1978                             {\cf19 for} ({\cf18 int} j = 0; j < b.getRestaurantes().size(); j++) \{\par
 1979                                 {\cf19 if} (encom[i].getRestauranteNome() == b.getRestaurantes()[j].getNome()) \{\par
 1980                                     cout << {\cf22 "Nome do Restaurante: \\t"} << encom[i].getRestauranteNome() << endl;\par
 1981                                     cout << {\cf22 "Data de entrega: \\t"} << encom[i].getData().getDia() << {\cf22 "/"}\par
 1982                                          << encom[i].getData().getMes() << {\cf22 "/"}\par
 1983                                          << encom[i].getData().getAno() << endl;\par
 1984                                     cout << {\cf22 "Nome do Entregador: \\t"} << encom[i].getEntregadorNome() << endl;\par
 1985                                     cout << {\cf22 "Hora de entrega: \\t"} << encom[i].getHora() << endl;\par
 1986                                     cout << {\cf22 "Pratos Encomendados: \\t"} << encom[i].getPratosNome() << endl;\par
 1987 \par
 1988                                     {\cf19 if} (!encom[i].isSucesso()) \{ {\cf20 //isSucesso = 0}\par
 1989                                         cout << {\cf22 "A entrega foi efetuada num concelho vizinho!"} << endl;\par
 1990                                     \} {\cf19 else} cout << {\cf22 "A entrega foi efetuada no proprio concelho!"} << endl;\par
 1991 \par
 1992                                     {\cf19 if} (!encom[i].isEntrega()) \{ {\cf20 //sem sucesso}\par
 1993                                         srand(time(0));\par
 1994                                         {\cf18 string} razoesInsucesso[4] = \{{\cf22 "Restaurante fechado!"},\par
 1995                                                                      {\cf22 "Problema de transporte!"},\par
 1996                                                                      {\cf22 "Aplicacao em atualizacao!"},\par
 1997                                                                      {\cf22 "Todos os estregadores estao ocupados!\\nTente novamente dentro de momentos"}\};\par
 1998 \par
 1999                                         vector<string> random;\par
 2000                                         {\cf19 for} ({\cf18 int} i = 0; i < 3; i++) \{\par
 2001                                             random.push_back(razoesInsucesso[rand() % 4]);\par
 2002                                         \}\par
 2003                                         cout << random[0] << endl;\par
 2004                                     \} {\cf19 else} cout << {\cf22 "Encomenda entregue com sucesso!\\nBom Apetite!"} << endl;\par
 2005                                     cout << {\cf22 "Nome do Cliente: \\t"} << encom[i].getClienteNome() << endl;\par
 2006                                     cout << {\cf22 "Valor da Encomenda: \\t"} << encom[i].getPreco() << {\cf22 " euros"} << endl;\par
 2007                                     cout << {\cf22 ":::::"} << endl;\par
 2008                                 \}\par
 2009                             \}\par
 2010                         \}\par
 2011                         system({\cf22 "pause"});\par
 2012                     \} {\cf19 else} {\cf19 if} (base == 4) \{\par
 2013                         p = Base({\cf22 "porto.txt"});\par
 2014                         l = Base({\cf22 "lisboa.txt"});\par
 2015                         f = Base({\cf22 "faro.txt"});\par
 2016 \par
 2017                         e.encomendas_readfile();\par
 2018                         p.restaurantes_readfile();\par
 2019                         l.restaurantes_readfile();\par
 2020                         f.restaurantes_readfile();\par
 2021                         cout << {\cf22 "    Encomendas Porto"} << endl;\par
 2022                         cout << {\cf22 "_________________________"} << endl;\par
 2023                         {\cf19 for} ({\cf18 int} i = 0; i < encom.size(); i++) \{\par
 2024                             {\cf19 for} ({\cf18 int} j = 0; j < p.getRestaurantes().size(); j++) \{\par
 2025                                 {\cf19 if} (encom[i].getRestauranteNome() == p.getRestaurantes()[j].getNome()) \{\par
 2026                                     cout << {\cf22 "Nome do Restaurante: \\t"} << encom[i].getRestauranteNome() << endl;\par
 2027                                     cout << {\cf22 "Data de entrega: \\t"} << encom[i].getData().getDia() << {\cf22 "/"}\par
 2028                                          << encom[i].getData().getMes() << {\cf22 "/"}\par
 2029                                          << encom[i].getData().getAno() << endl;\par
 2030                                     cout << {\cf22 "Nome do Entregador: \\t"} << encom[i].getEntregadorNome() << endl;\par
 2031                                     cout << {\cf22 "Hora de entrega: \\t"} << encom[i].getHora() << endl;\par
 2032                                     cout << {\cf22 "Pratos Encomendados: \\t"} << encom[i].getPratosNome() << endl;\par
 2033 \par
 2034                                     {\cf19 if} (!encom[i].isSucesso()) \{ {\cf20 //isSucesso = 0}\par
 2035                                         cout << {\cf22 "A entrega foi efetuada num concelho vizinho!"} << endl;\par
 2036                                     \} {\cf19 else} cout << {\cf22 "A entrega foi efetuada no proprio concelho!"} << endl;\par
 2037 \par
 2038                                     {\cf19 if} (!encom[i].isEntrega()) \{ {\cf20 //sem sucesso}\par
 2039                                         srand(time(0));\par
 2040                                         {\cf18 string} razoesInsucesso[4] = \{{\cf22 "Restaurante fechado!"},\par
 2041                                                                      {\cf22 "Problema de transporte!"},\par
 2042                                                                      {\cf22 "Aplicacao em atualizacao!"},\par
 2043                                                                      {\cf22 "Todos os estregadores estao ocupados!\\nTente novamente dentro de momentos"}\};\par
 2044 \par
 2045                                         vector<string> random;\par
 2046                                         {\cf19 for} ({\cf18 int} i = 0; i < 3; i++) \{\par
 2047                                             random.push_back(razoesInsucesso[rand() % 4]);\par
 2048                                         \}\par
 2049                                         cout << random[0] << endl;\par
 2050                                     \} {\cf19 else} cout << {\cf22 "Encomenda entregue com sucesso!\\nBom Apetite!"} << endl;\par
 2051                                     cout << {\cf22 "Nome do Cliente: \\t"} << encom[i].getClienteNome() << endl;\par
 2052                                     cout << {\cf22 "Valor da Encomenda: \\t"} << encom[i].getPreco() << {\cf22 " euros"} << endl;\par
 2053                                     cout << {\cf22 ":::::"} << endl;\par
 2054                                 \}\par
 2055                             \}\par
 2056                         \}\par
 2057                         cout << {\cf22 "    Encomendas Lisboa"} << endl;\par
 2058                         cout << {\cf22 "_________________________"} << endl;\par
 2059                         {\cf19 for} ({\cf18 int} i = 0; i < encom.size(); i++) \{\par
 2060                             {\cf19 for} ({\cf18 int} j = 0; j < l.getRestaurantes().size(); j++) \{\par
 2061                                 {\cf19 if} (encom[i].getRestauranteNome() == l.getRestaurantes()[j].getNome()) \{\par
 2062                                     cout << {\cf22 "Nome do Restaurante: \\t"} << encom[i].getRestauranteNome() << endl;\par
 2063                                     cout << {\cf22 "Data de entrega: \\t"} << encom[i].getData().getDia() << {\cf22 "/"}\par
 2064                                          << encom[i].getData().getMes() << {\cf22 "/"}\par
 2065                                          << encom[i].getData().getAno() << endl;\par
 2066                                     cout << {\cf22 "Nome do Entregador: \\t"} << encom[i].getEntregadorNome() << endl;\par
 2067                                     cout << {\cf22 "Hora de entrega: \\t"} << encom[i].getHora() << endl;\par
 2068                                     cout << {\cf22 "Pratos Encomendados: \\t"} << encom[i].getPratosNome() << endl;\par
 2069 \par
 2070                                     {\cf19 if} (!encom[i].isSucesso()) \{ {\cf20 //isSucesso = 0}\par
 2071                                         cout << {\cf22 "A entrega foi efetuada num concelho vizinho!"} << endl;\par
 2072                                     \} {\cf19 else} cout << {\cf22 "A entrega foi efetuada no proprio concelho!"} << endl;\par
 2073 \par
 2074                                     {\cf19 if} (!encom[i].isEntrega()) \{ {\cf20 //sem sucesso}\par
 2075                                         srand(time(0));\par
 2076                                         {\cf18 string} razoesInsucesso[4] = \{{\cf22 "Restaurante fechado!"},\par
 2077                                                                      {\cf22 "Problema de transporte!"},\par
 2078                                                                      {\cf22 "Aplicacao em atualizacao!"},\par
 2079                                                                      {\cf22 "Todos os estregadores estao ocupados!\\nTente novamente dentro de momentos"}\};\par
 2080 \par
 2081                                         vector<string> random;\par
 2082                                         {\cf19 for} ({\cf18 int} i = 0; i < 3; i++) \{\par
 2083                                             random.push_back(razoesInsucesso[rand() % 4]);\par
 2084                                         \}\par
 2085                                         cout << random[0] << endl;\par
 2086                                     \} {\cf19 else} cout << {\cf22 "Encomenda entregue com sucesso!\\nBom Apetite!"} << endl;\par
 2087                                     cout << {\cf22 "Nome do Cliente: \\t"} << encom[i].getClienteNome() << endl;\par
 2088                                     cout << {\cf22 "Valor da Encomenda: \\t"} << encom[i].getPreco() << {\cf22 " euros"} << endl;\par
 2089                                     cout << {\cf22 ":::::"} << endl;\par
 2090                                 \}\par
 2091                             \}\par
 2092                         \}\par
 2093                         cout << {\cf22 "    Encomendas Faro"} << endl;\par
 2094                         cout << {\cf22 "_________________________"} << endl;\par
 2095                         {\cf19 for} ({\cf18 int} i = 0; i < encom.size(); i++) \{\par
 2096                             {\cf19 for} ({\cf18 int} j = 0; j < f.getRestaurantes().size(); j++) \{\par
 2097                                 {\cf19 if} (encom[i].getRestauranteNome() == f.getRestaurantes()[j].getNome()) \{\par
 2098                                     cout << {\cf22 "Nome do Restaurante: \\t"} << encom[i].getRestauranteNome() << endl;\par
 2099                                     cout << {\cf22 "Data de entrega: \\t"} << encom[i].getData().getDia() << {\cf22 "/"}\par
 2100                                          << encom[i].getData().getMes() << {\cf22 "/"}\par
 2101                                          << encom[i].getData().getAno() << endl;\par
 2102                                     cout << {\cf22 "Nome do Entregador: \\t"} << encom[i].getEntregadorNome() << endl;\par
 2103                                     cout << {\cf22 "Hora de entrega: \\t"} << encom[i].getHora() << endl;\par
 2104                                     cout << {\cf22 "Pratos Encomendados: \\t"} << encom[i].getPratosNome() << endl;\par
 2105 \par
 2106                                     {\cf19 if} (!encom[i].isSucesso()) \{ {\cf20 //isSucesso = 0}\par
 2107                                         cout << {\cf22 "A entrega foi efetuada num concelho vizinho!"} << endl;\par
 2108                                     \} {\cf19 else} cout << {\cf22 "A entrega foi efetuada no proprio concelho!"} << endl;\par
 2109 \par
 2110                                     {\cf19 if} (!encom[i].isEntrega()) \{ {\cf20 //sem sucesso}\par
 2111                                         srand(time(0));\par
 2112                                         {\cf18 string} razoesInsucesso[4] = \{{\cf22 "Restaurante fechado!"},\par
 2113                                                                      {\cf22 "Problema de transporte!"},\par
 2114                                                                      {\cf22 "Aplicacao em atualizacao!"},\par
 2115                                                                      {\cf22 "Todos os estregadores estao ocupados!\\nTente novamente dentro de momentos"}\};\par
 2116 \par
 2117                                         vector<string> random;\par
 2118                                         {\cf19 for} ({\cf18 int} i = 0; i < 3; i++) \{\par
 2119                                             random.push_back(razoesInsucesso[rand() % 4]);\par
 2120                                         \}\par
 2121                                         cout << random[0] << endl;\par
 2122                                     \} {\cf19 else} cout << {\cf22 "Encomenda entregue com sucesso!\\nBom Apetite!"} << endl;\par
 2123                                     cout << {\cf22 "Nome do Cliente: \\t"} << encom[i].getClienteNome() << endl;\par
 2124                                     cout << {\cf22 "Valor da Encomenda: \\t"} << encom[i].getPreco() << {\cf22 " euros"} << endl;\par
 2125                                     cout << {\cf22 ":::::"} << endl;\par
 2126                                 \}\par
 2127                             \}\par
 2128                         \}\par
 2129                         system({\cf22 "pause"});\par
 2130                     \}\par
 2131                 \}\par
 2132             \}\par
 2133                 {\cf20 //POR RESTAURANTE}\par
 2134             {\cf19 else} {\cf19 if} (op == 2) \{\par
 2135                 vector<Restaurante> nomesRest = \{\};\par
 2136                 p = Base({\cf22 "porto.txt"});\par
 2137                 l = Base({\cf22 "lisboa.txt"});\par
 2138                 f = Base({\cf22 "faro.txt"});\par
 2139 \par
 2140                 {\cf20 //e.encomendas_readfile();}\par
 2141                 p.restaurantes_readfile();\par
 2142                 l.restaurantes_readfile();\par
 2143                 f.restaurantes_readfile();\par
 2144                 {\cf19 for} ({\cf18 int} i = 0; i < p.getRestaurantes().size(); i++) \{\par
 2145                     nomesRest.push_back(p.getRestaurantes()[i]);\par
 2146                 \}\par
 2147                 {\cf19 for} ({\cf18 int} j = 0; j < l.getRestaurantes().size(); j++) \{\par
 2148                     nomesRest.push_back(l.getRestaurantes()[j]);\par
 2149                 \}\par
 2150                 {\cf19 for} ({\cf18 int} k = 0; k < f.getRestaurantes().size(); k++) \{\par
 2151                     nomesRest.push_back(f.getRestaurantes()[k]);\par
 2152                 \}\par
 2153                 sort(nomesRest.begin(), nomesRest.end());\par
 2154 \par
 2155 \par
 2156                 {\cf19 for} ({\cf18 int} j = 0; j < nomesRest.size(); j++) \{\par
 2157                     {\cf19 for} ({\cf18 int} i = 0; i < encom.size(); i++) \{\par
 2158                         {\cf19 if} (encom[i].getRestauranteNome() == nomesRest[j].getNome()) \{\par
 2159                             cout << {\cf22 "Nome do Restaurante: \\t"} << encom[i].getRestauranteNome() << endl;\par
 2160                             cout << {\cf22 "Data de entrega: \\t"} << encom[i].getData().getDia() << {\cf22 "/"}\par
 2161                                  << encom[i].getData().getMes() << {\cf22 "/"}\par
 2162                                  << encom[i].getData().getAno() << endl;\par
 2163                             cout << {\cf22 "Nome do Entregador: \\t"} << encom[i].getEntregadorNome() << endl;\par
 2164                             cout << {\cf22 "Hora de entrega: \\t"} << encom[i].getHora() << endl;\par
 2165                             cout << {\cf22 "Pratos Encomendados: \\t"} << encom[i].getPratosNome() << endl;\par
 2166 \par
 2167                             {\cf19 if} (!encom[i].isSucesso()) \{ {\cf20 //isSucesso = 0}\par
 2168                                 cout << {\cf22 "A entrega foi efetuada num concelho vizinho!"} << endl;\par
 2169                             \} {\cf19 else} cout << {\cf22 "A entrega foi efetuada no proprio concelho!"} << endl;\par
 2170 \par
 2171                             {\cf19 if} (!encom[i].isEntrega()) \{ {\cf20 //sem sucesso}\par
 2172                                 srand(time(0));\par
 2173                                 {\cf18 string} razoesInsucesso[4] = \{{\cf22 "Restaurante fechado!"}, {\cf22 "Problema de transporte!"},\par
 2174                                                              {\cf22 "Aplicacao em atualizacao!"},\par
 2175                                                              {\cf22 "Todos os estregadores estao ocupados!\\nTente novamente dentro de momentos"}\};\par
 2176 \par
 2177                                 vector<string> random;\par
 2178                                 {\cf19 for} ({\cf18 int} i = 0; i < 3; i++) \{\par
 2179                                     random.push_back(razoesInsucesso[rand() % 4]);\par
 2180                                 \}\par
 2181                                 cout << random[0] << endl;\par
 2182                             \} {\cf19 else} cout << {\cf22 "Encomenda entregue com sucesso!\\nBom Apetite!"} << endl;\par
 2183                             cout << {\cf22 "Nome do Cliente: \\t"} << encom[i].getClienteNome() << endl;\par
 2184                             cout << {\cf22 "Valor da Encomenda: \\t"} << encom[i].getPreco() << {\cf22 " euros"} << endl;\par
 2185                             cout << {\cf22 ":::::"} << endl;\par
 2186                         \}\par
 2187                     \}\par
 2188                 \}\par
 2189                 system({\cf22 "pause"});\par
 2190             \}\par
 2191 \par
 2192 \par
 2193                 {\cf20 //POR ENTREGADOR}\par
 2194             {\cf19 else} {\cf19 if} (op == 3) \{\par
 2195                 vector<string> nomesEntreg = \{\};\par
 2196                 p = Base({\cf22 "porto.txt"});\par
 2197                 l = Base({\cf22 "lisboa.txt"});\par
 2198                 f = Base({\cf22 "faro.txt"});\par
 2199 \par
 2200                 {\cf20 //e.encomendas_readfile();}\par
 2201                 p.funcionarios_readfile();\par
 2202                 l.funcionarios_readfile();\par
 2203                 f.funcionarios_readfile();\par
 2204                 {\cf19 for} ({\cf18 int} i = 0; i < p.getFuncionarios().size(); i++) \{\par
 2205                     {\cf19 if} (p.getFuncionarios()[i]->getTipoDeFuncionario() == {\cf22 "Entregador"}) \{\par
 2206                         nomesEntreg.push_back(p.getFuncionarios()[i]->getNome());\par
 2207                     \}\par
 2208                 \}\par
 2209                 {\cf19 for} ({\cf18 int} j = 0; j < l.getFuncionarios().size(); j++) \{\par
 2210                     {\cf19 if} (l.getFuncionarios()[j]->getTipoDeFuncionario() == {\cf22 "Entregador"}) \{\par
 2211                         nomesEntreg.push_back(l.getFuncionarios()[j]->getNome());\par
 2212                     \}\par
 2213                 \}\par
 2214                 {\cf19 for} ({\cf18 int} k = 0; k < f.getFuncionarios().size(); k++) \{\par
 2215                     {\cf19 if} (f.getFuncionarios()[k]->getTipoDeFuncionario() == {\cf22 "Entregador"}) \{\par
 2216                         nomesEntreg.push_back(f.getFuncionarios()[k]->getNome());\par
 2217                     \}\par
 2218                 \}\par
 2219 \par
 2220                 sort(nomesEntreg.begin(), nomesEntreg.end());\par
 2221 \par
 2222 \par
 2223                 {\cf19 for} ({\cf18 int} j = 0; j < nomesEntreg.size(); j++) \{\par
 2224                     {\cf19 for} ({\cf18 int} i = 0; i < encom.size(); i++) \{\par
 2225                         {\cf19 if} (encom[i].getEntregadorNome() == nomesEntreg[j]) \{\par
 2226                             cout << {\cf22 "Nome do Restaurante: \\t"} << encom[i].getRestauranteNome() << endl;\par
 2227                             cout << {\cf22 "Data de entrega: \\t"} << encom[i].getData().getDia() << {\cf22 "/"}\par
 2228                                  << encom[i].getData().getMes() << {\cf22 "/"}\par
 2229                                  << encom[i].getData().getAno() << endl;\par
 2230                             cout << {\cf22 "Nome do Entregador: \\t"} << encom[i].getEntregadorNome() << endl;\par
 2231                             cout << {\cf22 "Hora de entrega: \\t"} << encom[i].getHora() << endl;\par
 2232                             cout << {\cf22 "Pratos Encomendados: \\t"} << encom[i].getPratosNome() << endl;\par
 2233 \par
 2234                             {\cf19 if} (!encom[i].isSucesso()) \{ {\cf20 //isSucesso = 0}\par
 2235                                 cout << {\cf22 "A entrega foi efetuada num concelho vizinho!"} << endl;\par
 2236                             \} {\cf19 else} cout << {\cf22 "A entrega foi efetuada no proprio concelho!"} << endl;\par
 2237 \par
 2238                             {\cf19 if} (!encom[i].isEntrega()) \{ {\cf20 //sem sucesso}\par
 2239                                 srand(time(0));\par
 2240                                 {\cf18 string} razoesInsucesso[4] = \{{\cf22 "Restaurante fechado!"}, {\cf22 "Problema de transporte!"},\par
 2241                                                              {\cf22 "Aplicacao em atualizacao!"},\par
 2242                                                              {\cf22 "Todos os estregadores estao ocupados!\\nTente novamente dentro de momentos"}\};\par
 2243 \par
 2244                                 vector<string> random;\par
 2245                                 {\cf19 for} ({\cf18 int} i = 0; i < 3; i++) \{\par
 2246                                     random.push_back(razoesInsucesso[rand() % 4]);\par
 2247                                 \}\par
 2248                                 cout << random[0] << endl;\par
 2249                             \} {\cf19 else} cout << {\cf22 "Encomenda entregue com sucesso!\\nBom Apetite!"} << endl;\par
 2250                             cout << {\cf22 "Nome do Cliente: \\t"} << encom[i].getClienteNome() << endl;\par
 2251                             cout << {\cf22 "Valor da Encomenda: \\t"} << encom[i].getPreco() << {\cf22 " euros"} << endl;\par
 2252                             cout << {\cf22 ":::::"} << endl;\par
 2253                         \}\par
 2254                     \}\par
 2255                 \}\par
 2256                 system({\cf22 "pause"});\par
 2257             \}\par
 2258 \par
 2259                 {\cf20 //TODAS}\par
 2260             {\cf19 else} {\cf19 if} (op == 4) \{\par
 2261                 {\cf19 for} ({\cf18 int} i = 0; i < encom.size(); i++) \{\par
 2262                     cout << {\cf22 "Nome do Restaurante: \\t"} << encom[i].getRestauranteNome() << endl;\par
 2263                     cout << {\cf22 "Data de entrega: \\t"} << encom[i].getData().getDia() << {\cf22 "/"}\par
 2264                          << encom[i].getData().getMes() << {\cf22 "/"}\par
 2265                          << encom[i].getData().getAno() << endl;\par
 2266                     cout << {\cf22 "Nome do Entregador: \\t"} << encom[i].getEntregadorNome() << endl;\par
 2267                     cout << {\cf22 "Hora de entrega: \\t"} << encom[i].getHora() << endl;\par
 2268                     cout << {\cf22 "Pratos Encomendados: \\t"} << encom[i].getPratosNome() << endl;\par
 2269 \par
 2270                     {\cf19 if} (!encom[i].isSucesso()) \{ {\cf20 //isSucesso = 0}\par
 2271                         cout << {\cf22 "A entrega foi efetuada num concelho vizinho!"} << endl;\par
 2272                     \} {\cf19 else} cout << {\cf22 "A entrega foi efetuada no proprio concelho!"} << endl;\par
 2273 \par
 2274                     {\cf19 if} (!encom[i].isEntrega()) \{ {\cf20 //sem sucesso}\par
 2275                         srand(time(0));\par
 2276                         {\cf18 string} razoesInsucesso[4] = \{{\cf22 "Restaurante fechado!"}, {\cf22 "Problema de transporte!"},\par
 2277                                                      {\cf22 "Aplicacao em atualizacao!"},\par
 2278                                                      {\cf22 "Todos os estregadores estao ocupados!\\nTente novamente dentro de momentos"}\};\par
 2279 \par
 2280                         vector<string> random;\par
 2281                         {\cf19 for} ({\cf18 int} i = 0; i < 3; i++) \{\par
 2282                             random.push_back(razoesInsucesso[rand() % 4]);\par
 2283                         \}\par
 2284                         cout << random[0] << endl;\par
 2285                     \} {\cf19 else} cout << {\cf22 "Encomenda entregue com sucesso!\\nBom Apetite!"} << endl;\par
 2286                     cout << {\cf22 "Nome do Cliente: \\t"} << encom[i].getClienteNome() << endl;\par
 2287                     cout << {\cf22 "Valor da Encomenda: \\t"} << encom[i].getPreco() << {\cf22 " euros"} << endl;\par
 2288                     cout << {\cf22 ":::::"} << endl;\par
 2289                 \}\par
 2290 \par
 2291                 system({\cf22 "pause"});\par
 2292             \} {\cf19 else} \{ cout << {\cf22 "Opcao Invalida!\\n"}; \}\par
 2293         \}\par
 2294     \}\par
 2295 \par
 2296 \par
 2297 \}\par
}
}
{\xe \v verFunc\:main.cpp}
{\xe \v main.cpp\:verFunc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void verFunc ()}}
\par
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta de forma organizada a informa\'E7\'E3o de um funcion\'E1rio. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1281                \{\par
 1282 \par
 1283     cout << {\cf22 "Selecionou -Ver funcionarios-\\n"};\par
 1284     cout << {\cf22 "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\n"};\par
 1285     cout << {\cf22 "                         UghEats Food Delivery                                    "};\par
 1286     cout << {\cf22 "\\n\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n"};\par
 1287     cout << {\cf22 "Ver funcionarios da base: \\n"};\par
 1288     cout << {\cf22 "\{1\} - Porto\\n"};\par
 1289     cout << {\cf22 "\{2\} - Lisboa\\n"};\par
 1290     cout << {\cf22 "\{3\} - Faro\\n"};\par
 1291     cout << {\cf22 "\{4\} - Todas\\n"};\par
 1292     cout << {\cf22 "Prima \{0\} para voltar atras!\\n"};\par
 1293     {\cf18 int} base;\par
 1294     cin >> base;\par
 1295     {\cf19 switch} (base) \{\par
 1296         {\cf19 case} 0:\par
 1297             exit;\par
 1298             {\cf19 break};\par
 1299     \}\par
 1300 \par
 1301     Base b, c, d;\par
 1302     vector<Funcionario> v;\par
 1303     {\cf19 if} (base == 1) \{\par
 1304         b = Base({\cf22 "porto.txt"});\par
 1305         b.funcionarios_readfile();\par
 1306         {\cf19 for} ({\cf18 int} i = 0; i < b.getFuncionarios().size(); i++) \{\par
 1307             {\cf19 if} (b.getFuncionarios()[i]->getTipoDeFuncionario() == {\cf22 "Administrador"}) \{\par
 1308                 cout << {\cf22 "Tipo de Funcionario: \\t"} << b.getFuncionarios()[i]->getTipoDeFuncionario() << endl;\par
 1309                 cout << {\cf22 "Nome: \\t\\t\\t"} << b.getFuncionarios()[i]->getNome() << endl;\par
 1310                 cout << {\cf22 "NIF: \\t\\t\\t"} << b.getFuncionarios()[i]->getNif() << endl;\par
 1311                 cout << {\cf22 "Data de Nascimento: \\t"}\par
 1312                      << to_string(b.getFuncionarios()[i]->getData().getDia()) + {\cf22 "/"} +\par
 1313                         to_string(b.getFuncionarios()[i]->getData().getMes()) + {\cf22 "/"} +\par
 1314                         to_string(b.getFuncionarios()[i]->getData().getAno()) << endl;\par
 1315                 cout << {\cf22 "Salario: \\t\\t"} << to_string(b.getFuncionarios()[i]->getSalario()) << endl;\par
 1316                 cout << {\cf22 "Funcao: \\t\\t"} << b.getFuncionarios()[i]->getFuncao() << endl;\par
 1317                 cout << {\cf22 ":::::"} << endl;\par
 1318             \} {\cf19 else} {\cf19 if} (b.getFuncionarios()[i]->getTipoDeFuncionario() == {\cf22 "Entregador"}) \{\par
 1319                 cout << {\cf22 "Tipo de Funcionario: \\t"} << b.getFuncionarios()[i]->getTipoDeFuncionario() << endl;\par
 1320                 cout << {\cf22 "Nome: \\t\\t\\t"} << b.getFuncionarios()[i]->getNome() << endl;\par
 1321                 cout << {\cf22 "NIF: \\t\\t\\t"} << b.getFuncionarios()[i]->getNif() << endl;\par
 1322                 cout << {\cf22 "Data de Nascimento: \\t"}\par
 1323                      << to_string(b.getFuncionarios()[i]->getData().getDia()) + {\cf22 "/"} +\par
 1324                         to_string(b.getFuncionarios()[i]->getData().getMes()) + {\cf22 "/"} +\par
 1325                         to_string(b.getFuncionarios()[i]->getData().getAno()) << endl;\par
 1326                 cout << {\cf22 "Salario: \\t\\t"} << to_string(b.getFuncionarios()[i]->getSalario()) << endl;\par
 1327                 cout << {\cf22 "Veiculo Alocado: \\t"} << b.getFuncionarios()[i]->getVeiculoAlocado().getMarca() + {\cf22 ", "} +\par
 1328                                                  b.getFuncionarios()[i]->getVeiculoAlocado().getTipo() + {\cf22 ", "} +\par
 1329                                                  b.getFuncionarios()[i]->getVeiculoAlocado().getDataDeAquisicao()\par
 1330                      << endl;\par
 1331                 {\cf19 if} (b.getFuncionarios()[i]->isDisponivel()) \{\par
 1332                     cout << {\cf22 "Entregador disponivel"} << endl;\par
 1333                 \} {\cf19 else} \{\par
 1334                     cout << {\cf22 "Entregador nao disponivel"} << endl;\par
 1335                 \}\par
 1336 \par
 1337                 cout << {\cf22 ":::::"} << endl;\par
 1338             \}\par
 1339         \}\par
 1340         system({\cf22 "pause"});\par
 1341     \} {\cf19 else} {\cf19 if} (base == 2) \{\par
 1342         b = Base({\cf22 "lisboa.txt"});\par
 1343         b.funcionarios_readfile();\par
 1344         {\cf19 for} ({\cf18 int} i = 0; i < b.getFuncionarios().size(); i++) \{\par
 1345             {\cf19 if} (b.getFuncionarios()[i]->getTipoDeFuncionario() == {\cf22 "Administrador"}) \{\par
 1346                 cout << {\cf22 "Tipo de Funcionario: \\t"} << b.getFuncionarios()[i]->getTipoDeFuncionario() << endl;\par
 1347                 cout << {\cf22 "Nome: \\t\\t\\t"} << b.getFuncionarios()[i]->getNome() << endl;\par
 1348                 cout << {\cf22 "NIF: \\t\\t\\t"} << b.getFuncionarios()[i]->getNif() << endl;\par
 1349                 cout << {\cf22 "Data de Nascimento: \\t"}\par
 1350                      << to_string(b.getFuncionarios()[i]->getData().getDia()) + {\cf22 "/"} +\par
 1351                         to_string(b.getFuncionarios()[i]->getData().getMes()) + {\cf22 "/"} +\par
 1352                         to_string(b.getFuncionarios()[i]->getData().getAno()) << endl;\par
 1353                 cout << {\cf22 "Salario: \\t\\t"} << to_string(b.getFuncionarios()[i]->getSalario()) << endl;\par
 1354                 cout << {\cf22 "Funcao: \\t\\t"} << b.getFuncionarios()[i]->getFuncao() << endl;\par
 1355                 cout << {\cf22 ":::::"} << endl;\par
 1356             \} {\cf19 else} {\cf19 if} (b.getFuncionarios()[i]->getTipoDeFuncionario() == {\cf22 "Entregador"}) \{\par
 1357                 cout << {\cf22 "Tipo de Funcionario: \\t"} << b.getFuncionarios()[i]->getTipoDeFuncionario() << endl;\par
 1358                 cout << {\cf22 "Nome: \\t\\t\\t"} << b.getFuncionarios()[i]->getNome() << endl;\par
 1359                 cout << {\cf22 "NIF: \\t\\t\\t"} << b.getFuncionarios()[i]->getNif() << endl;\par
 1360                 cout << {\cf22 "Data de Nascimento: \\t"}\par
 1361                      << to_string(b.getFuncionarios()[i]->getData().getDia()) + {\cf22 "/"} +\par
 1362                         to_string(b.getFuncionarios()[i]->getData().getMes()) + {\cf22 "/"} +\par
 1363                         to_string(b.getFuncionarios()[i]->getData().getAno()) << endl;\par
 1364                 cout << {\cf22 "Salario: \\t\\t"} << to_string(b.getFuncionarios()[i]->getSalario()) << endl;\par
 1365                 cout << {\cf22 "Veiculo Alocado: \\t"} << b.getFuncionarios()[i]->getVeiculoAlocado().getMarca() + {\cf22 ", "} +\par
 1366                                                  b.getFuncionarios()[i]->getVeiculoAlocado().getTipo() + {\cf22 ", "} +\par
 1367                                                  b.getFuncionarios()[i]->getVeiculoAlocado().getDataDeAquisicao()\par
 1368                      << endl;\par
 1369                 {\cf19 if} (b.getFuncionarios()[i]->isDisponivel()) \{\par
 1370                     cout << {\cf22 "Entregador disponivel"} << endl;\par
 1371                 \} {\cf19 else} \{\par
 1372                     cout << {\cf22 "Entregador nao disponivel"} << endl;\par
 1373                 \}\par
 1374 \par
 1375                 cout << {\cf22 ":::::"} << endl;\par
 1376             \}\par
 1377         \}\par
 1378         system({\cf22 "pause"});\par
 1379     \} {\cf19 else} {\cf19 if} (base == 3) \{\par
 1380         b = Base({\cf22 "faro.txt"});\par
 1381         b.funcionarios_readfile();\par
 1382         {\cf19 for} ({\cf18 int} i = 0; i < b.getFuncionarios().size(); i++) \{\par
 1383             {\cf19 if} (b.getFuncionarios()[i]->getTipoDeFuncionario() == {\cf22 "Administrador"}) \{\par
 1384                 cout << {\cf22 "Tipo de Funcionario: \\t"} << b.getFuncionarios()[i]->getTipoDeFuncionario() << endl;\par
 1385                 cout << {\cf22 "Nome: \\t\\t\\t"} << b.getFuncionarios()[i]->getNome() << endl;\par
 1386                 cout << {\cf22 "NIF: \\t\\t\\t"} << b.getFuncionarios()[i]->getNif() << endl;\par
 1387                 cout << {\cf22 "Data de Nascimento: \\t"}\par
 1388                      << to_string(b.getFuncionarios()[i]->getData().getDia()) + {\cf22 "/"} +\par
 1389                         to_string(b.getFuncionarios()[i]->getData().getMes()) + {\cf22 "/"} +\par
 1390                         to_string(b.getFuncionarios()[i]->getData().getAno()) << endl;\par
 1391                 cout << {\cf22 "Salario: \\t\\t"} << to_string(b.getFuncionarios()[i]->getSalario()) << endl;\par
 1392                 cout << {\cf22 "Funcao: \\t\\t"} << b.getFuncionarios()[i]->getFuncao() << endl;\par
 1393                 cout << {\cf22 ":::::"} << endl;\par
 1394             \} {\cf19 else} {\cf19 if} (b.getFuncionarios()[i]->getTipoDeFuncionario() == {\cf22 "Entregador"}) \{\par
 1395                 cout << {\cf22 "Tipo de Funcionario: \\t"} << b.getFuncionarios()[i]->getTipoDeFuncionario() << endl;\par
 1396                 cout << {\cf22 "Nome: \\t\\t\\t"} << b.getFuncionarios()[i]->getNome() << endl;\par
 1397                 cout << {\cf22 "NIF: \\t\\t\\t"} << b.getFuncionarios()[i]->getNif() << endl;\par
 1398                 cout << {\cf22 "Data de Nascimento: \\t"}\par
 1399                      << to_string(b.getFuncionarios()[i]->getData().getDia()) + {\cf22 "/"} +\par
 1400                         to_string(b.getFuncionarios()[i]->getData().getMes()) + {\cf22 "/"} +\par
 1401                         to_string(b.getFuncionarios()[i]->getData().getAno()) << endl;\par
 1402                 cout << {\cf22 "Salario: \\t\\t"} << to_string(b.getFuncionarios()[i]->getSalario()) << endl;\par
 1403                 cout << {\cf22 "Veiculo Alocado: \\t"} << b.getFuncionarios()[i]->getVeiculoAlocado().getMarca() + {\cf22 ", "} +\par
 1404                                                  b.getFuncionarios()[i]->getVeiculoAlocado().getTipo() + {\cf22 ", "} +\par
 1405                                                  b.getFuncionarios()[i]->getVeiculoAlocado().getDataDeAquisicao()\par
 1406                      << endl;\par
 1407                 {\cf19 if} (b.getFuncionarios()[i]->isDisponivel()) \{\par
 1408                     cout << {\cf22 "Entregador disponivel"} << endl;\par
 1409                 \} {\cf19 else} \{\par
 1410                     cout << {\cf22 "Entregador nao disponivel"} << endl;\par
 1411                 \}\par
 1412 \par
 1413                 cout << {\cf22 ":::::"} << endl;\par
 1414             \}\par
 1415         \}\par
 1416         system({\cf22 "pause"});\par
 1417     \} {\cf19 else} {\cf19 if} (base == 4) \{\par
 1418         b = Base({\cf22 "porto.txt"});\par
 1419         c = Base({\cf22 "lisboa.txt"});\par
 1420         d = Base({\cf22 "faro.txt"});\par
 1421         cout << {\cf22 "   Funcionarios Porto   "} << endl;\par
 1422         cout << {\cf22 "_______________________"} << endl;\par
 1423         cout << endl;\par
 1424         b.funcionarios_readfile();\par
 1425         {\cf19 for} ({\cf18 int} i = 0; i < b.getFuncionarios().size(); i++) \{\par
 1426             {\cf19 if} (b.getFuncionarios()[i]->getTipoDeFuncionario() == {\cf22 "Administrador"}) \{\par
 1427                 cout << {\cf22 "Tipo de Funcionario: \\t"} << b.getFuncionarios()[i]->getTipoDeFuncionario() << endl;\par
 1428                 cout << {\cf22 "Nome: \\t\\t\\t"} << b.getFuncionarios()[i]->getNome() << endl;\par
 1429                 cout << {\cf22 "NIF: \\t\\t\\t"} << b.getFuncionarios()[i]->getNif() << endl;\par
 1430                 cout << {\cf22 "Data de Nascimento: \\t"}\par
 1431                      << to_string(b.getFuncionarios()[i]->getData().getDia()) + {\cf22 "/"} +\par
 1432                         to_string(b.getFuncionarios()[i]->getData().getMes()) + {\cf22 "/"} +\par
 1433                         to_string(b.getFuncionarios()[i]->getData().getAno()) << endl;\par
 1434                 cout << {\cf22 "Salario: \\t\\t"} << to_string(b.getFuncionarios()[i]->getSalario()) << endl;\par
 1435                 cout << {\cf22 "Funcao: \\t\\t"} << b.getFuncionarios()[i]->getFuncao() << endl;\par
 1436                 cout << {\cf22 ":::::"} << endl;\par
 1437             \} {\cf19 else} {\cf19 if} (b.getFuncionarios()[i]->getTipoDeFuncionario() == {\cf22 "Entregador"}) \{\par
 1438                 cout << {\cf22 "Tipo de Funcionario: \\t"} << b.getFuncionarios()[i]->getTipoDeFuncionario() << endl;\par
 1439                 cout << {\cf22 "Nome: \\t\\t\\t"} << b.getFuncionarios()[i]->getNome() << endl;\par
 1440                 cout << {\cf22 "NIF: \\t\\t\\t"} << b.getFuncionarios()[i]->getNif() << endl;\par
 1441                 cout << {\cf22 "Data de Nascimento: \\t"}\par
 1442                      << to_string(b.getFuncionarios()[i]->getData().getDia()) + {\cf22 "/"} +\par
 1443                         to_string(b.getFuncionarios()[i]->getData().getMes()) + {\cf22 "/"} +\par
 1444                         to_string(b.getFuncionarios()[i]->getData().getAno()) << endl;\par
 1445                 cout << {\cf22 "Salario: \\t\\t"} << to_string(b.getFuncionarios()[i]->getSalario()) << endl;\par
 1446                 cout << {\cf22 "Veiculo Alocado: \\t"} << b.getFuncionarios()[i]->getVeiculoAlocado().getMarca() + {\cf22 ", "} +\par
 1447                                                  b.getFuncionarios()[i]->getVeiculoAlocado().getTipo() + {\cf22 ", "} +\par
 1448                                                  b.getFuncionarios()[i]->getVeiculoAlocado().getDataDeAquisicao()\par
 1449                      << endl;\par
 1450                 {\cf19 if} (b.getFuncionarios()[i]->isDisponivel()) \{\par
 1451                     cout << {\cf22 "Entregador disponivel"} << endl;\par
 1452                 \} {\cf19 else} \{\par
 1453                     cout << {\cf22 "Entregador nao disponivel"} << endl;\par
 1454                 \}\par
 1455 \par
 1456                 cout << {\cf22 ":::::"} << endl;\par
 1457             \}\par
 1458         \}\par
 1459         cout << endl;\par
 1460         c.funcionarios_readfile();\par
 1461         cout << {\cf22 "   Funcionarios Lisboa  "} << endl;\par
 1462         cout << {\cf22 "_______________________"} << endl;\par
 1463         cout << endl;\par
 1464         {\cf19 for} ({\cf18 int} i = 0; i < c.getFuncionarios().size(); i++) \{\par
 1465             {\cf19 if} (c.getFuncionarios()[i]->getTipoDeFuncionario() == {\cf22 "Administrador"}) \{\par
 1466                 cout << {\cf22 "Tipo de Funcionario: \\t"} << c.getFuncionarios()[i]->getTipoDeFuncionario() << endl;\par
 1467                 cout << {\cf22 "Nome: \\t\\t\\t"} << c.getFuncionarios()[i]->getNome() << endl;\par
 1468                 cout << {\cf22 "NIF: \\t\\t\\t"} << c.getFuncionarios()[i]->getNif() << endl;\par
 1469                 cout << {\cf22 "Data de Nascimento: \\t"}\par
 1470                      << to_string(c.getFuncionarios()[i]->getData().getDia()) + {\cf22 "/"} +\par
 1471                         to_string(c.getFuncionarios()[i]->getData().getMes()) + {\cf22 "/"} +\par
 1472                         to_string(c.getFuncionarios()[i]->getData().getAno()) << endl;\par
 1473                 cout << {\cf22 "Salario: \\t\\t"} << to_string(c.getFuncionarios()[i]->getSalario()) << endl;\par
 1474                 cout << {\cf22 "Funcao: \\t\\t"} << c.getFuncionarios()[i]->getFuncao() << endl;\par
 1475                 cout << {\cf22 ":::::"} << endl;\par
 1476             \} {\cf19 else} {\cf19 if} (c.getFuncionarios()[i]->getTipoDeFuncionario() == {\cf22 "Entregador"}) \{\par
 1477                 cout << {\cf22 "Tipo de Funcionario: \\t"} << c.getFuncionarios()[i]->getTipoDeFuncionario() << endl;\par
 1478                 cout << {\cf22 "Nome: \\t\\t\\t"} << c.getFuncionarios()[i]->getNome() << endl;\par
 1479                 cout << {\cf22 "NIF: \\t\\t\\t"} << c.getFuncionarios()[i]->getNif() << endl;\par
 1480                 cout << {\cf22 "Data de Nascimento: \\t"}\par
 1481                      << to_string(c.getFuncionarios()[i]->getData().getDia()) + {\cf22 "/"} +\par
 1482                         to_string(c.getFuncionarios()[i]->getData().getMes()) + {\cf22 "/"} +\par
 1483                         to_string(c.getFuncionarios()[i]->getData().getAno()) << endl;\par
 1484                 cout << {\cf22 "Salario: \\t\\t"} << to_string(c.getFuncionarios()[i]->getSalario()) << endl;\par
 1485                 cout << {\cf22 "Veiculo Alocado: \\t"} << c.getFuncionarios()[i]->getVeiculoAlocado().getMarca() + {\cf22 ", "} +\par
 1486                                                  c.getFuncionarios()[i]->getVeiculoAlocado().getTipo() + {\cf22 ", "} +\par
 1487                                                  c.getFuncionarios()[i]->getVeiculoAlocado().getDataDeAquisicao()\par
 1488                      << endl;\par
 1489                 {\cf19 if} (c.getFuncionarios()[i]->isDisponivel()) \{\par
 1490                     cout << {\cf22 "Entregador disponivel"} << endl;\par
 1491                 \} {\cf19 else} \{\par
 1492                     cout << {\cf22 "Entregador nao disponivel"} << endl;\par
 1493                 \}\par
 1494 \par
 1495                 cout << {\cf22 ":::::"} << endl;\par
 1496             \}\par
 1497         \}\par
 1498         cout << endl;\par
 1499         d.funcionarios_readfile();\par
 1500         cout << {\cf22 "    Funcionarios Faro    "} << endl;\par
 1501         cout << {\cf22 "_______________________"} << endl;\par
 1502         cout << endl;\par
 1503         {\cf19 for} ({\cf18 int} i = 0; i < d.getFuncionarios().size(); i++) \{\par
 1504             {\cf19 if} (d.getFuncionarios()[i]->getTipoDeFuncionario() == {\cf22 "Administrador"}) \{\par
 1505                 cout << {\cf22 "Tipo de Funcionario: \\t"} << d.getFuncionarios()[i]->getTipoDeFuncionario() << endl;\par
 1506                 cout << {\cf22 "Nome: \\t\\t\\t"} << d.getFuncionarios()[i]->getNome() << endl;\par
 1507                 cout << {\cf22 "NIF: \\t\\t\\t"} << d.getFuncionarios()[i]->getNif() << endl;\par
 1508                 cout << {\cf22 "Data de Nascimento: \\t"}\par
 1509                      << to_string(d.getFuncionarios()[i]->getData().getDia()) + {\cf22 "/"} +\par
 1510                         to_string(d.getFuncionarios()[i]->getData().getMes()) + {\cf22 "/"} +\par
 1511                         to_string(d.getFuncionarios()[i]->getData().getAno()) << endl;\par
 1512                 cout << {\cf22 "Salario: \\t\\t"} << to_string(d.getFuncionarios()[i]->getSalario()) << endl;\par
 1513                 cout << {\cf22 "Funcao: \\t\\t"} << d.getFuncionarios()[i]->getFuncao() << endl;\par
 1514                 cout << {\cf22 ":::::"} << endl;\par
 1515             \} {\cf19 else} {\cf19 if} (d.getFuncionarios()[i]->getTipoDeFuncionario() == {\cf22 "Entregador"}) \{\par
 1516                 cout << {\cf22 "Tipo de Funcionario: \\t"} << d.getFuncionarios()[i]->getTipoDeFuncionario() << endl;\par
 1517                 cout << {\cf22 "Nome: \\t\\t\\t"} << d.getFuncionarios()[i]->getNome() << endl;\par
 1518                 cout << {\cf22 "NIF: \\t\\t\\t"} << d.getFuncionarios()[i]->getNif() << endl;\par
 1519                 cout << {\cf22 "Data de Nascimento: \\t"}\par
 1520                      << to_string(d.getFuncionarios()[i]->getData().getDia()) + {\cf22 "/"} +\par
 1521                         to_string(d.getFuncionarios()[i]->getData().getMes()) + {\cf22 "/"} +\par
 1522                         to_string(d.getFuncionarios()[i]->getData().getAno()) << endl;\par
 1523                 cout << {\cf22 "Salario: \\t\\t"} << to_string(d.getFuncionarios()[i]->getSalario()) << endl;\par
 1524                 cout << {\cf22 "Veiculo Alocado: \\t"} << d.getFuncionarios()[i]->getVeiculoAlocado().getMarca() + {\cf22 ", "} +\par
 1525                                                  d.getFuncionarios()[i]->getVeiculoAlocado().getTipo() + {\cf22 ", "} +\par
 1526                                                  d.getFuncionarios()[i]->getVeiculoAlocado().getDataDeAquisicao()\par
 1527                      << endl;\par
 1528                 {\cf19 if} (d.getFuncionarios()[i]->isDisponivel()) \{\par
 1529                     cout << {\cf22 "Entregador disponivel"} << endl;\par
 1530                 \} {\cf19 else} \{\par
 1531                     cout << {\cf22 "Entregador nao disponivel"} << endl;\par
 1532                 \}\par
 1533 \par
 1534                 cout << {\cf22 ":::::"} << endl;\par
 1535             \}\par
 1536         \}\par
 1537         system({\cf22 "pause"});\par
 1538 \par
 1539     \} {\cf19 else} \{\par
 1540         cout << {\cf22 "Opcao Invalida!"} << endl;\par
 1541         system({\cf22 "pause"});\par
 1542     \}\par
 1543 \par
 1544 \par
 1545 \}\par
}
}
{\xe \v verRest\:main.cpp}
{\xe \v main.cpp\:verRest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void verRest ()}}
\par
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Apresenta de forma organizada a informa\'E7\'E3o de um {\b Restaurante}. }}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  1546                \{\par
 1547 \par
 1548     cout << {\cf22 "Selecionou -Ver restaurantes-\\n"};\par
 1549     cout << {\cf22 "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\\n"};\par
 1550     cout << {\cf22 "                         UghEats Food Delivery                                    "};\par
 1551     cout << {\cf22 "\\n\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n"};\par
 1552     cout << {\cf22 "Ver restaurantes da base: \\n"};\par
 1553     cout << {\cf22 "\{1\} - Porto\\n"};\par
 1554     cout << {\cf22 "\{2\} - Lisboa\\n"};\par
 1555     cout << {\cf22 "\{3\} - Faro\\n"};\par
 1556     cout << {\cf22 "\{4\} - Todas\\n"};\par
 1557     cout << {\cf22 "Prima \{0\} para voltar atras!\\n"};\par
 1558     {\cf18 int} base;\par
 1559     cin >> base;\par
 1560     {\cf19 switch} (base) \{\par
 1561         {\cf19 case} 0:\par
 1562             exit;\par
 1563             {\cf19 break};\par
 1564     \}\par
 1565     Base b, c, d;\par
 1566     {\cf19 if} (base == 1) \{\par
 1567         b = Base({\cf22 "porto.txt"});\par
 1568         cout << {\cf22 "  Restaurantes Porto"} << endl;\par
 1569         cout << {\cf22 "_______________________"} << endl;\par
 1570         cout << endl;\par
 1571         b.restaurantes_readfile();\par
 1572         {\cf19 for} ({\cf18 int} i = 0; i < b.getRestaurantes().size(); i++) \{\par
 1573             b.getRestaurantes()[i].pratos_readfile();\par
 1574             cout << {\cf22 "Nome: \\t\\t"} << b.getRestaurantes()[i].getNome() << endl;\par
 1575             cout << {\cf22 "Morada: \\t"} << b.getRestaurantes()[i].getMorada().getRua() << {\cf22 ", "}\par
 1576                  << b.getRestaurantes()[i].getMorada().getLocalidade() << {\cf22 ", "}\par
 1577                  << b.getRestaurantes()[i].getMorada().getNumero() << endl;\par
 1578             cout << {\cf22 "Culinaria: \\t"} << b.getRestaurantes()[i].getTiposDeCulinaria()[0] << endl;\par
 1579             cout << {\cf22 "MENU:"} << endl;\par
 1580             {\cf19 for} ({\cf18 int} j = 0; j < b.getRestaurantes()[i].getPratos().size(); j++) \{\par
 1581                 cout << {\cf22 "\\t\\t"} << b.getRestaurantes()[i].getPratos()[j].getNome() << {\cf22 " - "}\par
 1582                      << fixed << setprecision(2) << b.getRestaurantes()[i].getPratos()[j].getPreco() << {\cf22 " euros"}\par
 1583                      << endl;\par
 1584             \}\par
 1585             cout << {\cf22 ":::::"} << endl;\par
 1586 \par
 1587         \}\par
 1588 \par
 1589         system({\cf22 "pause"});\par
 1590 \par
 1591     \} {\cf19 else} {\cf19 if} (base == 2) \{\par
 1592         b = Base({\cf22 "lisboa.txt"});\par
 1593         b.restaurantes_readfile();\par
 1594         cout << {\cf22 "  Restaurantes Lisboa"} << endl;\par
 1595         cout << {\cf22 "_______________________"} << endl;\par
 1596         cout << endl;\par
 1597         {\cf19 for} ({\cf18 int} i = 0; i < b.getRestaurantes().size(); i++) \{\par
 1598             b.getRestaurantes()[i].pratos_readfile();\par
 1599             cout << {\cf22 "Nome: \\t\\t"} << b.getRestaurantes()[i].getNome() << endl;\par
 1600             cout << {\cf22 "Morada: \\t"} << b.getRestaurantes()[i].getMorada().getRua() << {\cf22 ", "}\par
 1601                  << b.getRestaurantes()[i].getMorada().getLocalidade() << {\cf22 ", "}\par
 1602                  << b.getRestaurantes()[i].getMorada().getNumero() << endl;\par
 1603             cout << {\cf22 "Culinaria: \\t"} << b.getRestaurantes()[i].getTiposDeCulinaria()[0] << endl;\par
 1604             cout << {\cf22 "MENU:"} << endl;\par
 1605             {\cf19 for} ({\cf18 int} j = 0; j < b.getRestaurantes()[i].getPratos().size(); j++) \{\par
 1606                 cout << {\cf22 "\\t\\t"} << b.getRestaurantes()[i].getPratos()[j].getNome() << {\cf22 " - "}\par
 1607                      << fixed << setprecision(2) << b.getRestaurantes()[i].getPratos()[j].getPreco() << {\cf22 " euros"}\par
 1608                      << endl;\par
 1609             \}\par
 1610             cout << {\cf22 ":::::"} << endl;\par
 1611 \par
 1612         \}\par
 1613         system({\cf22 "pause"});\par
 1614 \par
 1615     \} {\cf19 else} {\cf19 if} (base == 3) \{\par
 1616         b = Base({\cf22 "faro.txt"});\par
 1617         b.restaurantes_readfile();\par
 1618         cout << {\cf22 "   Restaurantes Faro"} << endl;\par
 1619         cout << {\cf22 "_______________________"} << endl;\par
 1620         cout << endl;\par
 1621         {\cf19 for} ({\cf18 int} i = 0; i < b.getRestaurantes().size(); i++) \{\par
 1622             b.getRestaurantes()[i].pratos_readfile();\par
 1623             cout << {\cf22 "Nome: \\t\\t"} << b.getRestaurantes()[i].getNome() << endl;\par
 1624             cout << {\cf22 "Morada: \\t"} << b.getRestaurantes()[i].getMorada().getRua() << {\cf22 ", "}\par
 1625                  << b.getRestaurantes()[i].getMorada().getLocalidade() << {\cf22 ", "}\par
 1626                  << b.getRestaurantes()[i].getMorada().getNumero() << endl;\par
 1627             cout << {\cf22 "Culinaria: \\t"} << b.getRestaurantes()[i].getTiposDeCulinaria()[0] << endl;\par
 1628             cout << {\cf22 "MENU:"} << endl;\par
 1629             {\cf19 for} ({\cf18 int} j = 0; j < b.getRestaurantes()[i].getPratos().size(); j++) \{\par
 1630                 cout << {\cf22 "\\t\\t"} << b.getRestaurantes()[i].getPratos()[j].getNome() << {\cf22 " - "}\par
 1631                      << fixed << setprecision(2) << b.getRestaurantes()[i].getPratos()[j].getPreco() << {\cf22 " euros"}\par
 1632                      << endl;\par
 1633             \}\par
 1634             cout << {\cf22 ":::::"} << endl;\par
 1635 \par
 1636         \}\par
 1637         system({\cf22 "pause"});\par
 1638 \par
 1639     \} {\cf19 else} {\cf19 if} (base == 4) \{\par
 1640         b = Base({\cf22 "porto.txt"});\par
 1641         c = Base({\cf22 "lisboa.txt"});\par
 1642         d = Base({\cf22 "faro.txt"});\par
 1643         cout << {\cf22 "   Restaurantes Porto"} << endl;\par
 1644         cout << {\cf22 "_______________________"} << endl;\par
 1645         cout << endl;\par
 1646         b.restaurantes_readfile();\par
 1647         {\cf19 for} ({\cf18 int} i = 0; i < b.getRestaurantes().size(); i++) \{\par
 1648             b.getRestaurantes()[i].pratos_readfile();\par
 1649             cout << {\cf22 "Nome: \\t\\t"} << b.getRestaurantes()[i].getNome() << endl;\par
 1650             cout << {\cf22 "Morada: \\t"} << b.getRestaurantes()[i].getMorada().getRua() << {\cf22 ", "}\par
 1651                  << b.getRestaurantes()[i].getMorada().getLocalidade() << {\cf22 ", "}\par
 1652                  << b.getRestaurantes()[i].getMorada().getNumero() << endl;\par
 1653             cout << {\cf22 "TCulinaria: \\t"} << b.getRestaurantes()[i].getTiposDeCulinaria()[0] << endl;\par
 1654             cout << {\cf22 "MENU:"} << endl;\par
 1655             {\cf19 for} ({\cf18 int} j = 0; j < b.getRestaurantes()[i].getPratos().size(); j++) \{\par
 1656                 cout << {\cf22 "\\t\\t"} << b.getRestaurantes()[i].getPratos()[j].getNome() << {\cf22 " - "}\par
 1657                      << fixed << setprecision(2) << b.getRestaurantes()[i].getPratos()[j].getPreco() << {\cf22 " euros"}\par
 1658                      << endl;\par
 1659             \}\par
 1660             cout << {\cf22 ":::::"} << endl;\par
 1661 \par
 1662         \}\par
 1663         cout << endl;\par
 1664         cout << {\cf22 "  Restaurantes Lisboa"} << endl;\par
 1665         cout << {\cf22 "_______________________"} << endl;\par
 1666         cout << endl;\par
 1667         c.restaurantes_readfile();\par
 1668         {\cf19 for} ({\cf18 int} i = 0; i < c.getRestaurantes().size(); i++) \{\par
 1669             c.getRestaurantes()[i].pratos_readfile();\par
 1670             cout << {\cf22 "Nome: \\t\\t"} << c.getRestaurantes()[i].getNome() << endl;\par
 1671             cout << {\cf22 "Morada:\\t"} << c.getRestaurantes()[i].getMorada().getRua() << {\cf22 ", "}\par
 1672                  << c.getRestaurantes()[i].getMorada().getLocalidade() << {\cf22 ", "}\par
 1673                  << c.getRestaurantes()[i].getMorada().getNumero() << endl;\par
 1674             cout << {\cf22 "Culinaria: \\t"} << c.getRestaurantes()[i].getTiposDeCulinaria()[0] << endl;\par
 1675             cout << {\cf22 "MENU:"} << endl;\par
 1676             {\cf19 for} ({\cf18 int} j = 0; j < c.getRestaurantes()[i].getPratos().size(); j++) \{\par
 1677                 cout << {\cf22 "\\t\\t"} << c.getRestaurantes()[i].getPratos()[j].getNome() << {\cf22 " - "}\par
 1678                      << fixed << setprecision(2) << c.getRestaurantes()[i].getPratos()[j].getPreco() << {\cf22 " euros"}\par
 1679                      << endl;\par
 1680             \}\par
 1681             cout << {\cf22 ":::::"} << endl;\par
 1682 \par
 1683         \}\par
 1684 \par
 1685         cout << endl;\par
 1686         cout << {\cf22 "   Restaurantes Faro"} << endl;\par
 1687         cout << {\cf22 "_______________________"} << endl;\par
 1688         cout << endl;\par
 1689         d.restaurantes_readfile();\par
 1690         {\cf19 for} ({\cf18 int} i = 0; i < d.getRestaurantes().size(); i++) \{\par
 1691             d.getRestaurantes()[i].pratos_readfile();\par
 1692             cout << {\cf22 "Nome: \\t\\t"} << d.getRestaurantes()[i].getNome() << endl;\par
 1693             cout << {\cf22 "Morada: \\t"} << d.getRestaurantes()[i].getMorada().getRua() << {\cf22 ", "}\par
 1694                  << d.getRestaurantes()[i].getMorada().getLocalidade() << {\cf22 ", "}\par
 1695                  << d.getRestaurantes()[i].getMorada().getNumero() << endl;\par
 1696             cout << {\cf22 "Culinaria: \\t"} << d.getRestaurantes()[i].getTiposDeCulinaria()[0] << endl;\par
 1697             cout << {\cf22 "MENU:"} << endl;\par
 1698             {\cf19 for} ({\cf18 int} j = 0; j < d.getRestaurantes()[i].getPratos().size(); j++) \{\par
 1699                 cout << {\cf22 "\\t\\t"} << d.getRestaurantes()[i].getPratos()[j].getNome() << {\cf22 " - "}\par
 1700                      << fixed << setprecision(2) << d.getRestaurantes()[i].getPratos()[j].getPreco() << {\cf22 " euros"}\par
 1701                      << endl;\par
 1702             \}\par
 1703             cout << {\cf22 ":::::"} << endl;\par
 1704 \par
 1705         \}\par
 1706         system({\cf22 "pause"});\par
 1707 \par
 1708     \} {\cf19 else} \{\par
 1709         cout << {\cf22 "Opcao Invalida!"} << endl;\par
 1710         system({\cf22 "pause"});\par
 1711     \}\par
 1712 \par
 1713 \par
 1714 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia ao ficheiro UgnEatsFoodDeliveryFinal3/restaurante.cpp\par \pard\plain 
{\tc\tcl2 \v UgnEatsFoodDeliveryFinal3/restaurante.cpp}
{\xe \v UgnEatsFoodDeliveryFinal3/restaurante.cpp}
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "restaurante.h"}\par
{\f2 #include "fstream"}\par
{\f2 #include "vector"}\par
{\f2 #include "iostream"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia ao ficheiro UgnEatsFoodDeliveryFinal3/restaurante.h\par \pard\plain 
{\tc\tcl2 \v UgnEatsFoodDeliveryFinal3/restaurante.h}
{\xe \v UgnEatsFoodDeliveryFinal3/restaurante.h}
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "auxiliares.h"}\par
{\f2 #include <string>}\par
{\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Restaurante}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class {\b Restaurante} representa um restaurante atraves do seu nome, da sua {\b Morada}, do seu menu(vetor de pratos) e conjunto de tipos de culin\'E1ria. }}\par}
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \'CDndice\par 
\pard\plain 
{\tc \v \'CDndice}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}